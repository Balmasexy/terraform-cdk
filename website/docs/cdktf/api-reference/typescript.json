{
  "version": "0.1",
  "language": "typescript",
  "metadata": {
    "packageName": "cdktf",
    "packageVersion": "0.0.0"
  },
  "apiReference": {
    "constructs": [
      {
        "initializer": {
          "fqn": "cdktf.App.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.App.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.App.Initializer.parameter.options",
              "displayName": "options",
              "id": "cdktf.App.Initializer.parameter.options",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.AppOptions",
                    "displayName": "AppOptions",
                    "fqn": "cdktf.AppOptions",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {
                "summary": "configuration options."
              }
            }
          ],
          "usage": "import { App } from 'cdktf'\n\nnew App(options?: AppOptions)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.App.toString",
            "displayName": "toString",
            "id": "cdktf.App.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.App.crossStackReference",
            "displayName": "crossStackReference",
            "id": "cdktf.App.crossStackReference",
            "parameters": [
              {
                "fqn": "cdktf.App.crossStackReference.parameter.fromStack",
                "displayName": "fromStack",
                "id": "cdktf.App.crossStackReference.parameter.fromStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.App.crossStackReference.parameter.toStack",
                "displayName": "toStack",
                "id": "cdktf.App.crossStackReference.parameter.toStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.App.crossStackReference.parameter.identifier",
                "displayName": "identifier",
                "id": "cdktf.App.crossStackReference.parameter.identifier",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a reference from one stack to another, invoked on prepareStack since it creates extra resources."
            },
            "usage": "public crossStackReference(fromStack: TerraformStack, toStack: TerraformStack, identifier: string): string"
          },
          {
            "fqn": "cdktf.App.synth",
            "displayName": "synth",
            "id": "cdktf.App.synth",
            "parameters": [],
            "docs": {
              "summary": "Synthesizes all resources to the output directory."
            },
            "usage": "public synth(): void"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.App.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.App.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.App.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.App.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { App } from 'cdktf'\n\nApp.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.App.isApp",
            "displayName": "isApp",
            "id": "cdktf.App.isApp",
            "parameters": [
              {
                "fqn": "cdktf.App.isApp.parameter.x",
                "displayName": "x",
                "id": "cdktf.App.isApp.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { App } from 'cdktf'\n\nApp.isApp(x: any)"
          },
          {
            "fqn": "cdktf.App.of",
            "displayName": "of",
            "id": "cdktf.App.of",
            "parameters": [
              {
                "fqn": "cdktf.App.of.parameter.construct",
                "displayName": "construct",
                "id": "cdktf.App.of.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { App } from 'cdktf'\n\nApp.of(construct: IConstruct)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.App.property.node",
            "displayName": "node",
            "id": "cdktf.App.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.App.property.manifest",
            "displayName": "manifest",
            "id": "cdktf.App.property.manifest",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.Manifest",
                  "displayName": "Manifest",
                  "fqn": "cdktf.Manifest",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly manifest: Manifest;"
          },
          {
            "fqn": "cdktf.App.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.App.property.outdir",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The output directory into which resources will be synthesized."
            },
            "usage": "public readonly outdir: string;"
          },
          {
            "fqn": "cdktf.App.property.skipValidation",
            "displayName": "skipValidation",
            "id": "cdktf.App.property.skipValidation",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "Whether to skip the validation during synthesis of the app."
            },
            "usage": "public readonly skipValidation: boolean;"
          },
          {
            "fqn": "cdktf.App.property.targetStackId",
            "displayName": "targetStackId",
            "id": "cdktf.App.property.targetStackId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The stack which will be synthesized.",
              "remarks": "If not set, all stacks will be synthesized."
            },
            "usage": "public readonly targetStackId: string;"
          }
        ],
        "fqn": "cdktf.App",
        "displayName": "App",
        "id": "cdktf.App",
        "docs": {
          "summary": "Represents a cdktf application."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.ArtifactoryBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ArtifactoryBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ArtifactoryBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ArtifactoryBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.ArtifactoryBackendProps",
                    "displayName": "ArtifactoryBackendProps",
                    "fqn": "cdktf.ArtifactoryBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { ArtifactoryBackend } from 'cdktf'\n\nnew ArtifactoryBackend(scope: Construct, props: ArtifactoryBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ArtifactoryBackend.toString",
            "displayName": "toString",
            "id": "cdktf.ArtifactoryBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.ArtifactoryBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.ArtifactoryBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ArtifactoryBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.ArtifactoryBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.ArtifactoryBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.ArtifactoryBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.ArtifactoryBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.ArtifactoryBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.ArtifactoryBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.ArtifactoryBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.ArtifactoryBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.ArtifactoryBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { ArtifactoryBackend } from 'cdktf'\n\nArtifactoryBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.ArtifactoryBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.ArtifactoryBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { ArtifactoryBackend } from 'cdktf'\n\nArtifactoryBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ArtifactoryBackend.property.node",
            "displayName": "node",
            "id": "cdktf.ArtifactoryBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.ArtifactoryBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ArtifactoryBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.ArtifactoryBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.ArtifactoryBackend",
        "displayName": "ArtifactoryBackend",
        "id": "cdktf.ArtifactoryBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.AzurermBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AzurermBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.AzurermBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.AzurermBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.AzurermBackendProps",
                    "displayName": "AzurermBackendProps",
                    "fqn": "cdktf.AzurermBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { AzurermBackend } from 'cdktf'\n\nnew AzurermBackend(scope: Construct, props: AzurermBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.AzurermBackend.toString",
            "displayName": "toString",
            "id": "cdktf.AzurermBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.AzurermBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.AzurermBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.AzurermBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.AzurermBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.AzurermBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.AzurermBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.AzurermBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.AzurermBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.AzurermBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.AzurermBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.AzurermBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.AzurermBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.AzurermBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.AzurermBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.AzurermBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.AzurermBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.AzurermBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.AzurermBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.AzurermBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { AzurermBackend } from 'cdktf'\n\nAzurermBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.AzurermBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.AzurermBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.AzurermBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { AzurermBackend } from 'cdktf'\n\nAzurermBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.AzurermBackend.property.node",
            "displayName": "node",
            "id": "cdktf.AzurermBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.AzurermBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.AzurermBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.AzurermBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.AzurermBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.AzurermBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.AzurermBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.AzurermBackend",
        "displayName": "AzurermBackend",
        "id": "cdktf.AzurermBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.CloudBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CloudBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.CloudBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.CloudBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.CloudBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.CloudBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.CloudBackendProps",
                    "displayName": "CloudBackendProps",
                    "fqn": "cdktf.CloudBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { CloudBackend } from 'cdktf'\n\nnew CloudBackend(scope: Construct, props: CloudBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.CloudBackend.toString",
            "displayName": "toString",
            "id": "cdktf.CloudBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.CloudBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.CloudBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.CloudBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CloudBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.CloudBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.CloudBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.CloudBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.CloudBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.CloudBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.CloudBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.CloudBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.CloudBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.CloudBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.CloudBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.CloudBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.CloudBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CloudBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CloudBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.CloudBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.CloudBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.CloudBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { CloudBackend } from 'cdktf'\n\nCloudBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.CloudBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.CloudBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.CloudBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { CloudBackend } from 'cdktf'\n\nCloudBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.CloudBackend.property.node",
            "displayName": "node",
            "id": "cdktf.CloudBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.CloudBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.CloudBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.CloudBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.CloudBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.CloudBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.CloudBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.CloudBackend",
        "displayName": "CloudBackend",
        "id": "cdktf.CloudBackend",
        "docs": {
          "summary": "The Cloud Backend synthesizes a {@link https://www.terraform.io/cli/cloud/settings#the-cloud-block cloud block}. The cloud block is a nested block within the top-level terraform settings block. It specifies which Terraform Cloud workspaces to use for the current working directory. The cloud block only affects Terraform CLI's behavior. When Terraform Cloud uses a configuration that contains a cloud block - for example, when a workspace is configured to use a VCS provider directly - it ignores the block and behaves according to its own workspace settings."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.ConsulBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ConsulBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.ConsulBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.ConsulBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.ConsulBackendProps",
                    "displayName": "ConsulBackendProps",
                    "fqn": "cdktf.ConsulBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { ConsulBackend } from 'cdktf'\n\nnew ConsulBackend(scope: Construct, props: ConsulBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ConsulBackend.toString",
            "displayName": "toString",
            "id": "cdktf.ConsulBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.ConsulBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.ConsulBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.ConsulBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ConsulBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.ConsulBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.ConsulBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.ConsulBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.ConsulBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.ConsulBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.ConsulBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.ConsulBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.ConsulBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.ConsulBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.ConsulBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.ConsulBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.ConsulBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.ConsulBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.ConsulBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.ConsulBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { ConsulBackend } from 'cdktf'\n\nConsulBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.ConsulBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.ConsulBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.ConsulBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { ConsulBackend } from 'cdktf'\n\nConsulBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ConsulBackend.property.node",
            "displayName": "node",
            "id": "cdktf.ConsulBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.ConsulBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.ConsulBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.ConsulBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ConsulBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.ConsulBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.ConsulBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.ConsulBackend",
        "displayName": "ConsulBackend",
        "id": "cdktf.ConsulBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.CosBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CosBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.CosBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.CosBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.CosBackendProps",
                    "displayName": "CosBackendProps",
                    "fqn": "cdktf.CosBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { CosBackend } from 'cdktf'\n\nnew CosBackend(scope: Construct, props: CosBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.CosBackend.toString",
            "displayName": "toString",
            "id": "cdktf.CosBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.CosBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.CosBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.CosBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CosBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.CosBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.CosBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.CosBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.CosBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.CosBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.CosBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.CosBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.CosBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.CosBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.CosBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.CosBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.CosBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CosBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CosBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.CosBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.CosBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.CosBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { CosBackend } from 'cdktf'\n\nCosBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.CosBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.CosBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.CosBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { CosBackend } from 'cdktf'\n\nCosBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.CosBackend.property.node",
            "displayName": "node",
            "id": "cdktf.CosBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.CosBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.CosBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.CosBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.CosBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.CosBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.CosBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.CosBackend",
        "displayName": "CosBackend",
        "id": "cdktf.CosBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteState.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteState.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateRemoteConfig",
                    "displayName": "DataTerraformRemoteStateRemoteConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteState } from 'cdktf'\n\nnew DataTerraformRemoteState(scope: Construct, id: string, config: DataTerraformRemoteStateRemoteConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteState.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteState.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteState.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteState.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteState.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteState.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteState.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteState.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteState.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteState.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteState.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteState.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteState.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteState.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteState.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteState.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteState.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteState.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteState.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteState } from 'cdktf'\n\nDataTerraformRemoteState.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteState.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteState.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteState.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteState.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteState.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteState",
        "displayName": "DataTerraformRemoteState",
        "id": "cdktf.DataTerraformRemoteState",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
                    "displayName": "DataTerraformRemoteStateArtifactoryConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateArtifactory } from 'cdktf'\n\nnew DataTerraformRemoteStateArtifactory(scope: Construct, id: string, config: DataTerraformRemoteStateArtifactoryConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateArtifactory } from 'cdktf'\n\nDataTerraformRemoteStateArtifactory.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateArtifactory",
        "displayName": "DataTerraformRemoteStateArtifactory",
        "id": "cdktf.DataTerraformRemoteStateArtifactory",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateAzurermConfig",
                    "displayName": "DataTerraformRemoteStateAzurermConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateAzurerm } from 'cdktf'\n\nnew DataTerraformRemoteStateAzurerm(scope: Construct, id: string, config: DataTerraformRemoteStateAzurermConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateAzurerm } from 'cdktf'\n\nDataTerraformRemoteStateAzurerm.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateAzurerm",
        "displayName": "DataTerraformRemoteStateAzurerm",
        "id": "cdktf.DataTerraformRemoteStateAzurerm",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateConsul.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateConsulConfig",
                    "displayName": "DataTerraformRemoteStateConsulConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateConsulConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateConsul } from 'cdktf'\n\nnew DataTerraformRemoteStateConsul(scope: Construct, id: string, config: DataTerraformRemoteStateConsulConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateConsul.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateConsul.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateConsul.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateConsul.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateConsul.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateConsul.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateConsul.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateConsul.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateConsul.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateConsul.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateConsul.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateConsul.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateConsul.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateConsul.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateConsul.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateConsul.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateConsul } from 'cdktf'\n\nDataTerraformRemoteStateConsul.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateConsul",
        "displayName": "DataTerraformRemoteStateConsul",
        "id": "cdktf.DataTerraformRemoteStateConsul",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateCos.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateCosConfig",
                    "displayName": "DataTerraformRemoteStateCosConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateCosConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateCos } from 'cdktf'\n\nnew DataTerraformRemoteStateCos(scope: Construct, id: string, config: DataTerraformRemoteStateCosConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateCos.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateCos.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateCos.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateCos.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateCos.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateCos.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateCos.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateCos.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateCos.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateCos.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateCos.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateCos.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateCos.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateCos.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateCos.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateCos.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateCos } from 'cdktf'\n\nDataTerraformRemoteStateCos.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateCos.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateCos.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateCos.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateCos.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateCos.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateCos",
        "displayName": "DataTerraformRemoteStateCos",
        "id": "cdktf.DataTerraformRemoteStateCos",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateEtcdConfig",
                    "displayName": "DataTerraformRemoteStateEtcdConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateEtcd } from 'cdktf'\n\nnew DataTerraformRemoteStateEtcd(scope: Construct, id: string, config: DataTerraformRemoteStateEtcdConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateEtcd.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateEtcd.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateEtcd.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateEtcd.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateEtcd.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateEtcd.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateEtcd } from 'cdktf'\n\nDataTerraformRemoteStateEtcd.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateEtcd",
        "displayName": "DataTerraformRemoteStateEtcd",
        "id": "cdktf.DataTerraformRemoteStateEtcd",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateEtcdV3Config",
                    "displayName": "DataTerraformRemoteStateEtcdV3Config",
                    "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateEtcdV3 } from 'cdktf'\n\nnew DataTerraformRemoteStateEtcdV3(scope: Construct, id: string, config: DataTerraformRemoteStateEtcdV3Config)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateEtcdV3 } from 'cdktf'\n\nDataTerraformRemoteStateEtcdV3.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateEtcdV3",
        "displayName": "DataTerraformRemoteStateEtcdV3",
        "id": "cdktf.DataTerraformRemoteStateEtcdV3",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateGcs.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateGcsConfig",
                    "displayName": "DataTerraformRemoteStateGcsConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateGcsConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateGcs } from 'cdktf'\n\nnew DataTerraformRemoteStateGcs(scope: Construct, id: string, config: DataTerraformRemoteStateGcsConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateGcs.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateGcs.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateGcs.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateGcs.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateGcs.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateGcs.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateGcs.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateGcs.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateGcs.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateGcs.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateGcs.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateGcs.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateGcs.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateGcs.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateGcs.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateGcs.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateGcs } from 'cdktf'\n\nDataTerraformRemoteStateGcs.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateGcs",
        "displayName": "DataTerraformRemoteStateGcs",
        "id": "cdktf.DataTerraformRemoteStateGcs",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateHttp.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateHttpConfig",
                    "displayName": "DataTerraformRemoteStateHttpConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateHttpConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateHttp } from 'cdktf'\n\nnew DataTerraformRemoteStateHttp(scope: Construct, id: string, config: DataTerraformRemoteStateHttpConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateHttp.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateHttp.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateHttp.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateHttp.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateHttp.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateHttp.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateHttp.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateHttp.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateHttp.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateHttp.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateHttp.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateHttp.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateHttp.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateHttp.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateHttp.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateHttp.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateHttp } from 'cdktf'\n\nDataTerraformRemoteStateHttp.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateHttp",
        "displayName": "DataTerraformRemoteStateHttp",
        "id": "cdktf.DataTerraformRemoteStateHttp",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateLocal.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateLocalConfig",
                    "displayName": "DataTerraformRemoteStateLocalConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateLocalConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateLocal } from 'cdktf'\n\nnew DataTerraformRemoteStateLocal(scope: Construct, id: string, config: DataTerraformRemoteStateLocalConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateLocal.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateLocal.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateLocal.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateLocal.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateLocal.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateLocal.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateLocal.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateLocal.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateLocal.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateLocal.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateLocal.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateLocal.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateLocal.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateLocal.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateLocal.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateLocal.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateLocal } from 'cdktf'\n\nDataTerraformRemoteStateLocal.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateLocal",
        "displayName": "DataTerraformRemoteStateLocal",
        "id": "cdktf.DataTerraformRemoteStateLocal",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateManta.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateMantaConfig",
                    "displayName": "DataTerraformRemoteStateMantaConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateMantaConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateManta } from 'cdktf'\n\nnew DataTerraformRemoteStateManta(scope: Construct, id: string, config: DataTerraformRemoteStateMantaConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateManta.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateManta.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateManta.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateManta.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateManta.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateManta.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateManta.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateManta.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateManta.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateManta.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateManta.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateManta.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateManta.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateManta.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateManta.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateManta.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateManta } from 'cdktf'\n\nDataTerraformRemoteStateManta.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateManta.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateManta.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateManta.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateManta.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateManta.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateManta",
        "displayName": "DataTerraformRemoteStateManta",
        "id": "cdktf.DataTerraformRemoteStateManta",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateOss.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateOssConfig",
                    "displayName": "DataTerraformRemoteStateOssConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateOssConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateOss } from 'cdktf'\n\nnew DataTerraformRemoteStateOss(scope: Construct, id: string, config: DataTerraformRemoteStateOssConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateOss.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateOss.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateOss.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateOss.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateOss.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateOss.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateOss.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateOss.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateOss.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateOss.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateOss.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateOss.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateOss.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateOss.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateOss.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateOss.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateOss } from 'cdktf'\n\nDataTerraformRemoteStateOss.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateOss.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateOss.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateOss.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateOss.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateOss.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateOss",
        "displayName": "DataTerraformRemoteStateOss",
        "id": "cdktf.DataTerraformRemoteStateOss",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStatePg.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStatePgConfig",
                    "displayName": "DataTerraformRemoteStatePgConfig",
                    "fqn": "cdktf.DataTerraformRemoteStatePgConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStatePg } from 'cdktf'\n\nnew DataTerraformRemoteStatePg(scope: Construct, id: string, config: DataTerraformRemoteStatePgConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStatePg.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStatePg.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStatePg.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStatePg.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStatePg.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStatePg.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStatePg.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStatePg.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStatePg.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStatePg.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStatePg.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStatePg.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStatePg.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStatePg.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStatePg.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStatePg.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStatePg } from 'cdktf'\n\nDataTerraformRemoteStatePg.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStatePg.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStatePg.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStatePg.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStatePg.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStatePg.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStatePg",
        "displayName": "DataTerraformRemoteStatePg",
        "id": "cdktf.DataTerraformRemoteStatePg",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateS3.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateS3Config",
                    "displayName": "DataTerraformRemoteStateS3Config",
                    "fqn": "cdktf.DataTerraformRemoteStateS3Config",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateS3 } from 'cdktf'\n\nnew DataTerraformRemoteStateS3(scope: Construct, id: string, config: DataTerraformRemoteStateS3Config)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateS3.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateS3.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateS3.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateS3.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateS3.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateS3.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateS3.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateS3.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateS3.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateS3.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateS3.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateS3.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateS3.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateS3.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateS3.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateS3.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateS3 } from 'cdktf'\n\nDataTerraformRemoteStateS3.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateS3.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateS3.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateS3.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateS3.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateS3.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateS3",
        "displayName": "DataTerraformRemoteStateS3",
        "id": "cdktf.DataTerraformRemoteStateS3",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateSwift.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateSwiftConfig",
                    "displayName": "DataTerraformRemoteStateSwiftConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DataTerraformRemoteStateSwift } from 'cdktf'\n\nnew DataTerraformRemoteStateSwift(scope: Construct, id: string, config: DataTerraformRemoteStateSwiftConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.toString",
            "displayName": "toString",
            "id": "cdktf.DataTerraformRemoteStateSwift.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.DataTerraformRemoteStateSwift.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateSwift.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateSwift.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateSwift.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.DataTerraformRemoteStateSwift.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateSwift.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.DataTerraformRemoteStateSwift.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.DataTerraformRemoteStateSwift.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateSwift.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.DataTerraformRemoteStateSwift.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.getList",
            "displayName": "getList",
            "id": "cdktf.DataTerraformRemoteStateSwift.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.DataTerraformRemoteStateSwift.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.getString",
            "displayName": "getString",
            "id": "cdktf.DataTerraformRemoteStateSwift.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.DataTerraformRemoteStateSwift.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateSwift.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { DataTerraformRemoteStateSwift } from 'cdktf'\n\nDataTerraformRemoteStateSwift.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateSwift",
        "displayName": "DataTerraformRemoteStateSwift",
        "id": "cdktf.DataTerraformRemoteStateSwift",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.EtcdBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.EtcdBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.EtcdBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.EtcdBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.EtcdBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.EtcdBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.EtcdBackendProps",
                    "displayName": "EtcdBackendProps",
                    "fqn": "cdktf.EtcdBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { EtcdBackend } from 'cdktf'\n\nnew EtcdBackend(scope: Construct, props: EtcdBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.EtcdBackend.toString",
            "displayName": "toString",
            "id": "cdktf.EtcdBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.EtcdBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.EtcdBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.EtcdBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.EtcdBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.EtcdBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.EtcdBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.EtcdBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.EtcdBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.EtcdBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.EtcdBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.EtcdBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.EtcdBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.EtcdBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.EtcdBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.EtcdBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.EtcdBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.EtcdBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.EtcdBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { EtcdBackend } from 'cdktf'\n\nEtcdBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.EtcdBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.EtcdBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.EtcdBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { EtcdBackend } from 'cdktf'\n\nEtcdBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.EtcdBackend.property.node",
            "displayName": "node",
            "id": "cdktf.EtcdBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.EtcdBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.EtcdBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.EtcdBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.EtcdBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.EtcdBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.EtcdBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.EtcdBackend",
        "displayName": "EtcdBackend",
        "id": "cdktf.EtcdBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.EtcdV3Backend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.EtcdV3Backend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.EtcdV3BackendProps",
                    "displayName": "EtcdV3BackendProps",
                    "fqn": "cdktf.EtcdV3BackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { EtcdV3Backend } from 'cdktf'\n\nnew EtcdV3Backend(scope: Construct, props: EtcdV3BackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.EtcdV3Backend.toString",
            "displayName": "toString",
            "id": "cdktf.EtcdV3Backend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.EtcdV3Backend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.EtcdV3Backend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdV3Backend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.EtcdV3Backend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.EtcdV3Backend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.EtcdV3Backend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.EtcdV3Backend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.EtcdV3Backend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.EtcdV3Backend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.EtcdV3Backend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.EtcdV3Backend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.EtcdV3Backend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { EtcdV3Backend } from 'cdktf'\n\nEtcdV3Backend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.EtcdV3Backend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.EtcdV3Backend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { EtcdV3Backend } from 'cdktf'\n\nEtcdV3Backend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.EtcdV3Backend.property.node",
            "displayName": "node",
            "id": "cdktf.EtcdV3Backend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.EtcdV3Backend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.EtcdV3Backend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.EtcdV3Backend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.EtcdV3Backend",
        "displayName": "EtcdV3Backend",
        "id": "cdktf.EtcdV3Backend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.GcsBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.GcsBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.GcsBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.GcsBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.GcsBackendProps",
                    "displayName": "GcsBackendProps",
                    "fqn": "cdktf.GcsBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { GcsBackend } from 'cdktf'\n\nnew GcsBackend(scope: Construct, props: GcsBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.GcsBackend.toString",
            "displayName": "toString",
            "id": "cdktf.GcsBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.GcsBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.GcsBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.GcsBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.GcsBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.GcsBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.GcsBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.GcsBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.GcsBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.GcsBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.GcsBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.GcsBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.GcsBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.GcsBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.GcsBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.GcsBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.GcsBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.GcsBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.GcsBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.GcsBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.GcsBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.GcsBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { GcsBackend } from 'cdktf'\n\nGcsBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.GcsBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.GcsBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.GcsBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { GcsBackend } from 'cdktf'\n\nGcsBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.GcsBackend.property.node",
            "displayName": "node",
            "id": "cdktf.GcsBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.GcsBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.GcsBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.GcsBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.GcsBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.GcsBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.GcsBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.GcsBackend",
        "displayName": "GcsBackend",
        "id": "cdktf.GcsBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.HttpBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.HttpBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.HttpBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.HttpBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.HttpBackendProps",
                    "displayName": "HttpBackendProps",
                    "fqn": "cdktf.HttpBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { HttpBackend } from 'cdktf'\n\nnew HttpBackend(scope: Construct, props: HttpBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.HttpBackend.toString",
            "displayName": "toString",
            "id": "cdktf.HttpBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.HttpBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.HttpBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.HttpBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.HttpBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.HttpBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.HttpBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.HttpBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.HttpBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.HttpBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.HttpBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.HttpBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.HttpBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.HttpBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.HttpBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.HttpBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.HttpBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.HttpBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.HttpBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.HttpBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.HttpBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.HttpBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { HttpBackend } from 'cdktf'\n\nHttpBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.HttpBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.HttpBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.HttpBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { HttpBackend } from 'cdktf'\n\nHttpBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.HttpBackend.property.node",
            "displayName": "node",
            "id": "cdktf.HttpBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.HttpBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.HttpBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.HttpBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.HttpBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.HttpBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.HttpBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.HttpBackend",
        "displayName": "HttpBackend",
        "id": "cdktf.HttpBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.LocalBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.LocalBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.LocalBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.LocalBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.LocalBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.LocalBackend.Initializer.parameter.props",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.LocalBackendProps",
                    "displayName": "LocalBackendProps",
                    "fqn": "cdktf.LocalBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { LocalBackend } from 'cdktf'\n\nnew LocalBackend(scope: Construct, props?: LocalBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.LocalBackend.toString",
            "displayName": "toString",
            "id": "cdktf.LocalBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.LocalBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.LocalBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.LocalBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.LocalBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.LocalBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.LocalBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.LocalBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.LocalBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.LocalBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.LocalBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.LocalBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.LocalBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.LocalBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.LocalBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.LocalBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.LocalBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.fromStack",
                "displayName": "fromStack",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.LocalBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.LocalBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.LocalBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { LocalBackend } from 'cdktf'\n\nLocalBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.LocalBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.LocalBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.LocalBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { LocalBackend } from 'cdktf'\n\nLocalBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.LocalBackend.property.node",
            "displayName": "node",
            "id": "cdktf.LocalBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.LocalBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.LocalBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.LocalBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.LocalBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.LocalBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.LocalBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.LocalBackend",
        "displayName": "LocalBackend",
        "id": "cdktf.LocalBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.MantaBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.MantaBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.MantaBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.MantaBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.MantaBackendProps",
                    "displayName": "MantaBackendProps",
                    "fqn": "cdktf.MantaBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { MantaBackend } from 'cdktf'\n\nnew MantaBackend(scope: Construct, props: MantaBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.MantaBackend.toString",
            "displayName": "toString",
            "id": "cdktf.MantaBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.MantaBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.MantaBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.MantaBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.MantaBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.MantaBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.MantaBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.MantaBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.MantaBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.MantaBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.MantaBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.MantaBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.MantaBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.MantaBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.MantaBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.MantaBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.MantaBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.MantaBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.MantaBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.MantaBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.MantaBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.MantaBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { MantaBackend } from 'cdktf'\n\nMantaBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.MantaBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.MantaBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.MantaBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { MantaBackend } from 'cdktf'\n\nMantaBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.MantaBackend.property.node",
            "displayName": "node",
            "id": "cdktf.MantaBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.MantaBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.MantaBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.MantaBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.MantaBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.MantaBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.MantaBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.MantaBackend",
        "displayName": "MantaBackend",
        "id": "cdktf.MantaBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.OssBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.OssBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.OssBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.OssBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.OssBackendProps",
                    "displayName": "OssBackendProps",
                    "fqn": "cdktf.OssBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { OssBackend } from 'cdktf'\n\nnew OssBackend(scope: Construct, props: OssBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.OssBackend.toString",
            "displayName": "toString",
            "id": "cdktf.OssBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.OssBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.OssBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.OssBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.OssBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.OssBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.OssBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.OssBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.OssBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.OssBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.OssBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.OssBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.OssBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.OssBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.OssBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.OssBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.OssBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.OssBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.OssBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.OssBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.OssBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.OssBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { OssBackend } from 'cdktf'\n\nOssBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.OssBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.OssBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.OssBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { OssBackend } from 'cdktf'\n\nOssBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.OssBackend.property.node",
            "displayName": "node",
            "id": "cdktf.OssBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.OssBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.OssBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.OssBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.OssBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.OssBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.OssBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.OssBackend",
        "displayName": "OssBackend",
        "id": "cdktf.OssBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.PgBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.PgBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.PgBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.PgBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.PgBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.PgBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.PgBackendProps",
                    "displayName": "PgBackendProps",
                    "fqn": "cdktf.PgBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { PgBackend } from 'cdktf'\n\nnew PgBackend(scope: Construct, props: PgBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.PgBackend.toString",
            "displayName": "toString",
            "id": "cdktf.PgBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.PgBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.PgBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.PgBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.PgBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.PgBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.PgBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.PgBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.PgBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.PgBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.PgBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.PgBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.PgBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.PgBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.PgBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.PgBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.PgBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.PgBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.PgBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.PgBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.PgBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.PgBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { PgBackend } from 'cdktf'\n\nPgBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.PgBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.PgBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.PgBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { PgBackend } from 'cdktf'\n\nPgBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.PgBackend.property.node",
            "displayName": "node",
            "id": "cdktf.PgBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.PgBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.PgBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.PgBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.PgBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.PgBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.PgBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.PgBackend",
        "displayName": "PgBackend",
        "id": "cdktf.PgBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.RemoteBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.RemoteBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.RemoteBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.RemoteBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.RemoteBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.RemoteBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.RemoteBackendProps",
                    "displayName": "RemoteBackendProps",
                    "fqn": "cdktf.RemoteBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { RemoteBackend } from 'cdktf'\n\nnew RemoteBackend(scope: Construct, props: RemoteBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.RemoteBackend.toString",
            "displayName": "toString",
            "id": "cdktf.RemoteBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.RemoteBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.RemoteBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.RemoteBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.RemoteBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.RemoteBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.RemoteBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.RemoteBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.RemoteBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.RemoteBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.RemoteBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.RemoteBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.RemoteBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.RemoteBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.RemoteBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.RemoteBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.RemoteBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.RemoteBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.RemoteBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.RemoteBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { RemoteBackend } from 'cdktf'\n\nRemoteBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.RemoteBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.RemoteBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.RemoteBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { RemoteBackend } from 'cdktf'\n\nRemoteBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.RemoteBackend.property.node",
            "displayName": "node",
            "id": "cdktf.RemoteBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.RemoteBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.RemoteBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.RemoteBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.RemoteBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.RemoteBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.RemoteBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.RemoteBackend",
        "displayName": "RemoteBackend",
        "id": "cdktf.RemoteBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.Resource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Resource.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.Resource.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.Resource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.Resource.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.Resource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { Resource } from 'cdktf'\n\nnew Resource(scope: Construct, id: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IResource",
            "displayName": "IResource",
            "id": "cdktf.IResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.Resource.toString",
            "displayName": "toString",
            "id": "cdktf.Resource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.Resource.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.Resource.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.Resource.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.Resource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "import { Resource } from 'cdktf'\n\nResource.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.Resource.property.node",
            "displayName": "node",
            "id": "cdktf.Resource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.Resource.property.stack",
            "displayName": "stack",
            "id": "cdktf.Resource.property.stack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The stack in which this resource is defined.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "public readonly stack: TerraformStack;"
          }
        ],
        "fqn": "cdktf.Resource",
        "displayName": "Resource",
        "id": "cdktf.Resource",
        "docs": {
          "summary": "A construct which represents a resource.",
          "deprecated": true,
          "deprecationReason": "- Please use Construct from the constructs package instead."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.S3Backend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.S3Backend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.S3Backend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.S3Backend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.S3BackendProps",
                    "displayName": "S3BackendProps",
                    "fqn": "cdktf.S3BackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { S3Backend } from 'cdktf'\n\nnew S3Backend(scope: Construct, props: S3BackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.S3Backend.toString",
            "displayName": "toString",
            "id": "cdktf.S3Backend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.S3Backend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.S3Backend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.S3Backend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.S3Backend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.S3Backend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.S3Backend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.S3Backend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.S3Backend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.S3Backend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.S3Backend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.S3Backend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.S3Backend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.S3Backend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.S3Backend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.S3Backend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.S3Backend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.S3Backend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.S3Backend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.S3Backend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.S3Backend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.S3Backend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { S3Backend } from 'cdktf'\n\nS3Backend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.S3Backend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.S3Backend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.S3Backend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { S3Backend } from 'cdktf'\n\nS3Backend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.S3Backend.property.node",
            "displayName": "node",
            "id": "cdktf.S3Backend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.S3Backend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.S3Backend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.S3Backend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.S3Backend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.S3Backend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.S3Backend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.S3Backend",
        "displayName": "S3Backend",
        "id": "cdktf.S3Backend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.SwiftBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.SwiftBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.SwiftBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.props",
              "displayName": "props",
              "id": "cdktf.SwiftBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.SwiftBackendProps",
                    "displayName": "SwiftBackendProps",
                    "fqn": "cdktf.SwiftBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { SwiftBackend } from 'cdktf'\n\nnew SwiftBackend(scope: Construct, props: SwiftBackendProps)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.SwiftBackend.toString",
            "displayName": "toString",
            "id": "cdktf.SwiftBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.SwiftBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.SwiftBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.SwiftBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.SwiftBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.SwiftBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.SwiftBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.SwiftBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.SwiftBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.SwiftBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.SwiftBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.SwiftBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.SwiftBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.SwiftBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.SwiftBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.SwiftBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.SwiftBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter._fromStack",
                "displayName": "_fromStack",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, _fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.SwiftBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.SwiftBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.SwiftBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { SwiftBackend } from 'cdktf'\n\nSwiftBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.SwiftBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.SwiftBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.SwiftBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { SwiftBackend } from 'cdktf'\n\nSwiftBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.SwiftBackend.property.node",
            "displayName": "node",
            "id": "cdktf.SwiftBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.SwiftBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.SwiftBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.SwiftBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.SwiftBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.SwiftBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.SwiftBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.SwiftBackend",
        "displayName": "SwiftBackend",
        "id": "cdktf.SwiftBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformAsset.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformAsset.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformAsset.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformAsset.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformAsset.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformAsset.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformAsset.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.TerraformAsset.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformAssetConfig",
                    "displayName": "TerraformAssetConfig",
                    "fqn": "cdktf.TerraformAssetConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformAsset } from 'cdktf'\n\nnew TerraformAsset(scope: Construct, id: string, config: TerraformAssetConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformAsset.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformAsset.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformAsset.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformAsset.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformAsset.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformAsset.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformAsset } from 'cdktf'\n\nTerraformAsset.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformAsset.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformAsset.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformAsset.property.fileName",
            "displayName": "fileName",
            "id": "cdktf.TerraformAsset.property.fileName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Name of the asset."
            },
            "usage": "public readonly fileName: string;"
          },
          {
            "fqn": "cdktf.TerraformAsset.property.path",
            "displayName": "path",
            "id": "cdktf.TerraformAsset.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The path relative to the root of the terraform directory in posix format Use this property to reference the asset."
            },
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.TerraformAsset.property.assetHash",
            "displayName": "assetHash",
            "id": "cdktf.TerraformAsset.property.assetHash",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly assetHash: string;"
          },
          {
            "fqn": "cdktf.TerraformAsset.property.type",
            "displayName": "type",
            "id": "cdktf.TerraformAsset.property.type",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AssetType",
                  "displayName": "AssetType",
                  "fqn": "cdktf.AssetType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly type: AssetType;"
          }
        ],
        "fqn": "cdktf.TerraformAsset",
        "displayName": "TerraformAsset",
        "id": "cdktf.TerraformAsset",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformBackend.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformBackend.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformBackend.Initializer.parameter.name",
              "displayName": "name",
              "id": "cdktf.TerraformBackend.Initializer.parameter.name",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformBackend } from 'cdktf'\n\nnew TerraformBackend(scope: Construct, id: string, name: string)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformBackend.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformBackend.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformBackend.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformBackend.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformBackend.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformBackend.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformBackend.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.TerraformBackend.getRemoteStateDataSource",
            "displayName": "getRemoteStateDataSource",
            "id": "cdktf.TerraformBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.name",
                "displayName": "name",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.fromStack",
                "displayName": "fromStack",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "public getRemoteStateDataSource(scope: Construct, name: string, fromStack: string): TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformBackend.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformBackend } from 'cdktf'\n\nTerraformBackend.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.TerraformBackend.isBackend",
            "displayName": "isBackend",
            "id": "cdktf.TerraformBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.isBackend.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { TerraformBackend } from 'cdktf'\n\nTerraformBackend.isBackend(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformBackend.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformBackend.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformBackend.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.TerraformBackend",
        "displayName": "TerraformBackend",
        "id": "cdktf.TerraformBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformDataSource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformDataSource.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformResourceConfig",
                    "displayName": "TerraformResourceConfig",
                    "fqn": "cdktf.TerraformResourceConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformDataSource } from 'cdktf'\n\nnew TerraformDataSource(scope: Construct, id: string, config: TerraformResourceConfig)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformDataSource.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformDataSource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformDataSource.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformDataSource.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformDataSource.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformDataSource.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformDataSource.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformDataSource.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformDataSource.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformDataSource.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformDataSource.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformDataSource.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformDataSource.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformDataSource.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformDataSource.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformDataSource.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getAnyMapAttribute",
            "displayName": "getAnyMapAttribute",
            "id": "cdktf.TerraformDataSource.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getAnyMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getAnyMapAttribute(terraformAttribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getBooleanAttribute",
            "displayName": "getBooleanAttribute",
            "id": "cdktf.TerraformDataSource.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getBooleanAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBooleanAttribute(terraformAttribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getBooleanMapAttribute",
            "displayName": "getBooleanMapAttribute",
            "id": "cdktf.TerraformDataSource.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getBooleanMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBooleanMapAttribute(terraformAttribute: string): {[ key: string ]: boolean}"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getListAttribute",
            "displayName": "getListAttribute",
            "id": "cdktf.TerraformDataSource.getListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getListAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getListAttribute(terraformAttribute: string): string[]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getNumberAttribute",
            "displayName": "getNumberAttribute",
            "id": "cdktf.TerraformDataSource.getNumberAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getNumberAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberAttribute(terraformAttribute: string): number"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getNumberListAttribute",
            "displayName": "getNumberListAttribute",
            "id": "cdktf.TerraformDataSource.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getNumberListAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberListAttribute(terraformAttribute: string): number[]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getNumberMapAttribute",
            "displayName": "getNumberMapAttribute",
            "id": "cdktf.TerraformDataSource.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getNumberMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberMapAttribute(terraformAttribute: string): {[ key: string ]: number}"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getStringAttribute",
            "displayName": "getStringAttribute",
            "id": "cdktf.TerraformDataSource.getStringAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getStringAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getStringAttribute(terraformAttribute: string): string"
          },
          {
            "fqn": "cdktf.TerraformDataSource.getStringMapAttribute",
            "displayName": "getStringMapAttribute",
            "id": "cdktf.TerraformDataSource.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.getStringMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getStringMapAttribute(terraformAttribute: string): {[ key: string ]: string}"
          },
          {
            "fqn": "cdktf.TerraformDataSource.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.TerraformDataSource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.interpolationForAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformDataSource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(terraformAttribute: string): IResolvable"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformDataSource.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformDataSource.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformDataSource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformDataSource } from 'cdktf'\n\nTerraformDataSource.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformDataSource.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformDataSource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformDataSource.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformDataSource.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformDataSource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.terraformMetaArguments",
            "displayName": "terraformMetaArguments",
            "id": "cdktf.TerraformDataSource.property.terraformMetaArguments",
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly terraformMetaArguments: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.terraformResourceType",
            "displayName": "terraformResourceType",
            "id": "cdktf.TerraformDataSource.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly terraformResourceType: string;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.terraformGeneratorMetadata",
            "displayName": "terraformGeneratorMetadata",
            "id": "cdktf.TerraformDataSource.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly terraformGeneratorMetadata: TerraformProviderGeneratorMetadata;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.count",
            "displayName": "count",
            "id": "cdktf.TerraformDataSource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {},
            "usage": "public readonly count: number;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformDataSource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: string[];"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformDataSource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.TerraformDataSource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly lifecycle: TerraformResourceLifecycle;"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformDataSource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provider: TerraformProvider;"
          }
        ],
        "fqn": "cdktf.TerraformDataSource",
        "displayName": "TerraformDataSource",
        "id": "cdktf.TerraformDataSource",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformElement.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformElement.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformElement.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformElement.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformElement.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformElement.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformElement.Initializer.parameter.elementType",
              "displayName": "elementType",
              "id": "cdktf.TerraformElement.Initializer.parameter.elementType",
              "optional": true,
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformElement } from 'cdktf'\n\nnew TerraformElement(scope: Construct, id: string, elementType?: string)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformElement.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformElement.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformElement.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformElement.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformElement.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformElement.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformElement.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformElement.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformElement.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformElement.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformElement.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformElement.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformElement.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformElement.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformElement.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformElement.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformElement.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformElement.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformElement.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformElement.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformElement.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformElement.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformElement } from 'cdktf'\n\nTerraformElement.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformElement.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformElement.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformElement.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformElement.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformElement.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformElement.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformElement.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformElement.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.TerraformElement",
        "displayName": "TerraformElement",
        "id": "cdktf.TerraformElement",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformHclModule.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformHclModule.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.options",
              "displayName": "options",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.options",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformHclModuleOptions",
                    "displayName": "TerraformHclModuleOptions",
                    "fqn": "cdktf.TerraformHclModuleOptions",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformHclModule } from 'cdktf'\n\nnew TerraformHclModule(scope: Construct, id: string, options: TerraformHclModuleOptions)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformHclModule.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformHclModule.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformHclModule.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformHclModule.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformHclModule.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformHclModule.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformHclModule.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformHclModule.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformHclModule.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformHclModule.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformHclModule.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformHclModule.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformHclModule.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformHclModule.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformHclModule.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformHclModule.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.TerraformHclModule.addProvider",
            "displayName": "addProvider",
            "id": "cdktf.TerraformHclModule.addProvider",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.addProvider.parameter.provider",
                "displayName": "provider",
                "id": "cdktf.TerraformHclModule.addProvider.parameter.provider",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addProvider(provider: TerraformProvider | TerraformModuleProvider): void"
          },
          {
            "fqn": "cdktf.TerraformHclModule.getString",
            "displayName": "getString",
            "id": "cdktf.TerraformHclModule.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          },
          {
            "fqn": "cdktf.TerraformHclModule.interpolationForOutput",
            "displayName": "interpolationForOutput",
            "id": "cdktf.TerraformHclModule.interpolationForOutput",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.interpolationForOutput.parameter.moduleOutput",
                "displayName": "moduleOutput",
                "id": "cdktf.TerraformHclModule.interpolationForOutput.parameter.moduleOutput",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForOutput(moduleOutput: string): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformHclModule.get",
            "displayName": "get",
            "id": "cdktf.TerraformHclModule.get",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): any"
          },
          {
            "fqn": "cdktf.TerraformHclModule.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.TerraformHclModule.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformHclModule.getList",
            "displayName": "getList",
            "id": "cdktf.TerraformHclModule.getList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.TerraformHclModule.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.TerraformHclModule.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.TerraformHclModule.set",
            "displayName": "set",
            "id": "cdktf.TerraformHclModule.set",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.set.parameter.variable",
                "displayName": "variable",
                "id": "cdktf.TerraformHclModule.set.parameter.variable",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformHclModule.set.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformHclModule.set.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public set(variable: string, value: any): void"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformHclModule.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformHclModule.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformHclModule.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformHclModule } from 'cdktf'\n\nTerraformHclModule.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformHclModule.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformHclModule.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformHclModule.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformHclModule.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformHclModule.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.source",
            "displayName": "source",
            "id": "cdktf.TerraformHclModule.property.source",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly source: string;"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformHclModule.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly providers: TerraformProvider | TerraformModuleProvider[];"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.skipAssetCreationFromLocalModules",
            "displayName": "skipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformHclModule.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly skipAssetCreationFromLocalModules: boolean;"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformHclModule.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly version: string;"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformHclModule.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: string[];"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformHclModule.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.variables",
            "displayName": "variables",
            "id": "cdktf.TerraformHclModule.property.variables",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly variables: {[ key: string ]: any};"
          }
        ],
        "fqn": "cdktf.TerraformHclModule",
        "displayName": "TerraformHclModule",
        "id": "cdktf.TerraformHclModule",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformLocal.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformLocal.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformLocal.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformLocal.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformLocal.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformLocal.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformLocal.Initializer.parameter.expression",
              "displayName": "expression",
              "id": "cdktf.TerraformLocal.Initializer.parameter.expression",
              "type": {
                "formattingPattern": "any"
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformLocal } from 'cdktf'\n\nnew TerraformLocal(scope: Construct, id: string, expression: any)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformLocal.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformLocal.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformLocal.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformLocal.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformLocal.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformLocal.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformLocal.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformLocal.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformLocal.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformLocal.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformLocal.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformLocal.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformLocal.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformLocal.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformLocal.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformLocal.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformLocal.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformLocal.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformLocal.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformLocal.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformLocal.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformLocal.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformLocal } from 'cdktf'\n\nTerraformLocal.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformLocal.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformLocal.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformLocal.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformLocal.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformLocal.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.asBoolean",
            "displayName": "asBoolean",
            "id": "cdktf.TerraformLocal.property.asBoolean",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly asBoolean: IResolvable;"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.asList",
            "displayName": "asList",
            "id": "cdktf.TerraformLocal.property.asList",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly asList: string[];"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.asNumber",
            "displayName": "asNumber",
            "id": "cdktf.TerraformLocal.property.asNumber",
            "type": {
              "formattingPattern": "number"
            },
            "docs": {},
            "usage": "public readonly asNumber: number;"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.asString",
            "displayName": "asString",
            "id": "cdktf.TerraformLocal.property.asString",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly asString: string;"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.expression",
            "displayName": "expression",
            "id": "cdktf.TerraformLocal.property.expression",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {},
            "usage": "public readonly expression: any;"
          }
        ],
        "fqn": "cdktf.TerraformLocal",
        "displayName": "TerraformLocal",
        "id": "cdktf.TerraformLocal",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformModule.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformModule.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformModule.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformModule.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.options",
              "displayName": "options",
              "id": "cdktf.TerraformModule.Initializer.parameter.options",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformModuleOptions",
                    "displayName": "TerraformModuleOptions",
                    "fqn": "cdktf.TerraformModuleOptions",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformModule } from 'cdktf'\n\nnew TerraformModule(scope: Construct, id: string, options: TerraformModuleOptions)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformModule.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformModule.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformModule.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformModule.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformModule.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformModule.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformModule.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformModule.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformModule.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformModule.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformModule.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformModule.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformModule.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformModule.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformModule.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformModule.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.TerraformModule.addProvider",
            "displayName": "addProvider",
            "id": "cdktf.TerraformModule.addProvider",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.addProvider.parameter.provider",
                "displayName": "provider",
                "id": "cdktf.TerraformModule.addProvider.parameter.provider",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addProvider(provider: TerraformProvider | TerraformModuleProvider): void"
          },
          {
            "fqn": "cdktf.TerraformModule.getString",
            "displayName": "getString",
            "id": "cdktf.TerraformModule.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformModule.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          },
          {
            "fqn": "cdktf.TerraformModule.interpolationForOutput",
            "displayName": "interpolationForOutput",
            "id": "cdktf.TerraformModule.interpolationForOutput",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.interpolationForOutput.parameter.moduleOutput",
                "displayName": "moduleOutput",
                "id": "cdktf.TerraformModule.interpolationForOutput.parameter.moduleOutput",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForOutput(moduleOutput: string): IResolvable"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformModule.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformModule.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformModule.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformModule } from 'cdktf'\n\nTerraformModule.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformModule.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformModule.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformModule.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformModule.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformModule.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformModule.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformModule.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformModule.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.TerraformModule.property.source",
            "displayName": "source",
            "id": "cdktf.TerraformModule.property.source",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly source: string;"
          },
          {
            "fqn": "cdktf.TerraformModule.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformModule.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly providers: TerraformProvider | TerraformModuleProvider[];"
          },
          {
            "fqn": "cdktf.TerraformModule.property.skipAssetCreationFromLocalModules",
            "displayName": "skipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformModule.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly skipAssetCreationFromLocalModules: boolean;"
          },
          {
            "fqn": "cdktf.TerraformModule.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformModule.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly version: string;"
          },
          {
            "fqn": "cdktf.TerraformModule.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformModule.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: string[];"
          },
          {
            "fqn": "cdktf.TerraformModule.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformModule.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          }
        ],
        "fqn": "cdktf.TerraformModule",
        "displayName": "TerraformModule",
        "id": "cdktf.TerraformModule",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformOutput.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformOutput.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformOutput.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformOutput.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.TerraformOutput.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformOutputConfig",
                    "displayName": "TerraformOutputConfig",
                    "fqn": "cdktf.TerraformOutputConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformOutput } from 'cdktf'\n\nnew TerraformOutput(scope: Construct, id: string, config: TerraformOutputConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformOutput.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformOutput.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformOutput.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformOutput.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformOutput.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformOutput.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformOutput.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformOutput.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformOutput.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformOutput.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformOutput.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformOutput.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformOutput.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformOutput.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformOutput.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformOutput.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformOutput.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformOutput.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformOutput.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformOutput.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformOutput.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformOutput.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformOutput } from 'cdktf'\n\nTerraformOutput.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.TerraformOutput.isTerrafromOutput",
            "displayName": "isTerrafromOutput",
            "id": "cdktf.TerraformOutput.isTerrafromOutput",
            "parameters": [
              {
                "fqn": "cdktf.TerraformOutput.isTerrafromOutput.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformOutput.isTerrafromOutput.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { TerraformOutput } from 'cdktf'\n\nTerraformOutput.isTerrafromOutput(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformOutput.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformOutput.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformOutput.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformOutput.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformOutput.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.staticId",
            "displayName": "staticId",
            "id": "cdktf.TerraformOutput.property.staticId",
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly staticId: boolean;"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.value",
            "displayName": "value",
            "id": "cdktf.TerraformOutput.property.value",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {},
            "usage": "public readonly value: any;"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformOutput.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: ITerraformDependable[];"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.description",
            "displayName": "description",
            "id": "cdktf.TerraformOutput.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly description: string;"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.TerraformOutput.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly sensitive: boolean;"
          }
        ],
        "fqn": "cdktf.TerraformOutput",
        "displayName": "TerraformOutput",
        "id": "cdktf.TerraformOutput",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformProvider.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformProvider.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformProvider.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformProvider.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformProvider.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformProvider.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformProvider.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.TerraformProvider.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformProviderConfig",
                    "displayName": "TerraformProviderConfig",
                    "fqn": "cdktf.TerraformProviderConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformProvider } from 'cdktf'\n\nnew TerraformProvider(scope: Construct, id: string, config: TerraformProviderConfig)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformProvider.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformProvider.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformProvider.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformProvider.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformProvider.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformProvider.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformProvider.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformProvider.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformProvider.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformProvider.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformProvider.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformProvider.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformProvider.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformProvider.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformProvider.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformProvider.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformProvider.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformProvider.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformProvider.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformProvider.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformProvider.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformProvider.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformProvider } from 'cdktf'\n\nTerraformProvider.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformProvider.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformProvider.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformProvider.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformProvider.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformProvider.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.metaAttributes",
            "displayName": "metaAttributes",
            "id": "cdktf.TerraformProvider.property.metaAttributes",
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly metaAttributes: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.terraformResourceType",
            "displayName": "terraformResourceType",
            "id": "cdktf.TerraformProvider.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly terraformResourceType: string;"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.terraformGeneratorMetadata",
            "displayName": "terraformGeneratorMetadata",
            "id": "cdktf.TerraformProvider.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly terraformGeneratorMetadata: TerraformProviderGeneratorMetadata;"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.terraformProviderSource",
            "displayName": "terraformProviderSource",
            "id": "cdktf.TerraformProvider.property.terraformProviderSource",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly terraformProviderSource: string;"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.alias",
            "displayName": "alias",
            "id": "cdktf.TerraformProvider.property.alias",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly alias: string;"
          }
        ],
        "fqn": "cdktf.TerraformProvider",
        "displayName": "TerraformProvider",
        "id": "cdktf.TerraformProvider",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformRemoteState.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformRemoteState.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.backend",
              "displayName": "backend",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.backend",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateConfig",
                    "displayName": "DataTerraformRemoteStateConfig",
                    "fqn": "cdktf.DataTerraformRemoteStateConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformRemoteState } from 'cdktf'\n\nnew TerraformRemoteState(scope: Construct, id: string, backend: string, config: DataTerraformRemoteStateConfig)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformRemoteState.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformRemoteState.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformRemoteState.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformRemoteState.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformRemoteState.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformRemoteState.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformRemoteState.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformRemoteState.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformRemoteState.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformRemoteState.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformRemoteState.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.get",
            "displayName": "get",
            "id": "cdktf.TerraformRemoteState.get",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.TerraformRemoteState.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.getBoolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBoolean(output: string): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.getList",
            "displayName": "getList",
            "id": "cdktf.TerraformRemoteState.getList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.getList.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getList(output: string): string[]"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.TerraformRemoteState.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.getNumber.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumber(output: string): number"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.getString",
            "displayName": "getString",
            "id": "cdktf.TerraformRemoteState.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.getString.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getString(output: string): string"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformRemoteState.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformRemoteState.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformRemoteState.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformRemoteState } from 'cdktf'\n\nTerraformRemoteState.isConstruct(x: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.TerraformRemoteState.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.TerraformRemoteState.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.TerraformRemoteState.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformRemoteState.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformRemoteState.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformRemoteState.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformRemoteState.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          }
        ],
        "fqn": "cdktf.TerraformRemoteState",
        "displayName": "TerraformRemoteState",
        "id": "cdktf.TerraformRemoteState",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformResource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformResource.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformResource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformResource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.TerraformResource.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformResourceConfig",
                    "displayName": "TerraformResourceConfig",
                    "fqn": "cdktf.TerraformResourceConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformResource } from 'cdktf'\n\nnew TerraformResource(scope: Construct, id: string, config: TerraformResourceConfig)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformResource.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformResource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformResource.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformResource.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformResource.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformResource.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformResource.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformResource.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformResource.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformResource.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformResource.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformResource.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformResource.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformResource.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformResource.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformResource.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.TerraformResource.getAnyMapAttribute",
            "displayName": "getAnyMapAttribute",
            "id": "cdktf.TerraformResource.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getAnyMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getAnyMapAttribute(terraformAttribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.TerraformResource.getBooleanAttribute",
            "displayName": "getBooleanAttribute",
            "id": "cdktf.TerraformResource.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getBooleanAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBooleanAttribute(terraformAttribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformResource.getBooleanMapAttribute",
            "displayName": "getBooleanMapAttribute",
            "id": "cdktf.TerraformResource.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getBooleanMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBooleanMapAttribute(terraformAttribute: string): {[ key: string ]: boolean}"
          },
          {
            "fqn": "cdktf.TerraformResource.getListAttribute",
            "displayName": "getListAttribute",
            "id": "cdktf.TerraformResource.getListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getListAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getListAttribute(terraformAttribute: string): string[]"
          },
          {
            "fqn": "cdktf.TerraformResource.getNumberAttribute",
            "displayName": "getNumberAttribute",
            "id": "cdktf.TerraformResource.getNumberAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getNumberAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberAttribute(terraformAttribute: string): number"
          },
          {
            "fqn": "cdktf.TerraformResource.getNumberListAttribute",
            "displayName": "getNumberListAttribute",
            "id": "cdktf.TerraformResource.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getNumberListAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberListAttribute(terraformAttribute: string): number[]"
          },
          {
            "fqn": "cdktf.TerraformResource.getNumberMapAttribute",
            "displayName": "getNumberMapAttribute",
            "id": "cdktf.TerraformResource.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getNumberMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberMapAttribute(terraformAttribute: string): {[ key: string ]: number}"
          },
          {
            "fqn": "cdktf.TerraformResource.getStringAttribute",
            "displayName": "getStringAttribute",
            "id": "cdktf.TerraformResource.getStringAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getStringAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getStringAttribute(terraformAttribute: string): string"
          },
          {
            "fqn": "cdktf.TerraformResource.getStringMapAttribute",
            "displayName": "getStringMapAttribute",
            "id": "cdktf.TerraformResource.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.getStringMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getStringMapAttribute(terraformAttribute: string): {[ key: string ]: string}"
          },
          {
            "fqn": "cdktf.TerraformResource.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.TerraformResource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.interpolationForAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.TerraformResource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(terraformAttribute: string): IResolvable"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformResource.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformResource.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformResource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformResource } from 'cdktf'\n\nTerraformResource.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformResource.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformResource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformResource.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformResource.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformResource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.terraformMetaArguments",
            "displayName": "terraformMetaArguments",
            "id": "cdktf.TerraformResource.property.terraformMetaArguments",
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly terraformMetaArguments: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.TerraformResource.property.terraformResourceType",
            "displayName": "terraformResourceType",
            "id": "cdktf.TerraformResource.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly terraformResourceType: string;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.terraformGeneratorMetadata",
            "displayName": "terraformGeneratorMetadata",
            "id": "cdktf.TerraformResource.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly terraformGeneratorMetadata: TerraformProviderGeneratorMetadata;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.connection",
            "displayName": "connection",
            "id": "cdktf.TerraformResource.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "% | %",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly connection: SSHProvisionerConnection | WinrmProvisionerConnection;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.count",
            "displayName": "count",
            "id": "cdktf.TerraformResource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {},
            "usage": "public readonly count: number;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformResource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: string[];"
          },
          {
            "fqn": "cdktf.TerraformResource.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformResource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.TerraformResource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly lifecycle: TerraformResourceLifecycle;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformResource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provider: TerraformProvider;"
          },
          {
            "fqn": "cdktf.TerraformResource.property.provisioners",
            "displayName": "provisioners",
            "id": "cdktf.TerraformResource.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provisioners: FileProvisioner | LocalExecProvisioner | RemoteExecProvisioner[];"
          }
        ],
        "fqn": "cdktf.TerraformResource",
        "displayName": "TerraformResource",
        "id": "cdktf.TerraformResource",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformStack.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformStack.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformStack.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformStack.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformStack.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformStack.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformStack } from 'cdktf'\n\nnew TerraformStack(scope: Construct, id: string)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformStack.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformStack.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformStack.addDependency",
            "displayName": "addDependency",
            "id": "cdktf.TerraformStack.addDependency",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.addDependency.parameter.dependency",
                "displayName": "dependency",
                "id": "cdktf.TerraformStack.addDependency.parameter.dependency",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addDependency(dependency: TerraformStack): void"
          },
          {
            "fqn": "cdktf.TerraformStack.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformStack.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformStack.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformStack.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformStack.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformStack.allProviders",
            "displayName": "allProviders",
            "id": "cdktf.TerraformStack.allProviders",
            "parameters": [],
            "docs": {},
            "usage": "public allProviders(): TerraformProvider[]"
          },
          {
            "fqn": "cdktf.TerraformStack.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformStack.dependsOn",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.dependsOn.parameter.stack",
                "displayName": "stack",
                "id": "cdktf.TerraformStack.dependsOn.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public dependsOn(stack: TerraformStack): boolean"
          },
          {
            "fqn": "cdktf.TerraformStack.ensureBackendExists",
            "displayName": "ensureBackendExists",
            "id": "cdktf.TerraformStack.ensureBackendExists",
            "parameters": [],
            "docs": {},
            "usage": "public ensureBackendExists(): TerraformBackend"
          },
          {
            "fqn": "cdktf.TerraformStack.getLogicalId",
            "displayName": "getLogicalId",
            "id": "cdktf.TerraformStack.getLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.getLogicalId.parameter.tfElement",
                "displayName": "tfElement",
                "id": "cdktf.TerraformStack.getLogicalId.parameter.tfElement",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformElement",
                          "displayName": "TerraformElement",
                          "fqn": "cdktf.TerraformElement",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "constructs.Node",
                          "displayName": "Node",
                          "fqn": "constructs.Node",
                          "packageName": "constructs",
                          "packageVersion": "10.1.45"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getLogicalId(tfElement: TerraformElement | Node): string"
          },
          {
            "fqn": "cdktf.TerraformStack.prepareStack",
            "displayName": "prepareStack",
            "id": "cdktf.TerraformStack.prepareStack",
            "parameters": [],
            "docs": {},
            "usage": "public prepareStack(): void"
          },
          {
            "fqn": "cdktf.TerraformStack.registerIncomingCrossStackReference",
            "displayName": "registerIncomingCrossStackReference",
            "id": "cdktf.TerraformStack.registerIncomingCrossStackReference",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.registerIncomingCrossStackReference.parameter.fromStack",
                "displayName": "fromStack",
                "id": "cdktf.TerraformStack.registerIncomingCrossStackReference.parameter.fromStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public registerIncomingCrossStackReference(fromStack: TerraformStack): TerraformRemoteState"
          },
          {
            "fqn": "cdktf.TerraformStack.registerOutgoingCrossStackReference",
            "displayName": "registerOutgoingCrossStackReference",
            "id": "cdktf.TerraformStack.registerOutgoingCrossStackReference",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.registerOutgoingCrossStackReference.parameter.identifier",
                "displayName": "identifier",
                "id": "cdktf.TerraformStack.registerOutgoingCrossStackReference.parameter.identifier",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public registerOutgoingCrossStackReference(identifier: string): TerraformOutput"
          },
          {
            "fqn": "cdktf.TerraformStack.runAllValidations",
            "displayName": "runAllValidations",
            "id": "cdktf.TerraformStack.runAllValidations",
            "parameters": [],
            "docs": {
              "summary": "Run all validations on the stack."
            },
            "usage": "public runAllValidations(): void"
          },
          {
            "fqn": "cdktf.TerraformStack.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformStack.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformStack.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformStack.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformStack.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformStack } from 'cdktf'\n\nTerraformStack.isConstruct(x: any)"
          },
          {
            "fqn": "cdktf.TerraformStack.isStack",
            "displayName": "isStack",
            "id": "cdktf.TerraformStack.isStack",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.isStack.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformStack.isStack.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { TerraformStack } from 'cdktf'\n\nTerraformStack.isStack(x: any)"
          },
          {
            "fqn": "cdktf.TerraformStack.of",
            "displayName": "of",
            "id": "cdktf.TerraformStack.of",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.of.parameter.construct",
                "displayName": "construct",
                "id": "cdktf.TerraformStack.of.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { TerraformStack } from 'cdktf'\n\nTerraformStack.of(construct: IConstruct)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformStack.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformStack.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformStack.property.dependencies",
            "displayName": "dependencies",
            "id": "cdktf.TerraformStack.property.dependencies",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependencies: TerraformStack[];"
          },
          {
            "fqn": "cdktf.TerraformStack.property.synthesizer",
            "displayName": "synthesizer",
            "id": "cdktf.TerraformStack.property.synthesizer",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IStackSynthesizer",
                  "displayName": "IStackSynthesizer",
                  "fqn": "cdktf.IStackSynthesizer",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly synthesizer: IStackSynthesizer;"
          }
        ],
        "fqn": "cdktf.TerraformStack",
        "displayName": "TerraformStack",
        "id": "cdktf.TerraformStack",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformVariable.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformVariable.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformVariable.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformVariable.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.config",
              "displayName": "config",
              "id": "cdktf.TerraformVariable.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformVariableConfig",
                    "displayName": "TerraformVariableConfig",
                    "fqn": "cdktf.TerraformVariableConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TerraformVariable } from 'cdktf'\n\nnew TerraformVariable(scope: Construct, id: string, config: TerraformVariableConfig)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformVariable.toString",
            "displayName": "toString",
            "id": "cdktf.TerraformVariable.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "public toString(): string"
          },
          {
            "fqn": "cdktf.TerraformVariable.addOverride",
            "displayName": "addOverride",
            "id": "cdktf.TerraformVariable.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformVariable.addOverride.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformVariable.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformVariable.addOverride.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformVariable.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addOverride(path: string, value: any): void"
          },
          {
            "fqn": "cdktf.TerraformVariable.overrideLogicalId",
            "displayName": "overrideLogicalId",
            "id": "cdktf.TerraformVariable.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformVariable.overrideLogicalId.parameter.newLogicalId",
                "displayName": "newLogicalId",
                "id": "cdktf.TerraformVariable.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "public overrideLogicalId(newLogicalId: string): void"
          },
          {
            "fqn": "cdktf.TerraformVariable.resetOverrideLogicalId",
            "displayName": "resetOverrideLogicalId",
            "id": "cdktf.TerraformVariable.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "public resetOverrideLogicalId(): void"
          },
          {
            "fqn": "cdktf.TerraformVariable.toMetadata",
            "displayName": "toMetadata",
            "id": "cdktf.TerraformVariable.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "public toMetadata(): any"
          },
          {
            "fqn": "cdktf.TerraformVariable.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TerraformVariable.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          },
          {
            "fqn": "cdktf.TerraformVariable.addValidation",
            "displayName": "addValidation",
            "id": "cdktf.TerraformVariable.addValidation",
            "parameters": [
              {
                "fqn": "cdktf.TerraformVariable.addValidation.parameter.validation",
                "displayName": "validation",
                "id": "cdktf.TerraformVariable.addValidation.parameter.validation",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformVariableValidationConfig",
                      "displayName": "TerraformVariableValidationConfig",
                      "fqn": "cdktf.TerraformVariableValidationConfig",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addValidation(validation: TerraformVariableValidationConfig): void"
          },
          {
            "fqn": "cdktf.TerraformVariable.synthesizeAttributes",
            "displayName": "synthesizeAttributes",
            "id": "cdktf.TerraformVariable.synthesizeAttributes",
            "parameters": [],
            "docs": {},
            "usage": "public synthesizeAttributes(): {[ key: string ]: any}"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformVariable.isConstruct",
            "displayName": "isConstruct",
            "id": "cdktf.TerraformVariable.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformVariable.isConstruct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformVariable.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import { TerraformVariable } from 'cdktf'\n\nTerraformVariable.isConstruct(x: any)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformVariable.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformVariable.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.cdktfStack",
            "displayName": "cdktfStack",
            "id": "cdktf.TerraformVariable.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly cdktfStack: TerraformStack;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformVariable.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.TerraformVariable.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.booleanValue",
            "displayName": "booleanValue",
            "id": "cdktf.TerraformVariable.property.booleanValue",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly booleanValue: IResolvable;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.listValue",
            "displayName": "listValue",
            "id": "cdktf.TerraformVariable.property.listValue",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly listValue: string[];"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.numberValue",
            "displayName": "numberValue",
            "id": "cdktf.TerraformVariable.property.numberValue",
            "type": {
              "formattingPattern": "number"
            },
            "docs": {},
            "usage": "public readonly numberValue: number;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.stringValue",
            "displayName": "stringValue",
            "id": "cdktf.TerraformVariable.property.stringValue",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly stringValue: string;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.value",
            "displayName": "value",
            "id": "cdktf.TerraformVariable.property.value",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {},
            "usage": "public readonly value: any;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.default",
            "displayName": "default",
            "id": "cdktf.TerraformVariable.property.default",
            "optional": true,
            "type": {
              "formattingPattern": "any"
            },
            "docs": {},
            "usage": "public readonly default: any;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.description",
            "displayName": "description",
            "id": "cdktf.TerraformVariable.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly description: string;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.nullable",
            "displayName": "nullable",
            "id": "cdktf.TerraformVariable.property.nullable",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly nullable: boolean;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.TerraformVariable.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly sensitive: boolean;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.type",
            "displayName": "type",
            "id": "cdktf.TerraformVariable.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly type: string;"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.validation",
            "displayName": "validation",
            "id": "cdktf.TerraformVariable.property.validation",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformVariableValidationConfig",
                      "displayName": "TerraformVariableValidationConfig",
                      "fqn": "cdktf.TerraformVariableValidationConfig",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly validation: TerraformVariableValidationConfig[];"
          }
        ],
        "fqn": "cdktf.TerraformVariable",
        "displayName": "TerraformVariable",
        "id": "cdktf.TerraformVariable",
        "docs": {}
      }
    ],
    "classes": [
      {
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.Annotations.addError",
            "displayName": "addError",
            "id": "cdktf.Annotations.addError",
            "parameters": [
              {
                "fqn": "cdktf.Annotations.addError.parameter.message",
                "displayName": "message",
                "id": "cdktf.Annotations.addError.parameter.message",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The error message."
                }
              }
            ],
            "docs": {
              "summary": "Adds an { \"error\": <message> } metadata entry to this construct.",
              "remarks": "The toolkit will fail synthesis when errors are reported."
            },
            "usage": "public addError(message: string): void"
          },
          {
            "fqn": "cdktf.Annotations.addInfo",
            "displayName": "addInfo",
            "id": "cdktf.Annotations.addInfo",
            "parameters": [
              {
                "fqn": "cdktf.Annotations.addInfo.parameter.message",
                "displayName": "message",
                "id": "cdktf.Annotations.addInfo.parameter.message",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The info message."
                }
              }
            ],
            "docs": {
              "summary": "Adds an info metadata entry to this construct.",
              "remarks": "The CLI will display the info message when apps are synthesized."
            },
            "usage": "public addInfo(message: string): void"
          },
          {
            "fqn": "cdktf.Annotations.addWarning",
            "displayName": "addWarning",
            "id": "cdktf.Annotations.addWarning",
            "parameters": [
              {
                "fqn": "cdktf.Annotations.addWarning.parameter.message",
                "displayName": "message",
                "id": "cdktf.Annotations.addWarning.parameter.message",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The warning message."
                }
              }
            ],
            "docs": {
              "summary": "Adds a warning metadata entry to this construct.",
              "remarks": "The CLI will display the warning when an app is synthesized.\nIn a future release the CLI might introduce a --strict flag which\nwill then fail the synthesis if it encounters a warning."
            },
            "usage": "public addWarning(message: string): void"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.Annotations.of",
            "displayName": "of",
            "id": "cdktf.Annotations.of",
            "parameters": [
              {
                "fqn": "cdktf.Annotations.of.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.Annotations.of.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {
                  "summary": "The scope."
                }
              }
            ],
            "docs": {
              "summary": "Returns the annotations API for a construct scope."
            },
            "usage": "import { Annotations } from 'cdktf'\n\nAnnotations.of(scope: IConstruct)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Annotations",
        "displayName": "Annotations",
        "id": "cdktf.Annotations",
        "docs": {
          "summary": "Includes API for attaching annotations such as warning messages to constructs."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.AnyMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AnyMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.AnyMap.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.AnyMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.AnyMap.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.AnyMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { AnyMap } from 'cdktf'\n\nnew AnyMap(terraformResource: IInterpolatingParent, terraformAttribute: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.AnyMap.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.AnyMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.AnyMap.lookup",
            "displayName": "lookup",
            "id": "cdktf.AnyMap.lookup",
            "parameters": [
              {
                "fqn": "cdktf.AnyMap.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.AnyMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public lookup(key: string): any"
          },
          {
            "fqn": "cdktf.AnyMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.AnyMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.AnyMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.AnyMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.AnyMap.toString",
            "displayName": "toString",
            "id": "cdktf.AnyMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.AnyMap.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.AnyMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.AnyMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.AnyMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.AnyMap",
        "displayName": "AnyMap",
        "id": "cdktf.AnyMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.AnyMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AnyMapList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.AnyMapList.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.AnyMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.AnyMapList.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.AnyMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.AnyMapList.Initializer.parameter.wrapsSet",
              "displayName": "wrapsSet",
              "id": "cdktf.AnyMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "boolean"
              },
              "docs": {}
            }
          ],
          "usage": "import { AnyMapList } from 'cdktf'\n\nnew AnyMapList(terraformResource: IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.AnyMapList.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.AnyMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.AnyMapList.get",
            "displayName": "get",
            "id": "cdktf.AnyMapList.get",
            "parameters": [
              {
                "fqn": "cdktf.AnyMapList.get.parameter.index",
                "displayName": "index",
                "id": "cdktf.AnyMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(index: number): AnyMap"
          },
          {
            "fqn": "cdktf.AnyMapList.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.AnyMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.AnyMapList.interpolationForAttribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.AnyMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(property: string): IResolvable"
          },
          {
            "fqn": "cdktf.AnyMapList.resolve",
            "displayName": "resolve",
            "id": "cdktf.AnyMapList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.AnyMapList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.AnyMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.AnyMapList.toString",
            "displayName": "toString",
            "id": "cdktf.AnyMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.AnyMapList.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.AnyMapList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.AnyMapList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.AnyMapList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.AnyMapList",
        "displayName": "AnyMapList",
        "id": "cdktf.AnyMapList",
        "docs": {}
      },
      {
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.Aspects.add",
            "displayName": "add",
            "id": "cdktf.Aspects.add",
            "parameters": [
              {
                "fqn": "cdktf.Aspects.add.parameter.aspect",
                "displayName": "aspect",
                "id": "cdktf.Aspects.add.parameter.aspect",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAspect",
                      "displayName": "IAspect",
                      "fqn": "cdktf.IAspect",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The aspect to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds an aspect to apply this scope before synthesis."
            },
            "usage": "public add(aspect: IAspect): void"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.Aspects.of",
            "displayName": "of",
            "id": "cdktf.Aspects.of",
            "parameters": [
              {
                "fqn": "cdktf.Aspects.of.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.Aspects.of.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {
                  "summary": "The scope for which these aspects will apply."
                }
              }
            ],
            "docs": {
              "summary": "Returns the `Aspects` object associated with a construct scope."
            },
            "usage": "import { Aspects } from 'cdktf'\n\nAspects.of(scope: IConstruct)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.Aspects.property.all",
            "displayName": "all",
            "id": "cdktf.Aspects.property.all",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAspect",
                      "displayName": "IAspect",
                      "fqn": "cdktf.IAspect",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "The list of aspects which were directly applied on this scope."
            },
            "usage": "public readonly all: IAspect[];"
          }
        ],
        "fqn": "cdktf.Aspects",
        "displayName": "Aspects",
        "id": "cdktf.Aspects",
        "docs": {
          "summary": "Aspects can be applied to CDK tree scopes and can operate on the tree before synthesis."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.testingMatchers.AssertionReturn.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.testingMatchers.AssertionReturn.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.message",
              "displayName": "message",
              "id": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.message",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.pass",
              "displayName": "pass",
              "id": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.pass",
              "type": {
                "formattingPattern": "boolean"
              },
              "docs": {}
            }
          ],
          "usage": "import { testingMatchers } from 'cdktf'\n\nnew testingMatchers.AssertionReturn(message: string, pass: boolean)"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.testingMatchers.AssertionReturn.property.message",
            "displayName": "message",
            "id": "cdktf.testingMatchers.AssertionReturn.property.message",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly message: string;"
          },
          {
            "fqn": "cdktf.testingMatchers.AssertionReturn.property.pass",
            "displayName": "pass",
            "id": "cdktf.testingMatchers.AssertionReturn.property.pass",
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly pass: boolean;"
          }
        ],
        "fqn": "cdktf.testingMatchers.AssertionReturn",
        "displayName": "AssertionReturn",
        "id": "cdktf.testingMatchers.AssertionReturn",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.BooleanMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.BooleanMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.BooleanMap.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.BooleanMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.BooleanMap.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.BooleanMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { BooleanMap } from 'cdktf'\n\nnew BooleanMap(terraformResource: IInterpolatingParent, terraformAttribute: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.BooleanMap.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.BooleanMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.BooleanMap.lookup",
            "displayName": "lookup",
            "id": "cdktf.BooleanMap.lookup",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMap.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.BooleanMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public lookup(key: string): IResolvable"
          },
          {
            "fqn": "cdktf.BooleanMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.BooleanMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.BooleanMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.BooleanMap.toString",
            "displayName": "toString",
            "id": "cdktf.BooleanMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.BooleanMap.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.BooleanMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.BooleanMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.BooleanMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.BooleanMap",
        "displayName": "BooleanMap",
        "id": "cdktf.BooleanMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.BooleanMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.BooleanMapList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.BooleanMapList.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.BooleanMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.BooleanMapList.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.BooleanMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.BooleanMapList.Initializer.parameter.wrapsSet",
              "displayName": "wrapsSet",
              "id": "cdktf.BooleanMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "boolean"
              },
              "docs": {}
            }
          ],
          "usage": "import { BooleanMapList } from 'cdktf'\n\nnew BooleanMapList(terraformResource: IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.BooleanMapList.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.BooleanMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.BooleanMapList.get",
            "displayName": "get",
            "id": "cdktf.BooleanMapList.get",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMapList.get.parameter.index",
                "displayName": "index",
                "id": "cdktf.BooleanMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(index: number): BooleanMap"
          },
          {
            "fqn": "cdktf.BooleanMapList.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.BooleanMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMapList.interpolationForAttribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.BooleanMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(property: string): IResolvable"
          },
          {
            "fqn": "cdktf.BooleanMapList.resolve",
            "displayName": "resolve",
            "id": "cdktf.BooleanMapList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMapList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.BooleanMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.BooleanMapList.toString",
            "displayName": "toString",
            "id": "cdktf.BooleanMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.BooleanMapList.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.BooleanMapList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.BooleanMapList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.BooleanMapList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.BooleanMapList",
        "displayName": "BooleanMapList",
        "id": "cdktf.BooleanMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.CloudWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CloudWorkspace.Initializer",
          "parameters": [],
          "usage": "import { CloudWorkspace } from 'cdktf'\n\nnew CloudWorkspace()"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.CloudWorkspace.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.CloudWorkspace.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.CloudWorkspace",
        "displayName": "CloudWorkspace",
        "id": "cdktf.CloudWorkspace",
        "docs": {
          "summary": "A cloud workspace can either be a single named workspace, or a list of tagged workspaces."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.ComplexComputedList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexComputedList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ComplexComputedList.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexComputedList.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexComputedList.Initializer.parameter.complexComputedListIndex",
              "displayName": "complexComputedListIndex",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.complexComputedListIndex",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexComputedList.Initializer.parameter.wrapsSet",
              "displayName": "wrapsSet",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.wrapsSet",
              "optional": true,
              "type": {
                "formattingPattern": "boolean"
              },
              "docs": {}
            }
          ],
          "usage": "import { ComplexComputedList } from 'cdktf'\n\nnew ComplexComputedList(terraformResource: IInterpolatingParent, terraformAttribute: string, complexComputedListIndex: string, wrapsSet?: boolean)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.ComplexComputedList.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.ComplexComputedList.computeFqn",
            "parameters": [],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getAnyMapAttribute",
            "displayName": "getAnyMapAttribute",
            "id": "cdktf.ComplexComputedList.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getAnyMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getAnyMapAttribute(terraformAttribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getBooleanAttribute",
            "displayName": "getBooleanAttribute",
            "id": "cdktf.ComplexComputedList.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getBooleanAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getBooleanAttribute(terraformAttribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getBooleanMapAttribute",
            "displayName": "getBooleanMapAttribute",
            "id": "cdktf.ComplexComputedList.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getBooleanMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getBooleanMapAttribute(terraformAttribute: string): {[ key: string ]: boolean}"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getListAttribute",
            "displayName": "getListAttribute",
            "id": "cdktf.ComplexComputedList.getListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getListAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getListAttribute(terraformAttribute: string): string[]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getNumberAttribute",
            "displayName": "getNumberAttribute",
            "id": "cdktf.ComplexComputedList.getNumberAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getNumberAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getNumberAttribute(terraformAttribute: string): number"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getNumberListAttribute",
            "displayName": "getNumberListAttribute",
            "id": "cdktf.ComplexComputedList.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getNumberListAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getNumberListAttribute(terraformAttribute: string): number[]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getNumberMapAttribute",
            "displayName": "getNumberMapAttribute",
            "id": "cdktf.ComplexComputedList.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getNumberMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getNumberMapAttribute(terraformAttribute: string): {[ key: string ]: number}"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getStringAttribute",
            "displayName": "getStringAttribute",
            "id": "cdktf.ComplexComputedList.getStringAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getStringAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getStringAttribute(terraformAttribute: string): string"
          },
          {
            "fqn": "cdktf.ComplexComputedList.getStringMapAttribute",
            "displayName": "getStringMapAttribute",
            "id": "cdktf.ComplexComputedList.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.getStringMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexComputedList.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public getStringMapAttribute(terraformAttribute: string): {[ key: string ]: string}"
          },
          {
            "fqn": "cdktf.ComplexComputedList.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.ComplexComputedList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.interpolationForAttribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.ComplexComputedList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public interpolationForAttribute(property: string): IResolvable"
          },
          {
            "fqn": "cdktf.ComplexComputedList.resolve",
            "displayName": "resolve",
            "id": "cdktf.ComplexComputedList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.ComplexComputedList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.ComplexComputedList.toString",
            "displayName": "toString",
            "id": "cdktf.ComplexComputedList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ComplexComputedList.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.ComplexComputedList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.ComplexComputedList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ComplexComputedList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.ComplexComputedList",
        "displayName": "ComplexComputedList",
        "id": "cdktf.ComplexComputedList",
        "docs": {
          "deprecated": true,
          "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.ComplexList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ComplexList.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.ComplexList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexList.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.ComplexList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexList.Initializer.parameter.wrapsSet",
              "displayName": "wrapsSet",
              "id": "cdktf.ComplexList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "boolean"
              },
              "docs": {}
            }
          ],
          "usage": "import { ComplexList } from 'cdktf'\n\nnew ComplexList(terraformResource: IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.ComplexList.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.ComplexList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.ComplexList.resolve",
            "displayName": "resolve",
            "id": "cdktf.ComplexList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.ComplexList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.ComplexList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.ComplexList.toString",
            "displayName": "toString",
            "id": "cdktf.ComplexList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ComplexList.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.ComplexList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.ComplexList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ComplexList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.ComplexList",
        "displayName": "ComplexList",
        "id": "cdktf.ComplexList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.ComplexMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ComplexMap.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.ComplexMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexMap.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.ComplexMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { ComplexMap } from 'cdktf'\n\nnew ComplexMap(terraformResource: IInterpolatingParent, terraformAttribute: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.ComplexMap.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.ComplexMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.ComplexMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.ComplexMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.ComplexMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.ComplexMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.ComplexMap.toString",
            "displayName": "toString",
            "id": "cdktf.ComplexMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ComplexMap.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.ComplexMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.ComplexMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ComplexMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.ComplexMap",
        "displayName": "ComplexMap",
        "id": "cdktf.ComplexMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.ComplexObject.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexObject.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ComplexObject.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.ComplexObject.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexObject.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.ComplexObject.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexObject.Initializer.parameter.complexObjectIsFromSet",
              "displayName": "complexObjectIsFromSet",
              "id": "cdktf.ComplexObject.Initializer.parameter.complexObjectIsFromSet",
              "type": {
                "formattingPattern": "boolean"
              },
              "docs": {
                "summary": "set to true if this item is from inside a set and needs tolist() for accessing it set to \"0\" for single list items."
              }
            },
            {
              "fqn": "cdktf.ComplexObject.Initializer.parameter.complexObjectIndex",
              "displayName": "complexObjectIndex",
              "id": "cdktf.ComplexObject.Initializer.parameter.complexObjectIndex",
              "optional": true,
              "type": {
                "formattingPattern": "% | %",
                "types": [
                  {
                    "formattingPattern": "string"
                  },
                  {
                    "formattingPattern": "number"
                  }
                ]
              },
              "docs": {
                "summary": "the index of the complex object in a list."
              }
            }
          ],
          "usage": "import { ComplexObject } from 'cdktf'\n\nnew ComplexObject(terraformResource: IInterpolatingParent, terraformAttribute: string, complexObjectIsFromSet: boolean, complexObjectIndex?: string | number)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.ComplexObject.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.ComplexObject.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.ComplexObject.getAnyMapAttribute",
            "displayName": "getAnyMapAttribute",
            "id": "cdktf.ComplexObject.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getAnyMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getAnyMapAttribute(terraformAttribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.ComplexObject.getBooleanAttribute",
            "displayName": "getBooleanAttribute",
            "id": "cdktf.ComplexObject.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getBooleanAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBooleanAttribute(terraformAttribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.ComplexObject.getBooleanMapAttribute",
            "displayName": "getBooleanMapAttribute",
            "id": "cdktf.ComplexObject.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getBooleanMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getBooleanMapAttribute(terraformAttribute: string): {[ key: string ]: boolean}"
          },
          {
            "fqn": "cdktf.ComplexObject.getListAttribute",
            "displayName": "getListAttribute",
            "id": "cdktf.ComplexObject.getListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getListAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getListAttribute(terraformAttribute: string): string[]"
          },
          {
            "fqn": "cdktf.ComplexObject.getNumberAttribute",
            "displayName": "getNumberAttribute",
            "id": "cdktf.ComplexObject.getNumberAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getNumberAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberAttribute(terraformAttribute: string): number"
          },
          {
            "fqn": "cdktf.ComplexObject.getNumberListAttribute",
            "displayName": "getNumberListAttribute",
            "id": "cdktf.ComplexObject.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getNumberListAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberListAttribute(terraformAttribute: string): number[]"
          },
          {
            "fqn": "cdktf.ComplexObject.getNumberMapAttribute",
            "displayName": "getNumberMapAttribute",
            "id": "cdktf.ComplexObject.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getNumberMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getNumberMapAttribute(terraformAttribute: string): {[ key: string ]: number}"
          },
          {
            "fqn": "cdktf.ComplexObject.getStringAttribute",
            "displayName": "getStringAttribute",
            "id": "cdktf.ComplexObject.getStringAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getStringAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getStringAttribute(terraformAttribute: string): string"
          },
          {
            "fqn": "cdktf.ComplexObject.getStringMapAttribute",
            "displayName": "getStringMapAttribute",
            "id": "cdktf.ComplexObject.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.getStringMapAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ComplexObject.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public getStringMapAttribute(terraformAttribute: string): {[ key: string ]: string}"
          },
          {
            "fqn": "cdktf.ComplexObject.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.ComplexObject.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.interpolationForAttribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.ComplexObject.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(property: string): IResolvable"
          },
          {
            "fqn": "cdktf.ComplexObject.resolve",
            "displayName": "resolve",
            "id": "cdktf.ComplexObject.resolve",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.ComplexObject.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.ComplexObject.toString",
            "displayName": "toString",
            "id": "cdktf.ComplexObject.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ComplexObject.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.ComplexObject.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.ComplexObject.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ComplexObject.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.ComplexObject",
        "displayName": "ComplexObject",
        "id": "cdktf.ComplexObject",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DefaultTokenResolver.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DefaultTokenResolver.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DefaultTokenResolver.Initializer.parameter.concat",
              "displayName": "concat",
              "id": "cdktf.DefaultTokenResolver.Initializer.parameter.concat",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IFragmentConcatenator",
                    "displayName": "IFragmentConcatenator",
                    "fqn": "cdktf.IFragmentConcatenator",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { DefaultTokenResolver } from 'cdktf'\n\nnew DefaultTokenResolver(concat: IFragmentConcatenator)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITokenResolver",
            "displayName": "ITokenResolver",
            "id": "cdktf.ITokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.DefaultTokenResolver.resolveList",
            "displayName": "resolveList",
            "id": "cdktf.DefaultTokenResolver.resolveList",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveList.parameter.xs",
                "displayName": "xs",
                "id": "cdktf.DefaultTokenResolver.resolveList.parameter.xs",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveList.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a list of string."
            },
            "usage": "public resolveList(xs: string[], context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.DefaultTokenResolver.resolveMap",
            "displayName": "resolveMap",
            "id": "cdktf.DefaultTokenResolver.resolveMap",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveMap.parameter.xs",
                "displayName": "xs",
                "id": "cdktf.DefaultTokenResolver.resolveMap.parameter.xs",
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveMap.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveMap.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a map token."
            },
            "usage": "public resolveMap(xs: {[ key: string ]: any}, context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.DefaultTokenResolver.resolveNumberList",
            "displayName": "resolveNumberList",
            "id": "cdktf.DefaultTokenResolver.resolveNumberList",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveNumberList.parameter.xs",
                "displayName": "xs",
                "id": "cdktf.DefaultTokenResolver.resolveNumberList.parameter.xs",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "number"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveNumberList.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveNumberList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a list of numbers."
            },
            "usage": "public resolveNumberList(xs: number[], context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.DefaultTokenResolver.resolveString",
            "displayName": "resolveString",
            "id": "cdktf.DefaultTokenResolver.resolveString",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveString.parameter.fragments",
                "displayName": "fragments",
                "id": "cdktf.DefaultTokenResolver.resolveString.parameter.fragments",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TokenizedStringFragments",
                      "displayName": "TokenizedStringFragments",
                      "fqn": "cdktf.TokenizedStringFragments",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveString.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveString.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve string fragments to Tokens."
            },
            "usage": "public resolveString(fragments: TokenizedStringFragments, context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.DefaultTokenResolver.resolveToken",
            "displayName": "resolveToken",
            "id": "cdktf.DefaultTokenResolver.resolveToken",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveToken.parameter.t",
                "displayName": "t",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveToken.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolveToken.parameter.postProcessor",
                "displayName": "postProcessor",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Default Token resolution.",
              "remarks": "Resolve the Token, recurse into whatever it returns,\nthen finally post-process it."
            },
            "usage": "public resolveToken(t: IResolvable, context: IResolveContext, postProcessor: IPostProcessor): any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.DefaultTokenResolver",
        "displayName": "DefaultTokenResolver",
        "id": "cdktf.DefaultTokenResolver",
        "docs": {
          "summary": "Default resolver implementation."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.Fn.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Fn.Initializer",
          "parameters": [],
          "usage": "import { Fn } from 'cdktf'\n\nnew Fn()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Fn.abs",
            "displayName": "abs",
            "id": "cdktf.Fn.abs",
            "parameters": [
              {
                "fqn": "cdktf.Fn.abs.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.abs.parameter.value",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/abs.html abs} returns the absolute value of the given number."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.abs(value: number)"
          },
          {
            "fqn": "cdktf.Fn.abspath",
            "displayName": "abspath",
            "id": "cdktf.Fn.abspath",
            "parameters": [
              {
                "fqn": "cdktf.Fn.abspath.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.abspath.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/abspath.html abspath} takes a string containing a filesystem path and converts it to an absolute path."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.abspath(value: string)"
          },
          {
            "fqn": "cdktf.Fn.alltrue",
            "displayName": "alltrue",
            "id": "cdktf.Fn.alltrue",
            "parameters": [
              {
                "fqn": "cdktf.Fn.alltrue.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.alltrue.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/alltrue.html alltrue} returns true if all elements in a given collection are true or \"true\"."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.alltrue(values: any[])"
          },
          {
            "fqn": "cdktf.Fn.anytrue",
            "displayName": "anytrue",
            "id": "cdktf.Fn.anytrue",
            "parameters": [
              {
                "fqn": "cdktf.Fn.anytrue.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.anytrue.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/anytrue.html anytrue} returns true if any element in a given collection is true or \"true\"."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.anytrue(value: any[])"
          },
          {
            "fqn": "cdktf.Fn.base64decode",
            "displayName": "base64decode",
            "id": "cdktf.Fn.base64decode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64decode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64decode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64decode.html base64decode} takes a string containing a Base64 character sequence and returns the original string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.base64decode(value: string)"
          },
          {
            "fqn": "cdktf.Fn.base64encode",
            "displayName": "base64encode",
            "id": "cdktf.Fn.base64encode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64encode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64encode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64encode.html base64encode} takes a string containing a Base64 character sequence and returns the original string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.base64encode(value: string)"
          },
          {
            "fqn": "cdktf.Fn.base64gzip",
            "displayName": "base64gzip",
            "id": "cdktf.Fn.base64gzip",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64gzip.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64gzip.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64gzip.html base64gzip} compresses a string with gzip and then encodes the result in Base64 encoding."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.base64gzip(value: string)"
          },
          {
            "fqn": "cdktf.Fn.base64sha256",
            "displayName": "base64sha256",
            "id": "cdktf.Fn.base64sha256",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64sha256.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64sha256.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64sha256.html base64sha256} computes the SHA256 hash of a given string and encodes it with Base64."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.base64sha256(value: string)"
          },
          {
            "fqn": "cdktf.Fn.base64sha512",
            "displayName": "base64sha512",
            "id": "cdktf.Fn.base64sha512",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64sha512.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64sha512.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64sha512.html base64sha512} computes the SHA512 hash of a given string and encodes it with Base64."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.base64sha512(value: string)"
          },
          {
            "fqn": "cdktf.Fn.basename",
            "displayName": "basename",
            "id": "cdktf.Fn.basename",
            "parameters": [
              {
                "fqn": "cdktf.Fn.basename.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.basename.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/basename.html basename} takes a string containing a filesystem path and removes all except the last portion from it."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.basename(value: string)"
          },
          {
            "fqn": "cdktf.Fn.bcrypt",
            "displayName": "bcrypt",
            "id": "cdktf.Fn.bcrypt",
            "parameters": [
              {
                "fqn": "cdktf.Fn.bcrypt.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.bcrypt.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.bcrypt.parameter.cost",
                "displayName": "cost",
                "id": "cdktf.Fn.bcrypt.parameter.cost",
                "optional": true,
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/bcrypt.html bcrypt} computes a hash of the given string using the Blowfish cipher, returning a string in the Modular Crypt Format usually expected in the shadow password file on many Unix systems."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.bcrypt(value: string, cost?: number)"
          },
          {
            "fqn": "cdktf.Fn.can",
            "displayName": "can",
            "id": "cdktf.Fn.can",
            "parameters": [
              {
                "fqn": "cdktf.Fn.can.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.can.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/can.html can} evaluates the given expression and returns a boolean value indicating whether the expression produced a result without any errors."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.can(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.ceil",
            "displayName": "ceil",
            "id": "cdktf.Fn.ceil",
            "parameters": [
              {
                "fqn": "cdktf.Fn.ceil.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.ceil.parameter.value",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/ceil.html ceil} returns the closest whole number that is greater than or equal to the given value, which may be a fraction."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.ceil(value: number)"
          },
          {
            "fqn": "cdktf.Fn.chomp",
            "displayName": "chomp",
            "id": "cdktf.Fn.chomp",
            "parameters": [
              {
                "fqn": "cdktf.Fn.chomp.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.chomp.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/chomp.html chomp} removes newline characters at the end of a string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.chomp(value: string)"
          },
          {
            "fqn": "cdktf.Fn.chunklist",
            "displayName": "chunklist",
            "id": "cdktf.Fn.chunklist",
            "parameters": [
              {
                "fqn": "cdktf.Fn.chunklist.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.chunklist.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.chunklist.parameter.chunkSize",
                "displayName": "chunkSize",
                "id": "cdktf.Fn.chunklist.parameter.chunkSize",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/chunklist.html chunklist} splits a single list into fixed-size chunks, returning a list of lists."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.chunklist(value: any[], chunkSize: number)"
          },
          {
            "fqn": "cdktf.Fn.cidrhost",
            "displayName": "cidrhost",
            "id": "cdktf.Fn.cidrhost",
            "parameters": [
              {
                "fqn": "cdktf.Fn.cidrhost.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.cidrhost.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.cidrhost.parameter.hostnum",
                "displayName": "hostnum",
                "id": "cdktf.Fn.cidrhost.parameter.hostnum",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrhost.html cidrhost} calculates a full host IP address for a given host number within a given IP network address prefix."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.cidrhost(prefix: string, hostnum: number)"
          },
          {
            "fqn": "cdktf.Fn.cidrnetmask",
            "displayName": "cidrnetmask",
            "id": "cdktf.Fn.cidrnetmask",
            "parameters": [
              {
                "fqn": "cdktf.Fn.cidrnetmask.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.cidrnetmask.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrnetmask.html cidrnetmask} converts an IPv4 address prefix given in CIDR notation into a subnet mask address."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.cidrnetmask(prefix: string)"
          },
          {
            "fqn": "cdktf.Fn.cidrsubnet",
            "displayName": "cidrsubnet",
            "id": "cdktf.Fn.cidrsubnet",
            "parameters": [
              {
                "fqn": "cdktf.Fn.cidrsubnet.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.cidrsubnet.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.cidrsubnet.parameter.newbits",
                "displayName": "newbits",
                "id": "cdktf.Fn.cidrsubnet.parameter.newbits",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.cidrsubnet.parameter.netnum",
                "displayName": "netnum",
                "id": "cdktf.Fn.cidrsubnet.parameter.netnum",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrsubnet.html cidrsubnet} calculates a subnet address within given IP network address prefix."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.cidrsubnet(prefix: string, newbits: number, netnum: number)"
          },
          {
            "fqn": "cdktf.Fn.cidrsubnets",
            "displayName": "cidrsubnets",
            "id": "cdktf.Fn.cidrsubnets",
            "parameters": [
              {
                "fqn": "cdktf.Fn.cidrsubnets.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.cidrsubnets.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.cidrsubnets.parameter.newbits",
                "displayName": "newbits",
                "id": "cdktf.Fn.cidrsubnets.parameter.newbits",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "number"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrsubnets.html cidrsubnets} calculates a sequence of consecutive IP address ranges within a particular CIDR prefix."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.cidrsubnets(prefix: string, newbits: number[])"
          },
          {
            "fqn": "cdktf.Fn.coalesce",
            "displayName": "coalesce",
            "id": "cdktf.Fn.coalesce",
            "parameters": [
              {
                "fqn": "cdktf.Fn.coalesce.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.coalesce.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/coalesce.html coalesce} takes any number of arguments and returns the first one that isn't null or an empty string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.coalesce(value: any[])"
          },
          {
            "fqn": "cdktf.Fn.coalescelist",
            "displayName": "coalescelist",
            "id": "cdktf.Fn.coalescelist",
            "parameters": [
              {
                "fqn": "cdktf.Fn.coalescelist.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.coalescelist.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/coalescelist.html coalescelist} takes any number of list arguments and returns the first one that isn't empty."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.coalescelist(value: any[][])"
          },
          {
            "fqn": "cdktf.Fn.compact",
            "displayName": "compact",
            "id": "cdktf.Fn.compact",
            "parameters": [
              {
                "fqn": "cdktf.Fn.compact.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.compact.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/compact.html compact} takes a list of strings and returns a new list with any empty string elements removed."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.compact(value: string[])"
          },
          {
            "fqn": "cdktf.Fn.concat",
            "displayName": "concat",
            "id": "cdktf.Fn.concat",
            "parameters": [
              {
                "fqn": "cdktf.Fn.concat.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.concat.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/concat.html concat} takes two or more lists and combines them into a single list."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.concat(value: any[][])"
          },
          {
            "fqn": "cdktf.Fn.contains",
            "displayName": "contains",
            "id": "cdktf.Fn.contains",
            "parameters": [
              {
                "fqn": "cdktf.Fn.contains.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.contains.parameter.list",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.contains.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.contains.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/contains.html contains} determines whether a given list or set contains a given single value as one of its elements."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.contains(list: any[] | IResolvable, value: any)"
          },
          {
            "fqn": "cdktf.Fn.csvdecode",
            "displayName": "csvdecode",
            "id": "cdktf.Fn.csvdecode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.csvdecode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.csvdecode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/csvdecode.html csvdecode} decodes a string containing CSV-formatted data and produces a list of maps representing that data."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.csvdecode(value: string)"
          },
          {
            "fqn": "cdktf.Fn.dirname",
            "displayName": "dirname",
            "id": "cdktf.Fn.dirname",
            "parameters": [
              {
                "fqn": "cdktf.Fn.dirname.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.dirname.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/dirname.html dirname} takes a string containing a filesystem path and removes the last portion from it."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.dirname(value: string)"
          },
          {
            "fqn": "cdktf.Fn.distinct",
            "displayName": "distinct",
            "id": "cdktf.Fn.distinct",
            "parameters": [
              {
                "fqn": "cdktf.Fn.distinct.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.distinct.parameter.list",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/distinct.html distinct} takes a list and returns a new list with any duplicate elements removed."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.distinct(list: any[] | IResolvable)"
          },
          {
            "fqn": "cdktf.Fn.element",
            "displayName": "element",
            "id": "cdktf.Fn.element",
            "parameters": [
              {
                "fqn": "cdktf.Fn.element.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.element.parameter.list",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.element.parameter.index",
                "displayName": "index",
                "id": "cdktf.Fn.element.parameter.index",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/element.html element} retrieves a single element from a list."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.element(list: any[] | IResolvable, index: number)"
          },
          {
            "fqn": "cdktf.Fn.file",
            "displayName": "file",
            "id": "cdktf.Fn.file",
            "parameters": [
              {
                "fqn": "cdktf.Fn.file.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.file.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/file.html file} takes a string containing a filesystem path and removes all except the last portion from it."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.file(value: string)"
          },
          {
            "fqn": "cdktf.Fn.filebase64",
            "displayName": "filebase64",
            "id": "cdktf.Fn.filebase64",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filebase64.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filebase64.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64.html filebase64} reads the contents of a file at the given path and returns them as a base64-encoded string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.filebase64(value: string)"
          },
          {
            "fqn": "cdktf.Fn.filebase64sha256",
            "displayName": "filebase64sha256",
            "id": "cdktf.Fn.filebase64sha256",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filebase64sha256.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filebase64sha256.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64sha256.html filebase64sha256} is a variant of base64sha256 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.filebase64sha256(value: string)"
          },
          {
            "fqn": "cdktf.Fn.filebase64sha512",
            "displayName": "filebase64sha512",
            "id": "cdktf.Fn.filebase64sha512",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filebase64sha512.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filebase64sha512.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64sha512.html filebase64sha512} is a variant of base64sha512 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.filebase64sha512(value: string)"
          },
          {
            "fqn": "cdktf.Fn.fileexists",
            "displayName": "fileexists",
            "id": "cdktf.Fn.fileexists",
            "parameters": [
              {
                "fqn": "cdktf.Fn.fileexists.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.fileexists.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/fileexists.html fileexists} determines whether a file exists at a given path."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.fileexists(value: string)"
          },
          {
            "fqn": "cdktf.Fn.filemd5",
            "displayName": "filemd5",
            "id": "cdktf.Fn.filemd5",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filemd5.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filemd5.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filemd5.html filemd5} is a variant of md5 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.filemd5(value: string)"
          },
          {
            "fqn": "cdktf.Fn.fileset",
            "displayName": "fileset",
            "id": "cdktf.Fn.fileset",
            "parameters": [
              {
                "fqn": "cdktf.Fn.fileset.parameter.path",
                "displayName": "path",
                "id": "cdktf.Fn.fileset.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.fileset.parameter.pattern",
                "displayName": "pattern",
                "id": "cdktf.Fn.fileset.parameter.pattern",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/fileset.html fileset} enumerates a set of regular file names given a path and pattern."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.fileset(path: string, pattern: string)"
          },
          {
            "fqn": "cdktf.Fn.filesha1",
            "displayName": "filesha1",
            "id": "cdktf.Fn.filesha1",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filesha1.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filesha1.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha1.html filesha1} is a variant of sha1 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.filesha1(value: string)"
          },
          {
            "fqn": "cdktf.Fn.filesha256",
            "displayName": "filesha256",
            "id": "cdktf.Fn.filesha256",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filesha256.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filesha256.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha256.html filesha256} is a variant of sha256 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.filesha256(value: string)"
          },
          {
            "fqn": "cdktf.Fn.filesha512",
            "displayName": "filesha512",
            "id": "cdktf.Fn.filesha512",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filesha512.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filesha512.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha512.html filesha512} is a variant of sha512 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.filesha512(value: string)"
          },
          {
            "fqn": "cdktf.Fn.flatten",
            "displayName": "flatten",
            "id": "cdktf.Fn.flatten",
            "parameters": [
              {
                "fqn": "cdktf.Fn.flatten.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.flatten.parameter.list",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/flatten.html flatten} takes a list and replaces any elements that are lists with a flattened sequence of the list contents."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.flatten(list: any[] | IResolvable)"
          },
          {
            "fqn": "cdktf.Fn.floor",
            "displayName": "floor",
            "id": "cdktf.Fn.floor",
            "parameters": [
              {
                "fqn": "cdktf.Fn.floor.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.floor.parameter.value",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/floor.html floor} returns the closest whole number that is less than or equal to the given value, which may be a fraction."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.floor(value: number)"
          },
          {
            "fqn": "cdktf.Fn.format",
            "displayName": "format",
            "id": "cdktf.Fn.format",
            "parameters": [
              {
                "fqn": "cdktf.Fn.format.parameter.spec",
                "displayName": "spec",
                "id": "cdktf.Fn.format.parameter.spec",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.format.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.format.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/format.html format} produces a string by formatting a number of other values according to a specification string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.format(spec: string, values: any[])"
          },
          {
            "fqn": "cdktf.Fn.formatdate",
            "displayName": "formatdate",
            "id": "cdktf.Fn.formatdate",
            "parameters": [
              {
                "fqn": "cdktf.Fn.formatdate.parameter.spec",
                "displayName": "spec",
                "id": "cdktf.Fn.formatdate.parameter.spec",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.formatdate.parameter.timestamp",
                "displayName": "timestamp",
                "id": "cdktf.Fn.formatdate.parameter.timestamp",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/formatdate.html formatdate} converts a timestamp into a different time format."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.formatdate(spec: string, timestamp: string)"
          },
          {
            "fqn": "cdktf.Fn.formatlist",
            "displayName": "formatlist",
            "id": "cdktf.Fn.formatlist",
            "parameters": [
              {
                "fqn": "cdktf.Fn.formatlist.parameter.spec",
                "displayName": "spec",
                "id": "cdktf.Fn.formatlist.parameter.spec",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.formatlist.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.formatlist.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/formatlist.html formatlist} produces a list of strings by formatting a number of other values according to a specification string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.formatlist(spec: string, values: any[])"
          },
          {
            "fqn": "cdktf.Fn.indent",
            "displayName": "indent",
            "id": "cdktf.Fn.indent",
            "parameters": [
              {
                "fqn": "cdktf.Fn.indent.parameter.indentation",
                "displayName": "indentation",
                "id": "cdktf.Fn.indent.parameter.indentation",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.indent.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.indent.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/indent.html indent} adds a given number of spaces to the beginnings of all but the first line in a given multi-line string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.indent(indentation: number, value: string)"
          },
          {
            "fqn": "cdktf.Fn.index",
            "displayName": "index",
            "id": "cdktf.Fn.index",
            "parameters": [
              {
                "fqn": "cdktf.Fn.index.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.index.parameter.list",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.index.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.index.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/index.html index} finds the element index for a given value in a list."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.index(list: any[] | IResolvable, value: any)"
          },
          {
            "fqn": "cdktf.Fn.join",
            "displayName": "join",
            "id": "cdktf.Fn.join",
            "parameters": [
              {
                "fqn": "cdktf.Fn.join.parameter.separator",
                "displayName": "separator",
                "id": "cdktf.Fn.join.parameter.separator",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.join.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.join.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/join.html join} produces a string by concatenating together all elements of a given list of strings with the given delimiter."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.join(separator: string, value: string[])"
          },
          {
            "fqn": "cdktf.Fn.jsondecode",
            "displayName": "jsondecode",
            "id": "cdktf.Fn.jsondecode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.jsondecode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.jsondecode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/jsondecode.html jsondecode} interprets a given string as JSON, returning a representation of the result of decoding that string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.jsondecode(value: string)"
          },
          {
            "fqn": "cdktf.Fn.jsonencode",
            "displayName": "jsonencode",
            "id": "cdktf.Fn.jsonencode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.jsonencode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.jsonencode.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/jsonencode.html jsonencode} encodes a given value to a string using JSON syntax."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.jsonencode(value: any)"
          },
          {
            "fqn": "cdktf.Fn.keys",
            "displayName": "keys",
            "id": "cdktf.Fn.keys",
            "parameters": [
              {
                "fqn": "cdktf.Fn.keys.parameter.map",
                "displayName": "map",
                "id": "cdktf.Fn.keys.parameter.map",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/keys.html keys} takes a map and returns a list containing the keys from that map."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.keys(map: IResolvable | {[ key: string ]: any})"
          },
          {
            "fqn": "cdktf.Fn.lengthOf",
            "displayName": "lengthOf",
            "id": "cdktf.Fn.lengthOf",
            "parameters": [
              {
                "fqn": "cdktf.Fn.lengthOf.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.lengthOf.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/length.html length} determines the length of a given list, map, or string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.lengthOf(value: any)"
          },
          {
            "fqn": "cdktf.Fn.log",
            "displayName": "log",
            "id": "cdktf.Fn.log",
            "parameters": [
              {
                "fqn": "cdktf.Fn.log.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.log.parameter.value",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.log.parameter.base",
                "displayName": "base",
                "id": "cdktf.Fn.log.parameter.base",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/log.html log} returns the logarithm of a given number in a given base."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.log(value: number, base: number)"
          },
          {
            "fqn": "cdktf.Fn.lookup",
            "displayName": "lookup",
            "id": "cdktf.Fn.lookup",
            "parameters": [
              {
                "fqn": "cdktf.Fn.lookup.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.lookup.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.Fn.lookup.parameter.key",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.lookup.parameter.defaultValue",
                "displayName": "defaultValue",
                "id": "cdktf.Fn.lookup.parameter.defaultValue",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/lookup.html lookup} retrieves the value of a single element from a map, given its key. If the given key does not exist, the given default value is returned instead."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.lookup(value: any, key: any, defaultValue: any)"
          },
          {
            "fqn": "cdktf.Fn.lower",
            "displayName": "lower",
            "id": "cdktf.Fn.lower",
            "parameters": [
              {
                "fqn": "cdktf.Fn.lower.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.lower.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/lower.html lower} converts all cased letters in the given string to lowercase."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.lower(value: string)"
          },
          {
            "fqn": "cdktf.Fn.matchkeys",
            "displayName": "matchkeys",
            "id": "cdktf.Fn.matchkeys",
            "parameters": [
              {
                "fqn": "cdktf.Fn.matchkeys.parameter.valuesList",
                "displayName": "valuesList",
                "id": "cdktf.Fn.matchkeys.parameter.valuesList",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.matchkeys.parameter.keysList",
                "displayName": "keysList",
                "id": "cdktf.Fn.matchkeys.parameter.keysList",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.matchkeys.parameter.searchSet",
                "displayName": "searchSet",
                "id": "cdktf.Fn.matchkeys.parameter.searchSet",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/matchkeys.html matchkeys} constructs a new list by taking a subset of elements from one list whose indexes match the corresponding indexes of values in another list."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.matchkeys(valuesList: string | any[] | IResolvable, keysList: string | any[] | IResolvable, searchSet: string | any[] | IResolvable)"
          },
          {
            "fqn": "cdktf.Fn.max",
            "displayName": "max",
            "id": "cdktf.Fn.max",
            "parameters": [
              {
                "fqn": "cdktf.Fn.max.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.max.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "number"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/max.html max} takes one or more numbers and returns the greatest number from the set."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.max(values: number[])"
          },
          {
            "fqn": "cdktf.Fn.md5",
            "displayName": "md5",
            "id": "cdktf.Fn.md5",
            "parameters": [
              {
                "fqn": "cdktf.Fn.md5.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.md5.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/md5.html md5} computes the MD5 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.md5(value: string)"
          },
          {
            "fqn": "cdktf.Fn.mergeLists",
            "displayName": "mergeLists",
            "id": "cdktf.Fn.mergeLists",
            "parameters": [
              {
                "fqn": "cdktf.Fn.mergeLists.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.mergeLists.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/merge.html merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.mergeLists(values: any[])"
          },
          {
            "fqn": "cdktf.Fn.mergeMaps",
            "displayName": "mergeMaps",
            "id": "cdktf.Fn.mergeMaps",
            "parameters": [
              {
                "fqn": "cdktf.Fn.mergeMaps.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.mergeMaps.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/merge.html merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.mergeMaps(values: any[])"
          },
          {
            "fqn": "cdktf.Fn.min",
            "displayName": "min",
            "id": "cdktf.Fn.min",
            "parameters": [
              {
                "fqn": "cdktf.Fn.min.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.min.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "number"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/min.html min} takes one or more numbers and returns the smallest number from the set."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.min(values: number[])"
          },
          {
            "fqn": "cdktf.Fn.nonsensitive",
            "displayName": "nonsensitive",
            "id": "cdktf.Fn.nonsensitive",
            "parameters": [
              {
                "fqn": "cdktf.Fn.nonsensitive.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.nonsensitive.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/nonsensitive.html nonsensitive} takes a sensitive value and returns a copy of that value with the sensitive marking removed, thereby exposing the sensitive value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.nonsensitive(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.one",
            "displayName": "one",
            "id": "cdktf.Fn.one",
            "parameters": [
              {
                "fqn": "cdktf.Fn.one.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.one.parameter.list",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/one.html one} takes a list, set, or tuple value with either zero or one elements."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.one(list: string | any[] | IResolvable)"
          },
          {
            "fqn": "cdktf.Fn.parseInt",
            "displayName": "parseInt",
            "id": "cdktf.Fn.parseInt",
            "parameters": [
              {
                "fqn": "cdktf.Fn.parseInt.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.parseInt.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.parseInt.parameter.base",
                "displayName": "base",
                "id": "cdktf.Fn.parseInt.parameter.base",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/parseint.html parseInt} parses the given string as a representation of an integer in the specified base and returns the resulting number. The base must be between 2 and 62 inclusive."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.parseInt(value: string, base: number)"
          },
          {
            "fqn": "cdktf.Fn.pathexpand",
            "displayName": "pathexpand",
            "id": "cdktf.Fn.pathexpand",
            "parameters": [
              {
                "fqn": "cdktf.Fn.pathexpand.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.pathexpand.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/pathexpand.html pathexpand} takes a string containing a filesystem path and removes the last portion from it."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.pathexpand(value: string)"
          },
          {
            "fqn": "cdktf.Fn.pow",
            "displayName": "pow",
            "id": "cdktf.Fn.pow",
            "parameters": [
              {
                "fqn": "cdktf.Fn.pow.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.pow.parameter.value",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.pow.parameter.power",
                "displayName": "power",
                "id": "cdktf.Fn.pow.parameter.power",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/pow.html pow} calculates an exponent, by raising its first argument to the power of the second argument."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.pow(value: number, power: number)"
          },
          {
            "fqn": "cdktf.Fn.range",
            "displayName": "range",
            "id": "cdktf.Fn.range",
            "parameters": [
              {
                "fqn": "cdktf.Fn.range.parameter.start",
                "displayName": "start",
                "id": "cdktf.Fn.range.parameter.start",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.range.parameter.limit",
                "displayName": "limit",
                "id": "cdktf.Fn.range.parameter.limit",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.range.parameter.step",
                "displayName": "step",
                "id": "cdktf.Fn.range.parameter.step",
                "optional": true,
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/range.html range} generates a list of numbers using a start value, a limit value, and a step value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.range(start: number, limit: number, step?: number)"
          },
          {
            "fqn": "cdktf.Fn.rawString",
            "displayName": "rawString",
            "id": "cdktf.Fn.rawString",
            "parameters": [
              {
                "fqn": "cdktf.Fn.rawString.parameter.str",
                "displayName": "str",
                "id": "cdktf.Fn.rawString.parameter.str",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Use this function to wrap a string and escape it properly for the use in Terraform This is only needed in certain scenarios (e.g., if you have unescaped double quotes in the string)."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.rawString(str: string)"
          },
          {
            "fqn": "cdktf.Fn.regex",
            "displayName": "regex",
            "id": "cdktf.Fn.regex",
            "parameters": [
              {
                "fqn": "cdktf.Fn.regex.parameter.pattern",
                "displayName": "pattern",
                "id": "cdktf.Fn.regex.parameter.pattern",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.regex.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.regex.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/regex.html regex} applies a regular expression to a string and returns the matching substrings in pattern."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.regex(pattern: string, value: string)"
          },
          {
            "fqn": "cdktf.Fn.regexall",
            "displayName": "regexall",
            "id": "cdktf.Fn.regexall",
            "parameters": [
              {
                "fqn": "cdktf.Fn.regexall.parameter.pattern",
                "displayName": "pattern",
                "id": "cdktf.Fn.regexall.parameter.pattern",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.regexall.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.regexall.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/regexall.html regexall} applies a regular expression to a string and returns a list of all matches."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.regexall(pattern: string, value: string)"
          },
          {
            "fqn": "cdktf.Fn.replace",
            "displayName": "replace",
            "id": "cdktf.Fn.replace",
            "parameters": [
              {
                "fqn": "cdktf.Fn.replace.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.replace.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.replace.parameter.substring",
                "displayName": "substring",
                "id": "cdktf.Fn.replace.parameter.substring",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.replace.parameter.replacement",
                "displayName": "replacement",
                "id": "cdktf.Fn.replace.parameter.replacement",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/replace.html replace} searches a given string for another given substring, and replaces each occurrence with a given replacement string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.replace(value: string, substring: string, replacement: string)"
          },
          {
            "fqn": "cdktf.Fn.reverse",
            "displayName": "reverse",
            "id": "cdktf.Fn.reverse",
            "parameters": [
              {
                "fqn": "cdktf.Fn.reverse.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.reverse.parameter.values",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/reverse.html reverse} takes a sequence and produces a new sequence of the same length with all of the same elements as the given sequence but in reverse order."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.reverse(values: any[] | IResolvable)"
          },
          {
            "fqn": "cdktf.Fn.rsadecrypt",
            "displayName": "rsadecrypt",
            "id": "cdktf.Fn.rsadecrypt",
            "parameters": [
              {
                "fqn": "cdktf.Fn.rsadecrypt.parameter.ciphertext",
                "displayName": "ciphertext",
                "id": "cdktf.Fn.rsadecrypt.parameter.ciphertext",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.rsadecrypt.parameter.privatekey",
                "displayName": "privatekey",
                "id": "cdktf.Fn.rsadecrypt.parameter.privatekey",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/rsadecrypt.html rsadecrypt} decrypts an RSA-encrypted ciphertext, returning the corresponding cleartext."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.rsadecrypt(ciphertext: string, privatekey: string)"
          },
          {
            "fqn": "cdktf.Fn.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.Fn.sensitive",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sensitive.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.sensitive.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sensitive.html sensitive} takes any value and returns a copy of it marked so that Terraform will treat it as sensitive, with the same meaning and behavior as for sensitive input variables."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.sensitive(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.setintersection",
            "displayName": "setintersection",
            "id": "cdktf.Fn.setintersection",
            "parameters": [
              {
                "fqn": "cdktf.Fn.setintersection.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.setintersection.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setintersection.html setintersection} function takes multiple sets and produces a single set containing only the elements that all of the given sets have in common."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.setintersection(values: any[])"
          },
          {
            "fqn": "cdktf.Fn.setproduct",
            "displayName": "setproduct",
            "id": "cdktf.Fn.setproduct",
            "parameters": [
              {
                "fqn": "cdktf.Fn.setproduct.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.setproduct.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setproduct.html setproduct} function finds all of the possible combinations of elements from all of the given sets by computing the Cartesian product."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.setproduct(values: any[])"
          },
          {
            "fqn": "cdktf.Fn.setsubtract",
            "displayName": "setsubtract",
            "id": "cdktf.Fn.setsubtract",
            "parameters": [
              {
                "fqn": "cdktf.Fn.setsubtract.parameter.minuend",
                "displayName": "minuend",
                "id": "cdktf.Fn.setsubtract.parameter.minuend",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.setsubtract.parameter.subtrahend",
                "displayName": "subtrahend",
                "id": "cdktf.Fn.setsubtract.parameter.subtrahend",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/slice.html setsubtract} function returns a new set containing the elements from the first set that are not present in the second set."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.setsubtract(minuend: string | any[] | IResolvable, subtrahend: string | any[] | IResolvable)"
          },
          {
            "fqn": "cdktf.Fn.setunion",
            "displayName": "setunion",
            "id": "cdktf.Fn.setunion",
            "parameters": [
              {
                "fqn": "cdktf.Fn.setunion.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.setunion.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setunion.html setunion} function takes multiple sets and produces a single set containing the elements from all of the given sets."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.setunion(values: any[])"
          },
          {
            "fqn": "cdktf.Fn.sha1",
            "displayName": "sha1",
            "id": "cdktf.Fn.sha1",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sha1.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.sha1.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha1.html sha1} computes the SHA1 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.sha1(value: string)"
          },
          {
            "fqn": "cdktf.Fn.sha256",
            "displayName": "sha256",
            "id": "cdktf.Fn.sha256",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sha256.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.sha256.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha256.html sha256} computes the SHA256 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.sha256(value: string)"
          },
          {
            "fqn": "cdktf.Fn.sha512",
            "displayName": "sha512",
            "id": "cdktf.Fn.sha512",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sha512.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.sha512.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha512.html sha512} computes the SHA512 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.sha512(value: string)"
          },
          {
            "fqn": "cdktf.Fn.signum",
            "displayName": "signum",
            "id": "cdktf.Fn.signum",
            "parameters": [
              {
                "fqn": "cdktf.Fn.signum.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.signum.parameter.value",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/signum.html signum} determines the sign of a number, returning a number between -1 and 1 to represent the sign."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.signum(value: number)"
          },
          {
            "fqn": "cdktf.Fn.slice",
            "displayName": "slice",
            "id": "cdktf.Fn.slice",
            "parameters": [
              {
                "fqn": "cdktf.Fn.slice.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.slice.parameter.list",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.slice.parameter.startindex",
                "displayName": "startindex",
                "id": "cdktf.Fn.slice.parameter.startindex",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.slice.parameter.endindex",
                "displayName": "endindex",
                "id": "cdktf.Fn.slice.parameter.endindex",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/slice.html slice} extracts some consecutive elements from within a list."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.slice(list: string | any[] | IResolvable, startindex: number, endindex: number)"
          },
          {
            "fqn": "cdktf.Fn.sort",
            "displayName": "sort",
            "id": "cdktf.Fn.sort",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sort.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.sort.parameter.list",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sort.html sort} takes a list of strings and returns a new list with those strings sorted lexicographically."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.sort(list: string | any[] | IResolvable)"
          },
          {
            "fqn": "cdktf.Fn.split",
            "displayName": "split",
            "id": "cdktf.Fn.split",
            "parameters": [
              {
                "fqn": "cdktf.Fn.split.parameter.seperator",
                "displayName": "seperator",
                "id": "cdktf.Fn.split.parameter.seperator",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.split.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.split.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/split.html split} produces a list by dividing a given string at all occurrences of a given separator."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.split(seperator: string, value: string)"
          },
          {
            "fqn": "cdktf.Fn.strrev",
            "displayName": "strrev",
            "id": "cdktf.Fn.strrev",
            "parameters": [
              {
                "fqn": "cdktf.Fn.strrev.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.strrev.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/strrev.html strrev} reverses the characters in a string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.strrev(value: string)"
          },
          {
            "fqn": "cdktf.Fn.substr",
            "displayName": "substr",
            "id": "cdktf.Fn.substr",
            "parameters": [
              {
                "fqn": "cdktf.Fn.substr.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.substr.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.substr.parameter.offset",
                "displayName": "offset",
                "id": "cdktf.Fn.substr.parameter.offset",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.substr.parameter.length",
                "displayName": "length",
                "id": "cdktf.Fn.substr.parameter.length",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/substr.html substr} extracts a substring from a given string by offset and length."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.substr(value: string, offset: number, length: number)"
          },
          {
            "fqn": "cdktf.Fn.sum",
            "displayName": "sum",
            "id": "cdktf.Fn.sum",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sum.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.sum.parameter.list",
                "type": {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sum.html sum} takes a list or set of numbers and returns the sum of those numbers."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.sum(list: string | any[] | IResolvable)"
          },
          {
            "fqn": "cdktf.Fn.templatefile",
            "displayName": "templatefile",
            "id": "cdktf.Fn.templatefile",
            "parameters": [
              {
                "fqn": "cdktf.Fn.templatefile.parameter.path",
                "displayName": "path",
                "id": "cdktf.Fn.templatefile.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.templatefile.parameter.vars",
                "displayName": "vars",
                "id": "cdktf.Fn.templatefile.parameter.vars",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/templatefile.html templatefile} reads the file at the given path and renders its content as a template using a supplied set of template variables."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.templatefile(path: string, vars: any)"
          },
          {
            "fqn": "cdktf.Fn.textdecodebase64",
            "displayName": "textdecodebase64",
            "id": "cdktf.Fn.textdecodebase64",
            "parameters": [
              {
                "fqn": "cdktf.Fn.textdecodebase64.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.textdecodebase64.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.textdecodebase64.parameter.encodingName",
                "displayName": "encodingName",
                "id": "cdktf.Fn.textdecodebase64.parameter.encodingName",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/textdecodebase64.html textdecodebase64} function decodes a string that was previously Base64-encoded, and then interprets the result as characters in a specified character encoding."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.textdecodebase64(value: string, encodingName: string)"
          },
          {
            "fqn": "cdktf.Fn.textencodebase64",
            "displayName": "textencodebase64",
            "id": "cdktf.Fn.textencodebase64",
            "parameters": [
              {
                "fqn": "cdktf.Fn.textencodebase64.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.textencodebase64.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.textencodebase64.parameter.encodingName",
                "displayName": "encodingName",
                "id": "cdktf.Fn.textencodebase64.parameter.encodingName",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/textencodebase64.html textencodebase64}  encodes the unicode characters in a given string using a specified character encoding, returning the result base64 encoded because Terraform language strings are always sequences of unicode characters."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.textencodebase64(value: string, encodingName: string)"
          },
          {
            "fqn": "cdktf.Fn.timeadd",
            "displayName": "timeadd",
            "id": "cdktf.Fn.timeadd",
            "parameters": [
              {
                "fqn": "cdktf.Fn.timeadd.parameter.timestamp",
                "displayName": "timestamp",
                "id": "cdktf.Fn.timeadd.parameter.timestamp",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.timeadd.parameter.duration",
                "displayName": "duration",
                "id": "cdktf.Fn.timeadd.parameter.duration",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/timeadd.html timeadd} adds a duration to a timestamp, returning a new timestamp."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.timeadd(timestamp: string, duration: string)"
          },
          {
            "fqn": "cdktf.Fn.timestamp",
            "displayName": "timestamp",
            "id": "cdktf.Fn.timestamp",
            "parameters": [],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/timestamp.html timestamp} returns a UTC timestamp string in RFC 3339 format."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.timestamp()"
          },
          {
            "fqn": "cdktf.Fn.title",
            "displayName": "title",
            "id": "cdktf.Fn.title",
            "parameters": [
              {
                "fqn": "cdktf.Fn.title.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.title.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/title.html title} converts the first letter of each word in the given string to uppercase."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.title(value: string)"
          },
          {
            "fqn": "cdktf.Fn.tobool",
            "displayName": "tobool",
            "id": "cdktf.Fn.tobool",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tobool.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tobool.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tobool.html tobool} converts its argument to a boolean value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.tobool(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.tolist",
            "displayName": "tolist",
            "id": "cdktf.Fn.tolist",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tolist.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tolist.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tolist.html tolist} converts its argument to a list value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.tolist(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.tomap",
            "displayName": "tomap",
            "id": "cdktf.Fn.tomap",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tomap.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tomap.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tomap.html tomap} converts its argument to a map value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.tomap(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.tonumber",
            "displayName": "tonumber",
            "id": "cdktf.Fn.tonumber",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tonumber.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tonumber.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tonumber.html tonumber} converts its argument to a number value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.tonumber(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.toset",
            "displayName": "toset",
            "id": "cdktf.Fn.toset",
            "parameters": [
              {
                "fqn": "cdktf.Fn.toset.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.toset.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/toset.html toset} converts its argument to a set value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.toset(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.tostring",
            "displayName": "tostring",
            "id": "cdktf.Fn.tostring",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tostring.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tostring.parameter.expression",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tostring.html tostring} converts its argument to a string value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.tostring(expression: any)"
          },
          {
            "fqn": "cdktf.Fn.transpose",
            "displayName": "transpose",
            "id": "cdktf.Fn.transpose",
            "parameters": [
              {
                "fqn": "cdktf.Fn.transpose.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.transpose.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/transpose.html transpose} takes a map of lists of strings and swaps the keys and values to produce a new map of lists of strings."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.transpose(value: any)"
          },
          {
            "fqn": "cdktf.Fn.trim",
            "displayName": "trim",
            "id": "cdktf.Fn.trim",
            "parameters": [
              {
                "fqn": "cdktf.Fn.trim.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.trim.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.trim.parameter.replacement",
                "displayName": "replacement",
                "id": "cdktf.Fn.trim.parameter.replacement",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trim.html trim} removes the specified characters from the start and end of the given string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.trim(value: string, replacement: string)"
          },
          {
            "fqn": "cdktf.Fn.trimprefix",
            "displayName": "trimprefix",
            "id": "cdktf.Fn.trimprefix",
            "parameters": [
              {
                "fqn": "cdktf.Fn.trimprefix.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.trimprefix.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.trimprefix.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.trimprefix.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimprefix.html trimprefix} removes the specified prefix from the start of the given string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.trimprefix(value: string, prefix: string)"
          },
          {
            "fqn": "cdktf.Fn.trimspace",
            "displayName": "trimspace",
            "id": "cdktf.Fn.trimspace",
            "parameters": [
              {
                "fqn": "cdktf.Fn.trimspace.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.trimspace.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimspace.html trimspace} removes any space characters from the start and end of the given string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.trimspace(value: string)"
          },
          {
            "fqn": "cdktf.Fn.trimsuffix",
            "displayName": "trimsuffix",
            "id": "cdktf.Fn.trimsuffix",
            "parameters": [
              {
                "fqn": "cdktf.Fn.trimsuffix.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.trimsuffix.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.trimsuffix.parameter.suffix",
                "displayName": "suffix",
                "id": "cdktf.Fn.trimsuffix.parameter.suffix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimsuffix.html trimsuffix} removes the specified suffix from the end of the given string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.trimsuffix(value: string, suffix: string)"
          },
          {
            "fqn": "cdktf.Fn.try",
            "displayName": "try",
            "id": "cdktf.Fn.try",
            "parameters": [
              {
                "fqn": "cdktf.Fn.try.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.try.parameter.expression",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/try.html try} evaluates all of its argument expressions in turn and returns the result of the first one that does not produce any errors."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.try(expression: any[])"
          },
          {
            "fqn": "cdktf.Fn.upper",
            "displayName": "upper",
            "id": "cdktf.Fn.upper",
            "parameters": [
              {
                "fqn": "cdktf.Fn.upper.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.upper.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/upper.html upper} converts all cased letters in the given string to uppercase."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.upper(value: string)"
          },
          {
            "fqn": "cdktf.Fn.urlencode",
            "displayName": "urlencode",
            "id": "cdktf.Fn.urlencode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.urlencode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.urlencode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/urlencode.html urlencode} applies URL encoding to a given string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.urlencode(value: string)"
          },
          {
            "fqn": "cdktf.Fn.uuid",
            "displayName": "uuid",
            "id": "cdktf.Fn.uuid",
            "parameters": [],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/uuid.html uuid} generates a unique identifier string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.uuid()"
          },
          {
            "fqn": "cdktf.Fn.uuidv5",
            "displayName": "uuidv5",
            "id": "cdktf.Fn.uuidv5",
            "parameters": [
              {
                "fqn": "cdktf.Fn.uuidv5.parameter.namespace",
                "displayName": "namespace",
                "id": "cdktf.Fn.uuidv5.parameter.namespace",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.uuidv5.parameter.name",
                "displayName": "name",
                "id": "cdktf.Fn.uuidv5.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/uuidv5.html uuidv5} generates a unique identifier string."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.uuidv5(namespace: string, name: string)"
          },
          {
            "fqn": "cdktf.Fn.values",
            "displayName": "values",
            "id": "cdktf.Fn.values",
            "parameters": [
              {
                "fqn": "cdktf.Fn.values.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.values.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/values.html values} takes a map and returns a list containing the values of the elements in that map."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.values(value: any)"
          },
          {
            "fqn": "cdktf.Fn.yamldecode",
            "displayName": "yamldecode",
            "id": "cdktf.Fn.yamldecode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.yamldecode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.yamldecode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/yamldecode.html yamldecode} parses a string as a subset of YAML, and produces a representation of its value."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.yamldecode(value: string)"
          },
          {
            "fqn": "cdktf.Fn.yamlencode",
            "displayName": "yamlencode",
            "id": "cdktf.Fn.yamlencode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.yamlencode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.yamlencode.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/yamlencode.html yamlencode} encodes a given value to a string using JSON syntax."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.yamlencode(value: any)"
          },
          {
            "fqn": "cdktf.Fn.zipmap",
            "displayName": "zipmap",
            "id": "cdktf.Fn.zipmap",
            "parameters": [
              {
                "fqn": "cdktf.Fn.zipmap.parameter.keyslist",
                "displayName": "keyslist",
                "id": "cdktf.Fn.zipmap.parameter.keyslist",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.zipmap.parameter.valueslist",
                "displayName": "valueslist",
                "id": "cdktf.Fn.zipmap.parameter.valueslist",
                "type": {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/zipmap.html zipmap} constructs a map from a list of keys and a corresponding list of values."
            },
            "usage": "import { Fn } from 'cdktf'\n\nFn.zipmap(keyslist: any[] | IResolvable, valueslist: any[] | IResolvable)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Fn",
        "displayName": "Fn",
        "id": "cdktf.Fn",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.Lazy.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Lazy.Initializer",
          "parameters": [],
          "usage": "import { Lazy } from 'cdktf'\n\nnew Lazy()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Lazy.anyValue",
            "displayName": "anyValue",
            "id": "cdktf.Lazy.anyValue",
            "parameters": [
              {
                "fqn": "cdktf.Lazy.anyValue.parameter.producer",
                "displayName": "producer",
                "id": "cdktf.Lazy.anyValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAnyProducer",
                      "displayName": "IAnyProducer",
                      "fqn": "cdktf.IAnyProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The lazy producer."
                }
              },
              {
                "fqn": "cdktf.Lazy.anyValue.parameter.options",
                "displayName": "options",
                "id": "cdktf.Lazy.anyValue.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.LazyAnyValueOptions",
                      "displayName": "LazyAnyValueOptions",
                      "fqn": "cdktf.LazyAnyValueOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "Options."
                }
              }
            ],
            "docs": {
              "summary": "Produces a lazy token from an untyped value."
            },
            "usage": "import { Lazy } from 'cdktf'\n\nLazy.anyValue(producer: IAnyProducer, options?: LazyAnyValueOptions)"
          },
          {
            "fqn": "cdktf.Lazy.listValue",
            "displayName": "listValue",
            "id": "cdktf.Lazy.listValue",
            "parameters": [
              {
                "fqn": "cdktf.Lazy.listValue.parameter.producer",
                "displayName": "producer",
                "id": "cdktf.Lazy.listValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IListProducer",
                      "displayName": "IListProducer",
                      "fqn": "cdktf.IListProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              },
              {
                "fqn": "cdktf.Lazy.listValue.parameter.options",
                "displayName": "options",
                "id": "cdktf.Lazy.listValue.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.LazyListValueOptions",
                      "displayName": "LazyListValueOptions",
                      "fqn": "cdktf.LazyListValueOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "Options."
                }
              }
            ],
            "docs": {
              "summary": "Returns a list-ified token for a lazy value."
            },
            "usage": "import { Lazy } from 'cdktf'\n\nLazy.listValue(producer: IListProducer, options?: LazyListValueOptions)"
          },
          {
            "fqn": "cdktf.Lazy.numberValue",
            "displayName": "numberValue",
            "id": "cdktf.Lazy.numberValue",
            "parameters": [
              {
                "fqn": "cdktf.Lazy.numberValue.parameter.producer",
                "displayName": "producer",
                "id": "cdktf.Lazy.numberValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.INumberProducer",
                      "displayName": "INumberProducer",
                      "fqn": "cdktf.INumberProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              }
            ],
            "docs": {
              "summary": "Returns a numberified token for a lazy value."
            },
            "usage": "import { Lazy } from 'cdktf'\n\nLazy.numberValue(producer: INumberProducer)"
          },
          {
            "fqn": "cdktf.Lazy.stringValue",
            "displayName": "stringValue",
            "id": "cdktf.Lazy.stringValue",
            "parameters": [
              {
                "fqn": "cdktf.Lazy.stringValue.parameter.producer",
                "displayName": "producer",
                "id": "cdktf.Lazy.stringValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IStringProducer",
                      "displayName": "IStringProducer",
                      "fqn": "cdktf.IStringProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              },
              {
                "fqn": "cdktf.Lazy.stringValue.parameter.options",
                "displayName": "options",
                "id": "cdktf.Lazy.stringValue.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.LazyStringValueOptions",
                      "displayName": "LazyStringValueOptions",
                      "fqn": "cdktf.LazyStringValueOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "Options."
                }
              }
            ],
            "docs": {
              "summary": "Returns a stringified token for a lazy value."
            },
            "usage": "import { Lazy } from 'cdktf'\n\nLazy.stringValue(producer: IStringProducer, options?: LazyStringValueOptions)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Lazy",
        "displayName": "Lazy",
        "id": "cdktf.Lazy",
        "docs": {
          "summary": "Lazily produce a value.",
          "remarks": "Can be used to return a string, list or numeric value whose actual value\nwill only be calculated later, during synthesis."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.LazyBase.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.LazyBase.Initializer",
          "parameters": [],
          "usage": "import { LazyBase } from 'cdktf'\n\nnew LazyBase()"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.LazyBase.addPostProcessor",
            "displayName": "addPostProcessor",
            "id": "cdktf.LazyBase.addPostProcessor",
            "parameters": [
              {
                "fqn": "cdktf.LazyBase.addPostProcessor.parameter.postProcessor",
                "displayName": "postProcessor",
                "id": "cdktf.LazyBase.addPostProcessor.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public addPostProcessor(postProcessor: IPostProcessor): void"
          },
          {
            "fqn": "cdktf.LazyBase.resolve",
            "displayName": "resolve",
            "id": "cdktf.LazyBase.resolve",
            "parameters": [
              {
                "fqn": "cdktf.LazyBase.resolve.parameter.context",
                "displayName": "context",
                "id": "cdktf.LazyBase.resolve.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.LazyBase.toJSON",
            "displayName": "toJSON",
            "id": "cdktf.LazyBase.toJSON",
            "parameters": [],
            "docs": {
              "summary": "Turn this Token into JSON.",
              "remarks": "Called automatically when JSON.stringify() is called on a Token."
            },
            "usage": "public toJSON(): any"
          },
          {
            "fqn": "cdktf.LazyBase.toString",
            "displayName": "toString",
            "id": "cdktf.LazyBase.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.LazyBase.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.LazyBase.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          }
        ],
        "fqn": "cdktf.LazyBase",
        "displayName": "LazyBase",
        "id": "cdktf.LazyBase",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.ListTerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ListTerraformIterator.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ListTerraformIterator.Initializer.parameter.list",
              "displayName": "list",
              "id": "cdktf.ListTerraformIterator.Initializer.parameter.list",
              "type": {
                "formattingPattern": "% | % | % | % | % | % | % | % | %",
                "types": [
                  {
                    "formattingPattern": "%[]",
                    "types": [
                      {
                        "formattingPattern": "string"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.IResolvable",
                        "displayName": "IResolvable",
                        "fqn": "cdktf.IResolvable",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%[]",
                    "types": [
                      {
                        "formattingPattern": "number"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ComplexList",
                        "displayName": "ComplexList",
                        "fqn": "cdktf.ComplexList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.StringMapList",
                        "displayName": "StringMapList",
                        "fqn": "cdktf.StringMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.NumberMapList",
                        "displayName": "NumberMapList",
                        "fqn": "cdktf.NumberMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.BooleanMapList",
                        "displayName": "BooleanMapList",
                        "fqn": "cdktf.BooleanMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.AnyMapList",
                        "displayName": "AnyMapList",
                        "fqn": "cdktf.AnyMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%[]",
                    "types": [
                      {
                        "formattingPattern": "% | %",
                        "types": [
                          {
                            "formattingPattern": "boolean"
                          },
                          {
                            "formattingPattern": "%",
                            "types": [
                              {
                                "id": "cdktf.IResolvable",
                                "displayName": "IResolvable",
                                "fqn": "cdktf.IResolvable",
                                "packageName": "cdktf",
                                "packageVersion": "0.0.0"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { ListTerraformIterator } from 'cdktf'\n\nnew ListTerraformIterator(list: string[] | IResolvable | number[] | ComplexList | StringMapList | NumberMapList | BooleanMapList | AnyMapList | boolean | IResolvable[])"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ListTerraformIterator.dynamic",
            "displayName": "dynamic",
            "id": "cdktf.ListTerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.dynamic.parameter.attributes",
                "displayName": "attributes",
                "id": "cdktf.ListTerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public dynamic(attributes: {[ key: string ]: any}): IResolvable"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getAny",
            "displayName": "getAny",
            "id": "cdktf.ListTerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getAny.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getAny(attribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getAnyMap",
            "displayName": "getAnyMap",
            "id": "cdktf.ListTerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getAnyMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getAnyMap(attribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.ListTerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getBoolean.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getBoolean(attribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getBooleanMap",
            "displayName": "getBooleanMap",
            "id": "cdktf.ListTerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getBooleanMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getBooleanMap(attribute: string): {[ key: string ]: boolean}"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getList",
            "displayName": "getList",
            "id": "cdktf.ListTerraformIterator.getList",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getList.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getList(attribute: string): string[]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getMap",
            "displayName": "getMap",
            "id": "cdktf.ListTerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getMap(attribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.ListTerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getNumber.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumber(attribute: string): number"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getNumberList",
            "displayName": "getNumberList",
            "id": "cdktf.ListTerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getNumberList.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumberList(attribute: string): number[]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getNumberMap",
            "displayName": "getNumberMap",
            "id": "cdktf.ListTerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getNumberMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumberMap(attribute: string): {[ key: string ]: number}"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getString",
            "displayName": "getString",
            "id": "cdktf.ListTerraformIterator.getString",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getString.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getString(attribute: string): string"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.getStringMap",
            "displayName": "getStringMap",
            "id": "cdktf.ListTerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.getStringMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getStringMap(attribute: string): {[ key: string ]: string}"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.ListTerraformIterator.fromList",
            "displayName": "fromList",
            "id": "cdktf.ListTerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.fromList.parameter.list",
                "displayName": "list",
                "id": "cdktf.ListTerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "% | % | % | % | % | % | % | % | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "number"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "% | %",
                          "types": [
                            {
                              "formattingPattern": "boolean"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "import { ListTerraformIterator } from 'cdktf'\n\nListTerraformIterator.fromList(list: string[] | IResolvable | number[] | ComplexList | StringMapList | NumberMapList | BooleanMapList | AnyMapList | boolean | IResolvable[])"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.fromMap",
            "displayName": "fromMap",
            "id": "cdktf.ListTerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.fromMap.parameter.map",
                "displayName": "map",
                "id": "cdktf.ListTerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "% | % | % | % | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "number"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "boolean"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "import { ListTerraformIterator } from 'cdktf'\n\nListTerraformIterator.fromMap(map: ComplexMap | {[ key: string ]: any} | {[ key: string ]: string} | {[ key: string ]: number} | {[ key: string ]: boolean})"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ListTerraformIterator.property.key",
            "displayName": "key",
            "id": "cdktf.ListTerraformIterator.property.key",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {
              "summary": "Returns the currenty entry in the list or set that is being iterated over.",
              "remarks": "For lists this is the same as `iterator.value`. If you need the index,\nuse count using the escape hatch:\nhttps://www.terraform.io/cdktf/concepts/resources#escape-hatch"
            },
            "usage": "public readonly key: any;"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.property.value",
            "displayName": "value",
            "id": "cdktf.ListTerraformIterator.property.value",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {
              "summary": "Returns the value of the current item iterated over."
            },
            "usage": "public readonly value: any;"
          }
        ],
        "fqn": "cdktf.ListTerraformIterator",
        "displayName": "ListTerraformIterator",
        "id": "cdktf.ListTerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.Manifest.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Manifest.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.Manifest.Initializer.parameter.version",
              "displayName": "version",
              "id": "cdktf.Manifest.Initializer.parameter.version",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.Manifest.Initializer.parameter.outdir",
              "displayName": "outdir",
              "id": "cdktf.Manifest.Initializer.parameter.outdir",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { Manifest } from 'cdktf'\n\nnew Manifest(version: string, outdir: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IManifest",
            "displayName": "IManifest",
            "id": "cdktf.IManifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.Manifest.buildManifest",
            "displayName": "buildManifest",
            "id": "cdktf.Manifest.buildManifest",
            "parameters": [],
            "docs": {},
            "usage": "public buildManifest(): IManifest"
          },
          {
            "fqn": "cdktf.Manifest.forStack",
            "displayName": "forStack",
            "id": "cdktf.Manifest.forStack",
            "parameters": [
              {
                "fqn": "cdktf.Manifest.forStack.parameter.stack",
                "displayName": "stack",
                "id": "cdktf.Manifest.forStack.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public forStack(stack: TerraformStack): StackManifest"
          },
          {
            "fqn": "cdktf.Manifest.writeToFile",
            "displayName": "writeToFile",
            "id": "cdktf.Manifest.writeToFile",
            "parameters": [],
            "docs": {},
            "usage": "public writeToFile(): void"
          }
        ],
        "staticMethods": [],
        "constants": [
          {
            "fqn": "cdktf.Manifest.property.fileName",
            "displayName": "fileName",
            "id": "cdktf.Manifest.property.fileName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fileName: string;",
            "const": true
          },
          {
            "fqn": "cdktf.Manifest.property.stackFileName",
            "displayName": "stackFileName",
            "id": "cdktf.Manifest.property.stackFileName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly stackFileName: string;",
            "const": true
          },
          {
            "fqn": "cdktf.Manifest.property.stacksFolder",
            "displayName": "stacksFolder",
            "id": "cdktf.Manifest.property.stacksFolder",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly stacksFolder: string;",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.Manifest.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.Manifest.property.outdir",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly outdir: string;"
          },
          {
            "fqn": "cdktf.Manifest.property.stacks",
            "displayName": "stacks",
            "id": "cdktf.Manifest.property.stacks",
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackManifest",
                      "displayName": "StackManifest",
                      "fqn": "cdktf.StackManifest",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly stacks: {[ key: string ]: StackManifest};"
          },
          {
            "fqn": "cdktf.Manifest.property.version",
            "displayName": "version",
            "id": "cdktf.Manifest.property.version",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly version: string;"
          }
        ],
        "fqn": "cdktf.Manifest",
        "displayName": "Manifest",
        "id": "cdktf.Manifest",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.MapTerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.MapTerraformIterator.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.MapTerraformIterator.Initializer.parameter.map",
              "displayName": "map",
              "id": "cdktf.MapTerraformIterator.Initializer.parameter.map",
              "type": {
                "formattingPattern": "% | % | % | % | % | % | % | %",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.StringMap",
                        "displayName": "StringMap",
                        "fqn": "cdktf.StringMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.NumberMap",
                        "displayName": "NumberMap",
                        "fqn": "cdktf.NumberMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.BooleanMap",
                        "displayName": "BooleanMap",
                        "fqn": "cdktf.BooleanMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.AnyMap",
                        "displayName": "AnyMap",
                        "fqn": "cdktf.AnyMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ComplexMap",
                        "displayName": "ComplexMap",
                        "fqn": "cdktf.ComplexMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "{[ key: string ]: %}",
                    "types": [
                      {
                        "formattingPattern": "any"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "{[ key: string ]: %}",
                    "types": [
                      {
                        "formattingPattern": "string"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "{[ key: string ]: %}",
                    "types": [
                      {
                        "formattingPattern": "number"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { MapTerraformIterator } from 'cdktf'\n\nnew MapTerraformIterator(map: StringMap | NumberMap | BooleanMap | AnyMap | ComplexMap | {[ key: string ]: any} | {[ key: string ]: string} | {[ key: string ]: number})"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.MapTerraformIterator.dynamic",
            "displayName": "dynamic",
            "id": "cdktf.MapTerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.dynamic.parameter.attributes",
                "displayName": "attributes",
                "id": "cdktf.MapTerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public dynamic(attributes: {[ key: string ]: any}): IResolvable"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getAny",
            "displayName": "getAny",
            "id": "cdktf.MapTerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getAny.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getAny(attribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getAnyMap",
            "displayName": "getAnyMap",
            "id": "cdktf.MapTerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getAnyMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getAnyMap(attribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.MapTerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getBoolean.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getBoolean(attribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getBooleanMap",
            "displayName": "getBooleanMap",
            "id": "cdktf.MapTerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getBooleanMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getBooleanMap(attribute: string): {[ key: string ]: boolean}"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getList",
            "displayName": "getList",
            "id": "cdktf.MapTerraformIterator.getList",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getList.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getList(attribute: string): string[]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getMap",
            "displayName": "getMap",
            "id": "cdktf.MapTerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getMap(attribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.MapTerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getNumber.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumber(attribute: string): number"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getNumberList",
            "displayName": "getNumberList",
            "id": "cdktf.MapTerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getNumberList.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumberList(attribute: string): number[]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getNumberMap",
            "displayName": "getNumberMap",
            "id": "cdktf.MapTerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getNumberMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumberMap(attribute: string): {[ key: string ]: number}"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getString",
            "displayName": "getString",
            "id": "cdktf.MapTerraformIterator.getString",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getString.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getString(attribute: string): string"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.getStringMap",
            "displayName": "getStringMap",
            "id": "cdktf.MapTerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.getStringMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getStringMap(attribute: string): {[ key: string ]: string}"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.MapTerraformIterator.fromList",
            "displayName": "fromList",
            "id": "cdktf.MapTerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.fromList.parameter.list",
                "displayName": "list",
                "id": "cdktf.MapTerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "% | % | % | % | % | % | % | % | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "number"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "% | %",
                          "types": [
                            {
                              "formattingPattern": "boolean"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "import { MapTerraformIterator } from 'cdktf'\n\nMapTerraformIterator.fromList(list: string[] | IResolvable | number[] | ComplexList | StringMapList | NumberMapList | BooleanMapList | AnyMapList | boolean | IResolvable[])"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.fromMap",
            "displayName": "fromMap",
            "id": "cdktf.MapTerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.fromMap.parameter.map",
                "displayName": "map",
                "id": "cdktf.MapTerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "% | % | % | % | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "number"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "boolean"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "import { MapTerraformIterator } from 'cdktf'\n\nMapTerraformIterator.fromMap(map: ComplexMap | {[ key: string ]: any} | {[ key: string ]: string} | {[ key: string ]: number} | {[ key: string ]: boolean})"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.MapTerraformIterator.property.key",
            "displayName": "key",
            "id": "cdktf.MapTerraformIterator.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Returns the key of the current entry in the map that is being iterated over."
            },
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.property.value",
            "displayName": "value",
            "id": "cdktf.MapTerraformIterator.property.value",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {
              "summary": "Returns the value of the current item iterated over."
            },
            "usage": "public readonly value: any;"
          }
        ],
        "fqn": "cdktf.MapTerraformIterator",
        "displayName": "MapTerraformIterator",
        "id": "cdktf.MapTerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.NamedCloudWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NamedCloudWorkspace.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.NamedCloudWorkspace.Initializer.parameter.name",
              "displayName": "name",
              "id": "cdktf.NamedCloudWorkspace.Initializer.parameter.name",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { NamedCloudWorkspace } from 'cdktf'\n\nnew NamedCloudWorkspace(name: string)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.NamedCloudWorkspace.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.NamedCloudWorkspace.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.NamedCloudWorkspace.property.name",
            "displayName": "name",
            "id": "cdktf.NamedCloudWorkspace.property.name",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly name: string;"
          }
        ],
        "fqn": "cdktf.NamedCloudWorkspace",
        "displayName": "NamedCloudWorkspace",
        "id": "cdktf.NamedCloudWorkspace",
        "docs": {
          "summary": "The name of a single Terraform Cloud workspace.",
          "remarks": "You will only be able to use the workspace specified in the configuration with this working directory, and cannot manage workspaces from the CLI (e.g. terraform workspace select or terraform workspace new)."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.NamedRemoteWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NamedRemoteWorkspace.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.NamedRemoteWorkspace.Initializer.parameter.name",
              "displayName": "name",
              "id": "cdktf.NamedRemoteWorkspace.Initializer.parameter.name",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { NamedRemoteWorkspace } from 'cdktf'\n\nnew NamedRemoteWorkspace(name: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.NamedRemoteWorkspace.property.name",
            "displayName": "name",
            "id": "cdktf.NamedRemoteWorkspace.property.name",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly name: string;"
          }
        ],
        "fqn": "cdktf.NamedRemoteWorkspace",
        "displayName": "NamedRemoteWorkspace",
        "id": "cdktf.NamedRemoteWorkspace",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.NumberMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NumberMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.NumberMap.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.NumberMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.NumberMap.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.NumberMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { NumberMap } from 'cdktf'\n\nnew NumberMap(terraformResource: IInterpolatingParent, terraformAttribute: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.NumberMap.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.NumberMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.NumberMap.lookup",
            "displayName": "lookup",
            "id": "cdktf.NumberMap.lookup",
            "parameters": [
              {
                "fqn": "cdktf.NumberMap.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.NumberMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public lookup(key: string): number"
          },
          {
            "fqn": "cdktf.NumberMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.NumberMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.NumberMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.NumberMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.NumberMap.toString",
            "displayName": "toString",
            "id": "cdktf.NumberMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.NumberMap.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.NumberMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.NumberMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.NumberMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.NumberMap",
        "displayName": "NumberMap",
        "id": "cdktf.NumberMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.NumberMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NumberMapList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.NumberMapList.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.NumberMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.NumberMapList.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.NumberMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.NumberMapList.Initializer.parameter.wrapsSet",
              "displayName": "wrapsSet",
              "id": "cdktf.NumberMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "boolean"
              },
              "docs": {}
            }
          ],
          "usage": "import { NumberMapList } from 'cdktf'\n\nnew NumberMapList(terraformResource: IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.NumberMapList.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.NumberMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.NumberMapList.get",
            "displayName": "get",
            "id": "cdktf.NumberMapList.get",
            "parameters": [
              {
                "fqn": "cdktf.NumberMapList.get.parameter.index",
                "displayName": "index",
                "id": "cdktf.NumberMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(index: number): NumberMap"
          },
          {
            "fqn": "cdktf.NumberMapList.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.NumberMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.NumberMapList.interpolationForAttribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.NumberMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(property: string): IResolvable"
          },
          {
            "fqn": "cdktf.NumberMapList.resolve",
            "displayName": "resolve",
            "id": "cdktf.NumberMapList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.NumberMapList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.NumberMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.NumberMapList.toString",
            "displayName": "toString",
            "id": "cdktf.NumberMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.NumberMapList.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.NumberMapList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.NumberMapList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.NumberMapList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.NumberMapList",
        "displayName": "NumberMapList",
        "id": "cdktf.NumberMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.PrefixedRemoteWorkspaces.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.PrefixedRemoteWorkspaces.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.PrefixedRemoteWorkspaces.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.PrefixedRemoteWorkspaces.Initializer.parameter.prefix",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { PrefixedRemoteWorkspaces } from 'cdktf'\n\nnew PrefixedRemoteWorkspaces(prefix: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.PrefixedRemoteWorkspaces.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.PrefixedRemoteWorkspaces.property.prefix",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly prefix: string;"
          }
        ],
        "fqn": "cdktf.PrefixedRemoteWorkspaces",
        "displayName": "PrefixedRemoteWorkspaces",
        "id": "cdktf.PrefixedRemoteWorkspaces",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.StringConcat.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringConcat.Initializer",
          "parameters": [],
          "usage": "import { StringConcat } from 'cdktf'\n\nnew StringConcat()"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IFragmentConcatenator",
            "displayName": "IFragmentConcatenator",
            "id": "cdktf.IFragmentConcatenator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.StringConcat.join",
            "displayName": "join",
            "id": "cdktf.StringConcat.join",
            "parameters": [
              {
                "fqn": "cdktf.StringConcat.join.parameter.left",
                "displayName": "left",
                "id": "cdktf.StringConcat.join.parameter.left",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.StringConcat.join.parameter.right",
                "displayName": "right",
                "id": "cdktf.StringConcat.join.parameter.right",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Concatenates string fragments."
            },
            "usage": "public join(left: any, right: any): any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.StringConcat",
        "displayName": "StringConcat",
        "id": "cdktf.StringConcat",
        "docs": {
          "summary": "Converts all fragments to strings and concats those.",
          "remarks": "Drops 'undefined's."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.StringMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.StringMap.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.StringMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.StringMap.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.StringMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "import { StringMap } from 'cdktf'\n\nnew StringMap(terraformResource: IInterpolatingParent, terraformAttribute: string)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.StringMap.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.StringMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.StringMap.lookup",
            "displayName": "lookup",
            "id": "cdktf.StringMap.lookup",
            "parameters": [
              {
                "fqn": "cdktf.StringMap.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.StringMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public lookup(key: string): string"
          },
          {
            "fqn": "cdktf.StringMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.StringMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.StringMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.StringMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.StringMap.toString",
            "displayName": "toString",
            "id": "cdktf.StringMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.StringMap.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.StringMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.StringMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.StringMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.StringMap",
        "displayName": "StringMap",
        "id": "cdktf.StringMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.StringMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringMapList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.StringMapList.Initializer.parameter.terraformResource",
              "displayName": "terraformResource",
              "id": "cdktf.StringMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.StringMapList.Initializer.parameter.terraformAttribute",
              "displayName": "terraformAttribute",
              "id": "cdktf.StringMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.StringMapList.Initializer.parameter.wrapsSet",
              "displayName": "wrapsSet",
              "id": "cdktf.StringMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "boolean"
              },
              "docs": {}
            }
          ],
          "usage": "import { StringMapList } from 'cdktf'\n\nnew StringMapList(terraformResource: IInterpolatingParent, terraformAttribute: string, wrapsSet: boolean)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.StringMapList.computeFqn",
            "displayName": "computeFqn",
            "id": "cdktf.StringMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "public computeFqn(): string"
          },
          {
            "fqn": "cdktf.StringMapList.get",
            "displayName": "get",
            "id": "cdktf.StringMapList.get",
            "parameters": [
              {
                "fqn": "cdktf.StringMapList.get.parameter.index",
                "displayName": "index",
                "id": "cdktf.StringMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public get(index: number): StringMap"
          },
          {
            "fqn": "cdktf.StringMapList.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.StringMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.StringMapList.interpolationForAttribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.StringMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(property: string): IResolvable"
          },
          {
            "fqn": "cdktf.StringMapList.resolve",
            "displayName": "resolve",
            "id": "cdktf.StringMapList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.StringMapList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.StringMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(_context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.StringMapList.toString",
            "displayName": "toString",
            "id": "cdktf.StringMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.StringMapList.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.StringMapList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          },
          {
            "fqn": "cdktf.StringMapList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.StringMapList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "fqn": "cdktf.StringMapList",
        "displayName": "StringMapList",
        "id": "cdktf.StringMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TaggedCloudWorkspaces.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TaggedCloudWorkspaces.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TaggedCloudWorkspaces.Initializer.parameter.tags",
              "displayName": "tags",
              "id": "cdktf.TaggedCloudWorkspaces.Initializer.parameter.tags",
              "type": {
                "formattingPattern": "%[]",
                "types": [
                  {
                    "formattingPattern": "string"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import { TaggedCloudWorkspaces } from 'cdktf'\n\nnew TaggedCloudWorkspaces(tags: string[])"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TaggedCloudWorkspaces.toTerraform",
            "displayName": "toTerraform",
            "id": "cdktf.TaggedCloudWorkspaces.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "public toTerraform(): any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TaggedCloudWorkspaces.property.tags",
            "displayName": "tags",
            "id": "cdktf.TaggedCloudWorkspaces.property.tags",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly tags: string[];"
          }
        ],
        "fqn": "cdktf.TaggedCloudWorkspaces",
        "displayName": "TaggedCloudWorkspaces",
        "id": "cdktf.TaggedCloudWorkspaces",
        "docs": {
          "summary": "A set of Terraform Cloud workspace tags.",
          "remarks": "You will be able to use this working directory with any workspaces that have all of the specified tags, and can use the terraform workspace commands to switch between them or create new workspaces. New workspaces will automatically have the specified tags. This option conflicts with name."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformIterator.Initializer",
          "parameters": [],
          "usage": "import { TerraformIterator } from 'cdktf'\n\nnew TerraformIterator()"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformIterator",
            "displayName": "ITerraformIterator",
            "id": "cdktf.ITerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformIterator.dynamic",
            "displayName": "dynamic",
            "id": "cdktf.TerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.dynamic.parameter.attributes",
                "displayName": "attributes",
                "id": "cdktf.TerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public dynamic(attributes: {[ key: string ]: any}): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformIterator.getAny",
            "displayName": "getAny",
            "id": "cdktf.TerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getAny.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getAny(attribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformIterator.getAnyMap",
            "displayName": "getAnyMap",
            "id": "cdktf.TerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getAnyMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getAnyMap(attribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.TerraformIterator.getBoolean",
            "displayName": "getBoolean",
            "id": "cdktf.TerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getBoolean.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getBoolean(attribute: string): IResolvable"
          },
          {
            "fqn": "cdktf.TerraformIterator.getBooleanMap",
            "displayName": "getBooleanMap",
            "id": "cdktf.TerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getBooleanMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getBooleanMap(attribute: string): {[ key: string ]: boolean}"
          },
          {
            "fqn": "cdktf.TerraformIterator.getList",
            "displayName": "getList",
            "id": "cdktf.TerraformIterator.getList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getList.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getList(attribute: string): string[]"
          },
          {
            "fqn": "cdktf.TerraformIterator.getMap",
            "displayName": "getMap",
            "id": "cdktf.TerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getMap(attribute: string): {[ key: string ]: any}"
          },
          {
            "fqn": "cdktf.TerraformIterator.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.TerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getNumber.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumber(attribute: string): number"
          },
          {
            "fqn": "cdktf.TerraformIterator.getNumberList",
            "displayName": "getNumberList",
            "id": "cdktf.TerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getNumberList.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumberList(attribute: string): number[]"
          },
          {
            "fqn": "cdktf.TerraformIterator.getNumberMap",
            "displayName": "getNumberMap",
            "id": "cdktf.TerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getNumberMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getNumberMap(attribute: string): {[ key: string ]: number}"
          },
          {
            "fqn": "cdktf.TerraformIterator.getString",
            "displayName": "getString",
            "id": "cdktf.TerraformIterator.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getString.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getString(attribute: string): string"
          },
          {
            "fqn": "cdktf.TerraformIterator.getStringMap",
            "displayName": "getStringMap",
            "id": "cdktf.TerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.getStringMap.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "public getStringMap(attribute: string): {[ key: string ]: string}"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformIterator.fromList",
            "displayName": "fromList",
            "id": "cdktf.TerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.fromList.parameter.list",
                "displayName": "list",
                "id": "cdktf.TerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "% | % | % | % | % | % | % | % | %",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "number"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "% | %",
                          "types": [
                            {
                              "formattingPattern": "boolean"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "import { TerraformIterator } from 'cdktf'\n\nTerraformIterator.fromList(list: string[] | IResolvable | number[] | ComplexList | StringMapList | NumberMapList | BooleanMapList | AnyMapList | boolean | IResolvable[])"
          },
          {
            "fqn": "cdktf.TerraformIterator.fromMap",
            "displayName": "fromMap",
            "id": "cdktf.TerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.fromMap.parameter.map",
                "displayName": "map",
                "id": "cdktf.TerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "% | % | % | % | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "number"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "{[ key: string ]: %}",
                      "types": [
                        {
                          "formattingPattern": "boolean"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "import { TerraformIterator } from 'cdktf'\n\nTerraformIterator.fromMap(map: ComplexMap | {[ key: string ]: any} | {[ key: string ]: string} | {[ key: string ]: number} | {[ key: string ]: boolean})"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.TerraformIterator",
        "displayName": "TerraformIterator",
        "id": "cdktf.TerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformSelf.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformSelf.Initializer",
          "parameters": [],
          "usage": "import { TerraformSelf } from 'cdktf'\n\nnew TerraformSelf()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformSelf.getAny",
            "displayName": "getAny",
            "id": "cdktf.TerraformSelf.getAny",
            "parameters": [
              {
                "fqn": "cdktf.TerraformSelf.getAny.parameter.key",
                "displayName": "key",
                "id": "cdktf.TerraformSelf.getAny.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getAny(\"hostPort\")`"
            },
            "usage": "import { TerraformSelf } from 'cdktf'\n\nTerraformSelf.getAny(key: string)"
          },
          {
            "fqn": "cdktf.TerraformSelf.getNumber",
            "displayName": "getNumber",
            "id": "cdktf.TerraformSelf.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.TerraformSelf.getNumber.parameter.key",
                "displayName": "key",
                "id": "cdktf.TerraformSelf.getNumber.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getNumber(\"hostPort\")`"
            },
            "usage": "import { TerraformSelf } from 'cdktf'\n\nTerraformSelf.getNumber(key: string)"
          },
          {
            "fqn": "cdktf.TerraformSelf.getString",
            "displayName": "getString",
            "id": "cdktf.TerraformSelf.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformSelf.getString.parameter.key",
                "displayName": "key",
                "id": "cdktf.TerraformSelf.getString.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getString(\"publicIp\")`"
            },
            "usage": "import { TerraformSelf } from 'cdktf'\n\nTerraformSelf.getString(key: string)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.TerraformSelf",
        "displayName": "TerraformSelf",
        "id": "cdktf.TerraformSelf",
        "docs": {
          "summary": "Expressions in connection blocks cannot refer to their parent resource by name.",
          "remarks": "References create dependencies, and referring to a resource by name within its own block would create a dependency cycle.\nInstead, expressions can use the self object, which represents the connection's parent resource and has all of that resource's attributes.\nFor example, use self.public_ip to reference an aws_instance's public_ip attribute."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.Testing.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Testing.Initializer",
          "parameters": [],
          "usage": "import { Testing } from 'cdktf'\n\nnew Testing()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Testing.app",
            "displayName": "app",
            "id": "cdktf.Testing.app",
            "parameters": [
              {
                "fqn": "cdktf.Testing.app.parameter.options",
                "displayName": "options",
                "id": "cdktf.Testing.app.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TestingAppOptions",
                      "displayName": "TestingAppOptions",
                      "fqn": "cdktf.TestingAppOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Returns an app for testing with the following properties: - Output directory is a temp dir."
            },
            "usage": "import { Testing } from 'cdktf'\n\nTesting.app(options?: TestingAppOptions)"
          },
          {
            "fqn": "cdktf.Testing.enableFutureFlags",
            "displayName": "enableFutureFlags",
            "id": "cdktf.Testing.enableFutureFlags",
            "parameters": [
              {
                "fqn": "cdktf.Testing.enableFutureFlags.parameter.app",
                "displayName": "app",
                "id": "cdktf.Testing.enableFutureFlags.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.enableFutureFlags(app: App)"
          },
          {
            "fqn": "cdktf.Testing.fakeCdktfJsonPath",
            "displayName": "fakeCdktfJsonPath",
            "id": "cdktf.Testing.fakeCdktfJsonPath",
            "parameters": [
              {
                "fqn": "cdktf.Testing.fakeCdktfJsonPath.parameter.app",
                "displayName": "app",
                "id": "cdktf.Testing.fakeCdktfJsonPath.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.fakeCdktfJsonPath(app: App)"
          },
          {
            "fqn": "cdktf.Testing.fullSynth",
            "displayName": "fullSynth",
            "id": "cdktf.Testing.fullSynth",
            "parameters": [
              {
                "fqn": "cdktf.Testing.fullSynth.parameter.stack",
                "displayName": "stack",
                "id": "cdktf.Testing.fullSynth.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.fullSynth(stack: TerraformStack)"
          },
          {
            "fqn": "cdktf.Testing.renderConstructTree",
            "displayName": "renderConstructTree",
            "id": "cdktf.Testing.renderConstructTree",
            "parameters": [
              {
                "fqn": "cdktf.Testing.renderConstructTree.parameter.construct",
                "displayName": "construct",
                "id": "cdktf.Testing.renderConstructTree.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.renderConstructTree(construct: IConstruct)"
          },
          {
            "fqn": "cdktf.Testing.setupJest",
            "displayName": "setupJest",
            "id": "cdktf.Testing.setupJest",
            "parameters": [],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.setupJest()"
          },
          {
            "fqn": "cdktf.Testing.stubVersion",
            "displayName": "stubVersion",
            "id": "cdktf.Testing.stubVersion",
            "parameters": [
              {
                "fqn": "cdktf.Testing.stubVersion.parameter.app",
                "displayName": "app",
                "id": "cdktf.Testing.stubVersion.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.stubVersion(app: App)"
          },
          {
            "fqn": "cdktf.Testing.synth",
            "displayName": "synth",
            "id": "cdktf.Testing.synth",
            "parameters": [
              {
                "fqn": "cdktf.Testing.synth.parameter.stack",
                "displayName": "stack",
                "id": "cdktf.Testing.synth.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.synth.parameter.runValidations",
                "displayName": "runValidations",
                "id": "cdktf.Testing.synth.parameter.runValidations",
                "optional": true,
                "type": {
                  "formattingPattern": "boolean"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Returns the Terraform synthesized JSON."
            },
            "usage": "import { Testing } from 'cdktf'\n\nTesting.synth(stack: TerraformStack, runValidations?: boolean)"
          },
          {
            "fqn": "cdktf.Testing.synthScope",
            "displayName": "synthScope",
            "id": "cdktf.Testing.synthScope",
            "parameters": [
              {
                "fqn": "cdktf.Testing.synthScope.parameter.fn",
                "displayName": "fn",
                "id": "cdktf.Testing.synthScope.parameter.fn",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IScopeCallback",
                      "displayName": "IScopeCallback",
                      "fqn": "cdktf.IScopeCallback",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.synthScope(fn: IScopeCallback)"
          },
          {
            "fqn": "cdktf.Testing.toBeValidTerraform",
            "displayName": "toBeValidTerraform",
            "id": "cdktf.Testing.toBeValidTerraform",
            "parameters": [
              {
                "fqn": "cdktf.Testing.toBeValidTerraform.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toBeValidTerraform.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.toBeValidTerraform(received: string)"
          },
          {
            "fqn": "cdktf.Testing.toHaveDataSource",
            "displayName": "toHaveDataSource",
            "id": "cdktf.Testing.toHaveDataSource",
            "parameters": [
              {
                "fqn": "cdktf.Testing.toHaveDataSource.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toHaveDataSource.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.toHaveDataSource.parameter.resourceType",
                "displayName": "resourceType",
                "id": "cdktf.Testing.toHaveDataSource.parameter.resourceType",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.toHaveDataSource(received: string, resourceType: string)"
          },
          {
            "fqn": "cdktf.Testing.toHaveDataSourceWithProperties",
            "displayName": "toHaveDataSourceWithProperties",
            "id": "cdktf.Testing.toHaveDataSourceWithProperties",
            "parameters": [
              {
                "fqn": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.resourceType",
                "displayName": "resourceType",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.resourceType",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.properties",
                "displayName": "properties",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.properties",
                "optional": true,
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.toHaveDataSourceWithProperties(received: string, resourceType: string, properties?: {[ key: string ]: any})"
          },
          {
            "fqn": "cdktf.Testing.toHaveResource",
            "displayName": "toHaveResource",
            "id": "cdktf.Testing.toHaveResource",
            "parameters": [
              {
                "fqn": "cdktf.Testing.toHaveResource.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toHaveResource.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.toHaveResource.parameter.resourceType",
                "displayName": "resourceType",
                "id": "cdktf.Testing.toHaveResource.parameter.resourceType",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.toHaveResource(received: string, resourceType: string)"
          },
          {
            "fqn": "cdktf.Testing.toHaveResourceWithProperties",
            "displayName": "toHaveResourceWithProperties",
            "id": "cdktf.Testing.toHaveResourceWithProperties",
            "parameters": [
              {
                "fqn": "cdktf.Testing.toHaveResourceWithProperties.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.toHaveResourceWithProperties.parameter.resourceType",
                "displayName": "resourceType",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.resourceType",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.toHaveResourceWithProperties.parameter.properties",
                "displayName": "properties",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.properties",
                "optional": true,
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { Testing } from 'cdktf'\n\nTesting.toHaveResourceWithProperties(received: string, resourceType: string, properties?: {[ key: string ]: any})"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Testing",
        "displayName": "Testing",
        "id": "cdktf.Testing",
        "docs": {
          "summary": "Testing utilities for cdktf applications."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.Token.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Token.Initializer",
          "parameters": [],
          "usage": "import { Token } from 'cdktf'\n\nnew Token()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Token.asAny",
            "displayName": "asAny",
            "id": "cdktf.Token.asAny",
            "parameters": [
              {
                "fqn": "cdktf.Token.asAny.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asAny.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a resolvable representation of the given value."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asAny(value: any)"
          },
          {
            "fqn": "cdktf.Token.asAnyMap",
            "displayName": "asAnyMap",
            "id": "cdktf.Token.asAnyMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.asAnyMap.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asAnyMap.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.asAnyMap.parameter.options",
                "displayName": "options",
                "id": "cdktf.Token.asAnyMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asAnyMap(value: any, options?: EncodingOptions)"
          },
          {
            "fqn": "cdktf.Token.asBooleanMap",
            "displayName": "asBooleanMap",
            "id": "cdktf.Token.asBooleanMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.asBooleanMap.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asBooleanMap.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.asBooleanMap.parameter.options",
                "displayName": "options",
                "id": "cdktf.Token.asBooleanMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asBooleanMap(value: any, options?: EncodingOptions)"
          },
          {
            "fqn": "cdktf.Token.asList",
            "displayName": "asList",
            "id": "cdktf.Token.asList",
            "parameters": [
              {
                "fqn": "cdktf.Token.asList.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asList.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.asList.parameter.options",
                "displayName": "options",
                "id": "cdktf.Token.asList.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible list representation of this token."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asList(value: any, options?: EncodingOptions)"
          },
          {
            "fqn": "cdktf.Token.asMap",
            "displayName": "asMap",
            "id": "cdktf.Token.asMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.asMap.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asMap.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.asMap.parameter.mapValue",
                "displayName": "mapValue",
                "id": "cdktf.Token.asMap.parameter.mapValue",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.asMap.parameter.options",
                "displayName": "options",
                "id": "cdktf.Token.asMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asMap(value: any, mapValue: any, options?: EncodingOptions)"
          },
          {
            "fqn": "cdktf.Token.asNumber",
            "displayName": "asNumber",
            "id": "cdktf.Token.asNumber",
            "parameters": [
              {
                "fqn": "cdktf.Token.asNumber.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asNumber.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible number representation of this token."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asNumber(value: any)"
          },
          {
            "fqn": "cdktf.Token.asNumberList",
            "displayName": "asNumberList",
            "id": "cdktf.Token.asNumberList",
            "parameters": [
              {
                "fqn": "cdktf.Token.asNumberList.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asNumberList.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible list representation of this token."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asNumberList(value: any)"
          },
          {
            "fqn": "cdktf.Token.asNumberMap",
            "displayName": "asNumberMap",
            "id": "cdktf.Token.asNumberMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.asNumberMap.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asNumberMap.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.asNumberMap.parameter.options",
                "displayName": "options",
                "id": "cdktf.Token.asNumberMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asNumberMap(value: any, options?: EncodingOptions)"
          },
          {
            "fqn": "cdktf.Token.asString",
            "displayName": "asString",
            "id": "cdktf.Token.asString",
            "parameters": [
              {
                "fqn": "cdktf.Token.asString.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asString.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.asString.parameter.options",
                "displayName": "options",
                "id": "cdktf.Token.asString.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible string representation of this token.",
              "remarks": "If the Token is initialized with a literal, the stringified value of the\nliteral is returned. Otherwise, a special quoted string representation\nof the Token is returned that can be embedded into other strings.\n\nStrings with quoted Tokens in them can be restored back into\ncomplex values with the Tokens restored by calling `resolve()`\non the string."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asString(value: any, options?: EncodingOptions)"
          },
          {
            "fqn": "cdktf.Token.asStringMap",
            "displayName": "asStringMap",
            "id": "cdktf.Token.asStringMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.asStringMap.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asStringMap.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.asStringMap.parameter.options",
                "displayName": "options",
                "id": "cdktf.Token.asStringMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.asStringMap(value: any, options?: EncodingOptions)"
          },
          {
            "fqn": "cdktf.Token.isUnresolved",
            "displayName": "isUnresolved",
            "id": "cdktf.Token.isUnresolved",
            "parameters": [
              {
                "fqn": "cdktf.Token.isUnresolved.parameter.obj",
                "displayName": "obj",
                "id": "cdktf.Token.isUnresolved.parameter.obj",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "The object to test."
                }
              }
            ],
            "docs": {
              "summary": "Returns true if obj represents an unresolved value.",
              "remarks": "One of these must be true:\n\n- `obj` is an IResolvable\n- `obj` is a string containing at least one encoded `IResolvable`\n- `obj` is either an encoded number or list\n\nThis does NOT recurse into lists or objects to see if they\ncontaining resolvables."
            },
            "usage": "import { Token } from 'cdktf'\n\nToken.isUnresolved(obj: any)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.Token.property.ANY_MAP_TOKEN_VALUE",
            "displayName": "ANY_MAP_TOKEN_VALUE",
            "id": "cdktf.Token.property.ANY_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Any map token representation."
            },
            "usage": "public readonly ANY_MAP_TOKEN_VALUE: string;",
            "const": true
          },
          {
            "fqn": "cdktf.Token.property.NUMBER_MAP_TOKEN_VALUE",
            "displayName": "NUMBER_MAP_TOKEN_VALUE",
            "id": "cdktf.Token.property.NUMBER_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "Number Map token value representation."
            },
            "usage": "public readonly NUMBER_MAP_TOKEN_VALUE: number;",
            "const": true
          },
          {
            "fqn": "cdktf.Token.property.STRING_MAP_TOKEN_VALUE",
            "displayName": "STRING_MAP_TOKEN_VALUE",
            "id": "cdktf.Token.property.STRING_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "String Map token value representation."
            },
            "usage": "public readonly STRING_MAP_TOKEN_VALUE: string;",
            "const": true
          }
        ],
        "properties": [],
        "fqn": "cdktf.Token",
        "displayName": "Token",
        "id": "cdktf.Token",
        "docs": {
          "summary": "Represents a special or lazily-evaluated value.",
          "remarks": "Can be used to delay evaluation of a certain value in case, for example,\nthat it requires some context or late-bound data. Can also be used to\nmark values that need special processing at document rendering time.\n\nTokens can be embedded into strings while retaining their original\nsemantics."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.Tokenization.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Tokenization.Initializer",
          "parameters": [],
          "usage": "import { Tokenization } from 'cdktf'\n\nnew Tokenization()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Tokenization.isResolvable",
            "displayName": "isResolvable",
            "id": "cdktf.Tokenization.isResolvable",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.isResolvable.parameter.obj",
                "displayName": "obj",
                "id": "cdktf.Tokenization.isResolvable.parameter.obj",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return whether the given object is an IResolvable object.",
              "remarks": "This is different from Token.isUnresolved() which will also check for\nencoded Tokens, whereas this method will only do a type check on the given\nobject."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.isResolvable(obj: any)"
          },
          {
            "fqn": "cdktf.Tokenization.resolve",
            "displayName": "resolve",
            "id": "cdktf.Tokenization.resolve",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.resolve.parameter.obj",
                "displayName": "obj",
                "id": "cdktf.Tokenization.resolve.parameter.obj",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "The object to resolve."
                }
              },
              {
                "fqn": "cdktf.Tokenization.resolve.parameter.options",
                "displayName": "options",
                "id": "cdktf.Tokenization.resolve.parameter.options",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ResolveOptions",
                      "displayName": "ResolveOptions",
                      "fqn": "cdktf.ResolveOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "Prefix key path components for diagnostics."
                }
              }
            ],
            "docs": {
              "summary": "Resolves an object by evaluating all tokens and removing any undefined or empty objects or arrays.",
              "remarks": "Values can only be primitives, arrays or tokens. Other objects (i.e. with methods) will be rejected."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.resolve(obj: any, options: ResolveOptions)"
          },
          {
            "fqn": "cdktf.Tokenization.reverse",
            "displayName": "reverse",
            "id": "cdktf.Tokenization.reverse",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverse.parameter.x",
                "displayName": "x",
                "id": "cdktf.Tokenization.reverse.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Reverse any value into Resolvables, if possible."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.reverse(x: any)"
          },
          {
            "fqn": "cdktf.Tokenization.reverseList",
            "displayName": "reverseList",
            "id": "cdktf.Tokenization.reverseList",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverseList.parameter.l",
                "displayName": "l",
                "id": "cdktf.Tokenization.reverseList.parameter.l",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a list."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.reverseList(l: string[])"
          },
          {
            "fqn": "cdktf.Tokenization.reverseMap",
            "displayName": "reverseMap",
            "id": "cdktf.Tokenization.reverseMap",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverseMap.parameter.m",
                "displayName": "m",
                "id": "cdktf.Tokenization.reverseMap.parameter.m",
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a map."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.reverseMap(m: {[ key: string ]: any})"
          },
          {
            "fqn": "cdktf.Tokenization.reverseNumber",
            "displayName": "reverseNumber",
            "id": "cdktf.Tokenization.reverseNumber",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverseNumber.parameter.n",
                "displayName": "n",
                "id": "cdktf.Tokenization.reverseNumber.parameter.n",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a number."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.reverseNumber(n: number)"
          },
          {
            "fqn": "cdktf.Tokenization.reverseNumberList",
            "displayName": "reverseNumberList",
            "id": "cdktf.Tokenization.reverseNumberList",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverseNumberList.parameter.l",
                "displayName": "l",
                "id": "cdktf.Tokenization.reverseNumberList.parameter.l",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "number"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a list."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.reverseNumberList(l: number[])"
          },
          {
            "fqn": "cdktf.Tokenization.reverseString",
            "displayName": "reverseString",
            "id": "cdktf.Tokenization.reverseString",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverseString.parameter.s",
                "displayName": "s",
                "id": "cdktf.Tokenization.reverseString.parameter.s",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a string potentially containing encoded tokens."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.reverseString(s: string)"
          },
          {
            "fqn": "cdktf.Tokenization.stringifyNumber",
            "displayName": "stringifyNumber",
            "id": "cdktf.Tokenization.stringifyNumber",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.stringifyNumber.parameter.x",
                "displayName": "x",
                "id": "cdktf.Tokenization.stringifyNumber.parameter.x",
                "type": {
                  "formattingPattern": "number"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Stringify a number directly or lazily if it's a Token.",
              "remarks": "If it is an object (i.e., { Ref: 'SomeLogicalId' }), return it as-is."
            },
            "usage": "import { Tokenization } from 'cdktf'\n\nTokenization.stringifyNumber(x: number)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Tokenization",
        "displayName": "Tokenization",
        "id": "cdktf.Tokenization",
        "docs": {
          "summary": "Less oft-needed functions to manipulate Tokens."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.TokenizedStringFragments.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TokenizedStringFragments.Initializer",
          "parameters": [],
          "usage": "import { TokenizedStringFragments } from 'cdktf'\n\nnew TokenizedStringFragments()"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TokenizedStringFragments.addIntrinsic",
            "displayName": "addIntrinsic",
            "id": "cdktf.TokenizedStringFragments.addIntrinsic",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.addIntrinsic.parameter.value",
                "displayName": "value",
                "id": "cdktf.TokenizedStringFragments.addIntrinsic.parameter.value",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "the intrinsic value to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds an intrinsic fragment."
            },
            "usage": "public addIntrinsic(value: any): void"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.addLiteral",
            "displayName": "addLiteral",
            "id": "cdktf.TokenizedStringFragments.addLiteral",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.addLiteral.parameter.lit",
                "displayName": "lit",
                "id": "cdktf.TokenizedStringFragments.addLiteral.parameter.lit",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {
                  "summary": "the literal to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds a literal fragment."
            },
            "usage": "public addLiteral(lit: any): void"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.addToken",
            "displayName": "addToken",
            "id": "cdktf.TokenizedStringFragments.addToken",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.addToken.parameter.token",
                "displayName": "token",
                "id": "cdktf.TokenizedStringFragments.addToken.parameter.token",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "the token to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds a token fragment."
            },
            "usage": "public addToken(token: IResolvable): void"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.join",
            "displayName": "join",
            "id": "cdktf.TokenizedStringFragments.join",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.join.parameter.concat",
                "displayName": "concat",
                "id": "cdktf.TokenizedStringFragments.join.parameter.concat",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IFragmentConcatenator",
                      "displayName": "IFragmentConcatenator",
                      "fqn": "cdktf.IFragmentConcatenator",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Combine the string fragments using the given joiner.",
              "remarks": "If there are any"
            },
            "usage": "public join(concat: IFragmentConcatenator): any"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.mapTokens",
            "displayName": "mapTokens",
            "id": "cdktf.TokenizedStringFragments.mapTokens",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.mapTokens.parameter.mapper",
                "displayName": "mapper",
                "id": "cdktf.TokenizedStringFragments.mapTokens.parameter.mapper",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITokenMapper",
                      "displayName": "ITokenMapper",
                      "fqn": "cdktf.ITokenMapper",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Apply a transformation function to all tokens in the string."
            },
            "usage": "public mapTokens(mapper: ITokenMapper): TokenizedStringFragments"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TokenizedStringFragments.property.firstValue",
            "displayName": "firstValue",
            "id": "cdktf.TokenizedStringFragments.property.firstValue",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {
              "summary": "Returns the first value."
            },
            "usage": "public readonly firstValue: any;"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.intrinsic",
            "displayName": "intrinsic",
            "id": "cdktf.TokenizedStringFragments.property.intrinsic",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all intrinsic fragments from this string."
            },
            "usage": "public readonly intrinsic: IResolvable[];"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.length",
            "displayName": "length",
            "id": "cdktf.TokenizedStringFragments.property.length",
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "Returns the number of fragments."
            },
            "usage": "public readonly length: number;"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.literals",
            "displayName": "literals",
            "id": "cdktf.TokenizedStringFragments.property.literals",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all literals from this string."
            },
            "usage": "public readonly literals: IResolvable[];"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.tokens",
            "displayName": "tokens",
            "id": "cdktf.TokenizedStringFragments.property.tokens",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all Tokens from this string."
            },
            "usage": "public readonly tokens: IResolvable[];"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.firstToken",
            "displayName": "firstToken",
            "id": "cdktf.TokenizedStringFragments.property.firstToken",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "Returns the first token."
            },
            "usage": "public readonly firstToken: IResolvable;"
          }
        ],
        "fqn": "cdktf.TokenizedStringFragments",
        "displayName": "TokenizedStringFragments",
        "id": "cdktf.TokenizedStringFragments",
        "docs": {
          "summary": "Fragments of a concatenated string containing stringified Tokens."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.VariableType.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.VariableType.Initializer",
          "parameters": [],
          "usage": "import { VariableType } from 'cdktf'\n\nnew VariableType()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.VariableType.list",
            "displayName": "list",
            "id": "cdktf.VariableType.list",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.list.parameter.type",
                "displayName": "type",
                "id": "cdktf.VariableType.list.parameter.type",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { VariableType } from 'cdktf'\n\nVariableType.list(type: string)"
          },
          {
            "fqn": "cdktf.VariableType.map",
            "displayName": "map",
            "id": "cdktf.VariableType.map",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.map.parameter.type",
                "displayName": "type",
                "id": "cdktf.VariableType.map.parameter.type",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { VariableType } from 'cdktf'\n\nVariableType.map(type: string)"
          },
          {
            "fqn": "cdktf.VariableType.object",
            "displayName": "object",
            "id": "cdktf.VariableType.object",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.object.parameter.attributes",
                "displayName": "attributes",
                "id": "cdktf.VariableType.object.parameter.attributes",
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { VariableType } from 'cdktf'\n\nVariableType.object(attributes: {[ key: string ]: string})"
          },
          {
            "fqn": "cdktf.VariableType.set",
            "displayName": "set",
            "id": "cdktf.VariableType.set",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.set.parameter.type",
                "displayName": "type",
                "id": "cdktf.VariableType.set.parameter.type",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { VariableType } from 'cdktf'\n\nVariableType.set(type: string)"
          },
          {
            "fqn": "cdktf.VariableType.tuple",
            "displayName": "tuple",
            "id": "cdktf.VariableType.tuple",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.tuple.parameter.elements",
                "displayName": "elements",
                "id": "cdktf.VariableType.tuple.parameter.elements",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import { VariableType } from 'cdktf'\n\nVariableType.tuple(elements: string)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.VariableType.property.ANY",
            "displayName": "ANY",
            "id": "cdktf.VariableType.property.ANY",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly ANY: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.BOOL",
            "displayName": "BOOL",
            "id": "cdktf.VariableType.property.BOOL",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly BOOL: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.LIST",
            "displayName": "LIST",
            "id": "cdktf.VariableType.property.LIST",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly LIST: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.LIST_BOOL",
            "displayName": "LIST_BOOL",
            "id": "cdktf.VariableType.property.LIST_BOOL",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly LIST_BOOL: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.LIST_NUMBER",
            "displayName": "LIST_NUMBER",
            "id": "cdktf.VariableType.property.LIST_NUMBER",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly LIST_NUMBER: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.LIST_STRING",
            "displayName": "LIST_STRING",
            "id": "cdktf.VariableType.property.LIST_STRING",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly LIST_STRING: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.MAP",
            "displayName": "MAP",
            "id": "cdktf.VariableType.property.MAP",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly MAP: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.MAP_BOOL",
            "displayName": "MAP_BOOL",
            "id": "cdktf.VariableType.property.MAP_BOOL",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly MAP_BOOL: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.MAP_NUMBER",
            "displayName": "MAP_NUMBER",
            "id": "cdktf.VariableType.property.MAP_NUMBER",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly MAP_NUMBER: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.MAP_STRING",
            "displayName": "MAP_STRING",
            "id": "cdktf.VariableType.property.MAP_STRING",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly MAP_STRING: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.NUMBER",
            "displayName": "NUMBER",
            "id": "cdktf.VariableType.property.NUMBER",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly NUMBER: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.SET",
            "displayName": "SET",
            "id": "cdktf.VariableType.property.SET",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly SET: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.SET_BOOL",
            "displayName": "SET_BOOL",
            "id": "cdktf.VariableType.property.SET_BOOL",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly SET_BOOL: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.SET_NUMBER",
            "displayName": "SET_NUMBER",
            "id": "cdktf.VariableType.property.SET_NUMBER",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly SET_NUMBER: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.SET_STRING",
            "displayName": "SET_STRING",
            "id": "cdktf.VariableType.property.SET_STRING",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly SET_STRING: string;",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.STRING",
            "displayName": "STRING",
            "id": "cdktf.VariableType.property.STRING",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly STRING: string;",
            "const": true
          }
        ],
        "properties": [],
        "fqn": "cdktf.VariableType",
        "displayName": "VariableType",
        "id": "cdktf.VariableType",
        "docs": {}
      }
    ],
    "structs": [
      {
        "fqn": "cdktf.AppOptions",
        "displayName": "AppOptions",
        "id": "cdktf.AppOptions",
        "properties": [
          {
            "fqn": "cdktf.AppOptions.property.context",
            "displayName": "context",
            "id": "cdktf.AppOptions.property.context",
            "optional": true,
            "default": "- no additional context",
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {
              "summary": "Additional context values for the application.",
              "remarks": "Context set by the CLI or the `context` key in `cdktf.json` has precedence.\n\nContext can be read from any construct using `node.getContext(key)`."
            },
            "usage": "public readonly context: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.AppOptions.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.AppOptions.property.outdir",
            "optional": true,
            "default": "- CDKTF_OUTDIR if defined, otherwise \"cdktf.out\"",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The directory to output Terraform resources."
            },
            "usage": "public readonly outdir: string;"
          },
          {
            "fqn": "cdktf.AppOptions.property.skipValidation",
            "displayName": "skipValidation",
            "id": "cdktf.AppOptions.property.skipValidation",
            "optional": true,
            "default": "- false",
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "Whether to skip the validation during synthesis of the app."
            },
            "usage": "public readonly skipValidation: boolean;"
          },
          {
            "fqn": "cdktf.AppOptions.property.stackTraces",
            "displayName": "stackTraces",
            "id": "cdktf.AppOptions.property.stackTraces",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly stackTraces: boolean;"
          }
        ],
        "docs": {},
        "usage": "import { AppOptions } from 'cdktf'\n\nconst appOptions: AppOptions = { ... }"
      },
      {
        "fqn": "cdktf.ArtifactoryBackendProps",
        "displayName": "ArtifactoryBackendProps",
        "id": "cdktf.ArtifactoryBackendProps",
        "properties": [
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.ArtifactoryBackendProps.property.password",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The password."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.repo",
            "displayName": "repo",
            "id": "cdktf.ArtifactoryBackendProps.property.repo",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The repository name."
            },
            "usage": "public readonly repo: string;"
          },
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.subpath",
            "displayName": "subpath",
            "id": "cdktf.ArtifactoryBackendProps.property.subpath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - Path within the repository."
            },
            "usage": "public readonly subpath: string;"
          },
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.url",
            "displayName": "url",
            "id": "cdktf.ArtifactoryBackendProps.property.url",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The URL.",
              "remarks": "Note that this is the base url to artifactory not the full repo and subpath."
            },
            "usage": "public readonly url: string;"
          },
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.username",
            "displayName": "username",
            "id": "cdktf.ArtifactoryBackendProps.property.username",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The username."
            },
            "usage": "public readonly username: string;"
          }
        ],
        "docs": {
          "summary": "Stores the state as an artifact in a given repository in Artifactory.",
          "remarks": "Generic HTTP repositories are supported, and state from different configurations\nmay be kept at different subpaths within the repository.\n\nNote: The URL must include the path to the Artifactory installation.\nIt will likely end in /artifactory.\n\nThis backend does not support state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/artifactory"
        },
        "usage": "import { ArtifactoryBackendProps } from 'cdktf'\n\nconst artifactoryBackendProps: ArtifactoryBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.AzurermBackendProps",
        "displayName": "AzurermBackendProps",
        "id": "cdktf.AzurermBackendProps",
        "properties": [
          {
            "fqn": "cdktf.AzurermBackendProps.property.containerName",
            "displayName": "containerName",
            "id": "cdktf.AzurermBackendProps.property.containerName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Container within the Storage Account."
            },
            "usage": "public readonly containerName: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.AzurermBackendProps.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
            },
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.storageAccountName",
            "displayName": "storageAccountName",
            "id": "cdktf.AzurermBackendProps.property.storageAccountName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Account."
            },
            "usage": "public readonly storageAccountName: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.accessKey",
            "displayName": "accessKey",
            "id": "cdktf.AzurermBackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable."
            },
            "usage": "public readonly accessKey: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.clientCertificatePassword",
            "displayName": "clientCertificatePassword",
            "id": "cdktf.AzurermBackendProps.property.clientCertificatePassword",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable."
            },
            "usage": "public readonly clientCertificatePassword: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.clientCertificatePath",
            "displayName": "clientCertificatePath",
            "id": "cdktf.AzurermBackendProps.property.clientCertificatePath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable."
            },
            "usage": "public readonly clientCertificatePath: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.clientId",
            "displayName": "clientId",
            "id": "cdktf.AzurermBackendProps.property.clientId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Client ID of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable."
            },
            "usage": "public readonly clientId: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.clientSecret",
            "displayName": "clientSecret",
            "id": "cdktf.AzurermBackendProps.property.clientSecret",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Client Secret of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable."
            },
            "usage": "public readonly clientSecret: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.AzurermBackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable.",
              "remarks": "NOTE: An endpoint should only be configured when using Azure Stack."
            },
            "usage": "public readonly endpoint: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.environment",
            "displayName": "environment",
            "id": "cdktf.AzurermBackendProps.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Azure Environment which should be used.",
              "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\n  Possible values are public, china, german, stack and usgovernment. Defaults to public."
            },
            "usage": "public readonly environment: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.msiEndpoint",
            "displayName": "msiEndpoint",
            "id": "cdktf.AzurermBackendProps.property.msiEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified.",
              "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable."
            },
            "usage": "public readonly msiEndpoint: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.oidcRequestToken",
            "displayName": "oidcRequestToken",
            "id": "cdktf.AzurermBackendProps.property.oidcRequestToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The bearer token for the request to the OIDC provider.",
              "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables."
            },
            "usage": "public readonly oidcRequestToken: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.oidcRequestUrl",
            "displayName": "oidcRequestUrl",
            "id": "cdktf.AzurermBackendProps.property.oidcRequestUrl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The URL for the OIDC provider from which to request an ID token.",
              "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables."
            },
            "usage": "public readonly oidcRequestUrl: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.resourceGroupName",
            "displayName": "resourceGroupName",
            "id": "cdktf.AzurermBackendProps.property.resourceGroupName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
            },
            "usage": "public readonly resourceGroupName: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.sasToken",
            "displayName": "sasToken",
            "id": "cdktf.AzurermBackendProps.property.sasToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The SAS Token used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable."
            },
            "usage": "public readonly sasToken: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.snapshot",
            "displayName": "snapshot",
            "id": "cdktf.AzurermBackendProps.property.snapshot",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?",
              "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable."
            },
            "usage": "public readonly snapshot: boolean;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.subscriptionId",
            "displayName": "subscriptionId",
            "id": "cdktf.AzurermBackendProps.property.subscriptionId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Subscription ID in which the Storage Account exists.",
              "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable."
            },
            "usage": "public readonly subscriptionId: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.tenantId",
            "displayName": "tenantId",
            "id": "cdktf.AzurermBackendProps.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Tenant ID in which the Subscription exists.",
              "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable."
            },
            "usage": "public readonly tenantId: string;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.useAzureadAuth",
            "displayName": "useAzureadAuth",
            "id": "cdktf.AzurermBackendProps.property.useAzureadAuth",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned."
            },
            "usage": "public readonly useAzureadAuth: boolean;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.useMicrosoftGraph",
            "displayName": "useMicrosoftGraph",
            "id": "cdktf.AzurermBackendProps.property.useMicrosoftGraph",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?",
              "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL."
            },
            "usage": "public readonly useMicrosoftGraph: boolean;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.useMsi",
            "displayName": "useMsi",
            "id": "cdktf.AzurermBackendProps.property.useMsi",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should Managed Service Identity authentication be used?",
              "remarks": "This can also be sourced from the ARM_USE_MSI environment variable."
            },
            "usage": "public readonly useMsi: boolean;"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.useOidc",
            "displayName": "useOidc",
            "id": "cdktf.AzurermBackendProps.property.useOidc",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable.",
              "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default)."
            },
            "usage": "public readonly useOidc: boolean;"
          }
        ],
        "docs": {
          "summary": "Stores the state as a Blob with the given Key within the Blob Container within the Blob Storage Account.",
          "remarks": "This backend supports state locking and consistency checking\nwith Azure Blob Storage native capabilities.\n\nNote: By default the Azure Backend uses ADAL for authentication which is deprecated\nin favour of MSAL - MSAL can be used by setting use_microsoft_graph to true.\nThe default for this will change in Terraform 1.2,\nso that MSAL authentication is used by default.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/azurerm"
        },
        "usage": "import { AzurermBackendProps } from 'cdktf'\n\nconst azurermBackendProps: AzurermBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.CloudBackendProps",
        "displayName": "CloudBackendProps",
        "id": "cdktf.CloudBackendProps",
        "properties": [
          {
            "fqn": "cdktf.CloudBackendProps.property.organization",
            "displayName": "organization",
            "id": "cdktf.CloudBackendProps.property.organization",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The name of the organization containing the workspace(s) the current configuration should use."
            },
            "usage": "public readonly organization: string;"
          },
          {
            "fqn": "cdktf.CloudBackendProps.property.workspaces",
            "displayName": "workspaces",
            "id": "cdktf.CloudBackendProps.property.workspaces",
            "type": {
              "formattingPattern": "% | %",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.NamedCloudWorkspace",
                      "displayName": "NamedCloudWorkspace",
                      "fqn": "cdktf.NamedCloudWorkspace",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TaggedCloudWorkspaces",
                      "displayName": "TaggedCloudWorkspaces",
                      "fqn": "cdktf.TaggedCloudWorkspaces",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "A nested block that specifies which remote Terraform Cloud workspaces to use for the current configuration.",
              "remarks": "The workspaces block must contain exactly one of the following arguments, each denoting a strategy for how workspaces should be mapped:"
            },
            "usage": "public readonly workspaces: NamedCloudWorkspace | TaggedCloudWorkspaces;"
          },
          {
            "fqn": "cdktf.CloudBackendProps.property.hostname",
            "displayName": "hostname",
            "id": "cdktf.CloudBackendProps.property.hostname",
            "optional": true,
            "default": "app.terraform.io",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The hostname of a Terraform Enterprise installation, if using Terraform Enterprise."
            },
            "usage": "public readonly hostname: string;"
          },
          {
            "fqn": "cdktf.CloudBackendProps.property.token",
            "displayName": "token",
            "id": "cdktf.CloudBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The token used to authenticate with Terraform Cloud.",
              "remarks": "We recommend omitting the token from the configuration, and instead using terraform login or manually configuring credentials in the CLI config file."
            },
            "usage": "public readonly token: string;"
          }
        ],
        "docs": {
          "summary": "The Cloud Backend synthesizes a {@link https://www.terraform.io/cli/cloud/settings#the-cloud-block cloud block}. The cloud block is a nested block within the top-level terraform settings block. It specifies which Terraform Cloud workspaces to use for the current working directory. The cloud block only affects Terraform CLI's behavior. When Terraform Cloud uses a configuration that contains a cloud block - for example, when a workspace is configured to use a VCS provider directly - it ignores the block and behaves according to its own workspace settings.",
          "remarks": "https://www.terraform.io/cli/cloud/settings#arguments"
        },
        "usage": "import { CloudBackendProps } from 'cdktf'\n\nconst cloudBackendProps: CloudBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.ConsulBackendProps",
        "displayName": "ConsulBackendProps",
        "id": "cdktf.ConsulBackendProps",
        "properties": [
          {
            "fqn": "cdktf.ConsulBackendProps.property.accessToken",
            "displayName": "accessToken",
            "id": "cdktf.ConsulBackendProps.property.accessToken",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) Access token."
            },
            "usage": "public readonly accessToken: string;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.path",
            "displayName": "path",
            "id": "cdktf.ConsulBackendProps.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) Path in the Consul KV store."
            },
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.address",
            "displayName": "address",
            "id": "cdktf.ConsulBackendProps.property.address",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port.",
              "remarks": "Defaults to the local agent HTTP listener."
            },
            "usage": "public readonly address: string;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.caFile",
            "displayName": "caFile",
            "id": "cdktf.ConsulBackendProps.property.caFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
            },
            "usage": "public readonly caFile: string;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.certFile",
            "displayName": "certFile",
            "id": "cdktf.ConsulBackendProps.property.certFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;",
              "remarks": "requires use of key_file."
            },
            "usage": "public readonly certFile: string;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.datacenter",
            "displayName": "datacenter",
            "id": "cdktf.ConsulBackendProps.property.datacenter",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The datacenter to use.",
              "remarks": "Defaults to that of the agent."
            },
            "usage": "public readonly datacenter: string;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.gzip",
            "displayName": "gzip",
            "id": "cdktf.ConsulBackendProps.property.gzip",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
            },
            "usage": "public readonly gzip: boolean;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.httpAuth",
            "displayName": "httpAuth",
            "id": "cdktf.ConsulBackendProps.property.httpAuth",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
            },
            "usage": "public readonly httpAuth: string;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.keyFile",
            "displayName": "keyFile",
            "id": "cdktf.ConsulBackendProps.property.keyFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
            },
            "usage": "public readonly keyFile: string;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.lock",
            "displayName": "lock",
            "id": "cdktf.ConsulBackendProps.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) false to disable locking.",
              "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking."
            },
            "usage": "public readonly lock: boolean;"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.scheme",
            "displayName": "scheme",
            "id": "cdktf.ConsulBackendProps.property.scheme",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https.",
              "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true."
            },
            "usage": "public readonly scheme: string;"
          }
        ],
        "docs": {
          "summary": "Stores the state in the Consul KV store at a given path. This backend supports state locking.",
          "remarks": "Read more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/consul"
        },
        "usage": "import { ConsulBackendProps } from 'cdktf'\n\nconst consulBackendProps: ConsulBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.CosBackendProps",
        "displayName": "CosBackendProps",
        "id": "cdktf.CosBackendProps",
        "properties": [
          {
            "fqn": "cdktf.CosBackendProps.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.CosBackendProps.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the COS bucket.",
              "remarks": "You shall manually create it first."
            },
            "usage": "public readonly bucket: string;"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.acl",
            "displayName": "acl",
            "id": "cdktf.CosBackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read.",
              "remarks": "Defaults to private."
            },
            "usage": "public readonly acl: string;"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.CosBackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Whether to enable server side encryption of the state file.",
              "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file."
            },
            "usage": "public readonly encrypt: boolean;"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.CosBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path for saving the state file in bucket.",
              "remarks": "Defaults to terraform.tfstate."
            },
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.CosBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The directory for saving the state file in bucket.",
              "remarks": "Default to \"env:\"."
            },
            "usage": "public readonly prefix: string;"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.region",
            "displayName": "region",
            "id": "cdktf.CosBackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The region of the COS bucket.",
              "remarks": "It supports environment variables TENCENTCLOUD_REGION."
            },
            "usage": "public readonly region: string;"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.secretId",
            "displayName": "secretId",
            "id": "cdktf.CosBackendProps.property.secretId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Secret id of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID."
            },
            "usage": "public readonly secretId: string;"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.secretKey",
            "displayName": "secretKey",
            "id": "cdktf.CosBackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Secret key of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY."
            },
            "usage": "public readonly secretKey: string;"
          }
        ],
        "docs": {
          "summary": "Stores the state as an object in a configurable prefix in a given bucket on Tencent Cloud Object Storage (COS).",
          "remarks": "This backend supports state locking.\n\nWarning! It is highly recommended that you enable Object Versioning on the COS bucket to allow for state recovery in the case of accidental deletions and human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/cos"
        },
        "usage": "import { CosBackendProps } from 'cdktf'\n\nconst cosBackendProps: CosBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
        "displayName": "DataTerraformRemoteStateArtifactoryConfig",
        "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.password",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The password."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.repo",
            "displayName": "repo",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.repo",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The repository name."
            },
            "usage": "public readonly repo: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.subpath",
            "displayName": "subpath",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.subpath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - Path within the repository."
            },
            "usage": "public readonly subpath: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.url",
            "displayName": "url",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.url",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The URL.",
              "remarks": "Note that this is the base url to artifactory not the full repo and subpath."
            },
            "usage": "public readonly url: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.username",
            "displayName": "username",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.username",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The username."
            },
            "usage": "public readonly username: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateArtifactoryConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateArtifactoryConfig: DataTerraformRemoteStateArtifactoryConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig",
        "displayName": "DataTerraformRemoteStateAzurermConfig",
        "id": "cdktf.DataTerraformRemoteStateAzurermConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.containerName",
            "displayName": "containerName",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.containerName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Container within the Storage Account."
            },
            "usage": "public readonly containerName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
            },
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.storageAccountName",
            "displayName": "storageAccountName",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.storageAccountName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Account."
            },
            "usage": "public readonly storageAccountName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.accessKey",
            "displayName": "accessKey",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable."
            },
            "usage": "public readonly accessKey: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientCertificatePassword",
            "displayName": "clientCertificatePassword",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientCertificatePassword",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable."
            },
            "usage": "public readonly clientCertificatePassword: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientCertificatePath",
            "displayName": "clientCertificatePath",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientCertificatePath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable."
            },
            "usage": "public readonly clientCertificatePath: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientId",
            "displayName": "clientId",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Client ID of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable."
            },
            "usage": "public readonly clientId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientSecret",
            "displayName": "clientSecret",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientSecret",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Client Secret of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable."
            },
            "usage": "public readonly clientSecret: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable.",
              "remarks": "NOTE: An endpoint should only be configured when using Azure Stack."
            },
            "usage": "public readonly endpoint: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.environment",
            "displayName": "environment",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Azure Environment which should be used.",
              "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\n  Possible values are public, china, german, stack and usgovernment. Defaults to public."
            },
            "usage": "public readonly environment: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.msiEndpoint",
            "displayName": "msiEndpoint",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.msiEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified.",
              "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable."
            },
            "usage": "public readonly msiEndpoint: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidcRequestToken",
            "displayName": "oidcRequestToken",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidcRequestToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The bearer token for the request to the OIDC provider.",
              "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables."
            },
            "usage": "public readonly oidcRequestToken: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidcRequestUrl",
            "displayName": "oidcRequestUrl",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidcRequestUrl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The URL for the OIDC provider from which to request an ID token.",
              "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables."
            },
            "usage": "public readonly oidcRequestUrl: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.resourceGroupName",
            "displayName": "resourceGroupName",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.resourceGroupName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
            },
            "usage": "public readonly resourceGroupName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.sasToken",
            "displayName": "sasToken",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.sasToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The SAS Token used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable."
            },
            "usage": "public readonly sasToken: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.snapshot",
            "displayName": "snapshot",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.snapshot",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?",
              "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable."
            },
            "usage": "public readonly snapshot: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.subscriptionId",
            "displayName": "subscriptionId",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.subscriptionId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Subscription ID in which the Storage Account exists.",
              "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable."
            },
            "usage": "public readonly subscriptionId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.tenantId",
            "displayName": "tenantId",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Tenant ID in which the Subscription exists.",
              "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable."
            },
            "usage": "public readonly tenantId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useAzureadAuth",
            "displayName": "useAzureadAuth",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useAzureadAuth",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned."
            },
            "usage": "public readonly useAzureadAuth: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useMicrosoftGraph",
            "displayName": "useMicrosoftGraph",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useMicrosoftGraph",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?",
              "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL."
            },
            "usage": "public readonly useMicrosoftGraph: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useMsi",
            "displayName": "useMsi",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useMsi",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should Managed Service Identity authentication be used?",
              "remarks": "This can also be sourced from the ARM_USE_MSI environment variable."
            },
            "usage": "public readonly useMsi: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useOidc",
            "displayName": "useOidc",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useOidc",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable.",
              "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default)."
            },
            "usage": "public readonly useOidc: boolean;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateAzurermConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateAzurermConfig: DataTerraformRemoteStateAzurermConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateConfig",
        "displayName": "DataTerraformRemoteStateConfig",
        "id": "cdktf.DataTerraformRemoteStateConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateConfig: DataTerraformRemoteStateConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateConsulConfig",
        "displayName": "DataTerraformRemoteStateConsulConfig",
        "id": "cdktf.DataTerraformRemoteStateConsulConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.accessToken",
            "displayName": "accessToken",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.accessToken",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) Access token."
            },
            "usage": "public readonly accessToken: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.path",
            "displayName": "path",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) Path in the Consul KV store."
            },
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.address",
            "displayName": "address",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.address",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port.",
              "remarks": "Defaults to the local agent HTTP listener."
            },
            "usage": "public readonly address: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.caFile",
            "displayName": "caFile",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.caFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
            },
            "usage": "public readonly caFile: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.certFile",
            "displayName": "certFile",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.certFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;",
              "remarks": "requires use of key_file."
            },
            "usage": "public readonly certFile: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.datacenter",
            "displayName": "datacenter",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.datacenter",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The datacenter to use.",
              "remarks": "Defaults to that of the agent."
            },
            "usage": "public readonly datacenter: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.gzip",
            "displayName": "gzip",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.gzip",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
            },
            "usage": "public readonly gzip: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.httpAuth",
            "displayName": "httpAuth",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.httpAuth",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
            },
            "usage": "public readonly httpAuth: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.keyFile",
            "displayName": "keyFile",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.keyFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
            },
            "usage": "public readonly keyFile: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.lock",
            "displayName": "lock",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) false to disable locking.",
              "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking."
            },
            "usage": "public readonly lock: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.scheme",
            "displayName": "scheme",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.scheme",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https.",
              "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true."
            },
            "usage": "public readonly scheme: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateConsulConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateConsulConfig: DataTerraformRemoteStateConsulConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateCosConfig",
        "displayName": "DataTerraformRemoteStateCosConfig",
        "id": "cdktf.DataTerraformRemoteStateCosConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the COS bucket.",
              "remarks": "You shall manually create it first."
            },
            "usage": "public readonly bucket: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.acl",
            "displayName": "acl",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read.",
              "remarks": "Defaults to private."
            },
            "usage": "public readonly acl: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Whether to enable server side encryption of the state file.",
              "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file."
            },
            "usage": "public readonly encrypt: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path for saving the state file in bucket.",
              "remarks": "Defaults to terraform.tfstate."
            },
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The directory for saving the state file in bucket.",
              "remarks": "Default to \"env:\"."
            },
            "usage": "public readonly prefix: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.region",
            "displayName": "region",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The region of the COS bucket.",
              "remarks": "It supports environment variables TENCENTCLOUD_REGION."
            },
            "usage": "public readonly region: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.secretId",
            "displayName": "secretId",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.secretId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Secret id of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID."
            },
            "usage": "public readonly secretId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.secretKey",
            "displayName": "secretKey",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Secret key of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY."
            },
            "usage": "public readonly secretKey: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateCosConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateCosConfig: DataTerraformRemoteStateCosConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig",
        "displayName": "DataTerraformRemoteStateEtcdConfig",
        "id": "cdktf.DataTerraformRemoteStateEtcdConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.endpoints",
            "displayName": "endpoints",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.endpoints",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) A space-separated list of the etcd endpoints."
            },
            "usage": "public readonly endpoints: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.path",
            "displayName": "path",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The path where to store the state."
            },
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.username",
            "displayName": "username",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The username."
            },
            "usage": "public readonly username: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateEtcdConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateEtcdConfig: DataTerraformRemoteStateEtcdConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config",
        "displayName": "DataTerraformRemoteStateEtcdV3Config",
        "id": "cdktf.DataTerraformRemoteStateEtcdV3Config",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.endpoints",
            "displayName": "endpoints",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.endpoints",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Required) The list of 'etcd' endpoints which to connect to."
            },
            "usage": "public readonly endpoints: string[];"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.cacertPath",
            "displayName": "cacertPath",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.cacertPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
            },
            "usage": "public readonly cacertPath: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.certPath",
            "displayName": "certPath",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.certPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
            },
            "usage": "public readonly certPath: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.keyPath",
            "displayName": "keyPath",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.keyPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
            },
            "usage": "public readonly keyPath: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.lock",
            "displayName": "lock",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Whether to lock state access.",
              "remarks": "Defaults to true."
            },
            "usage": "public readonly lock: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Password used to connect to the etcd cluster."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd.",
              "remarks": "Defaults to \"\"."
            },
            "usage": "public readonly prefix: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.username",
            "displayName": "username",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Username used to connect to the etcd cluster."
            },
            "usage": "public readonly username: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateEtcdV3Config } from 'cdktf'\n\nconst dataTerraformRemoteStateEtcdV3Config: DataTerraformRemoteStateEtcdV3Config = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateGcsConfig",
        "displayName": "DataTerraformRemoteStateGcsConfig",
        "id": "cdktf.DataTerraformRemoteStateGcsConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the GCS bucket.",
              "remarks": "This name must be globally unique."
            },
            "usage": "public readonly bucket: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.accessToken",
            "displayName": "accessToken",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.accessToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
            },
            "usage": "public readonly accessToken: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.credentials",
            "displayName": "credentials",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.credentials",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format.",
              "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable."
            },
            "usage": "public readonly credentials: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.encryptionKey",
            "displayName": "encryptionKey",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.encryptionKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
            },
            "usage": "public readonly encryptionKey: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonateServiceAccount",
            "displayName": "impersonateServiceAccount",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonateServiceAccount",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The service account to impersonate for accessing the State Bucket.",
              "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable."
            },
            "usage": "public readonly impersonateServiceAccount: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonateServiceAccountDelegates",
            "displayName": "impersonateServiceAccountDelegates",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonateServiceAccountDelegates",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) The delegation chain for an impersonating a service account."
            },
            "usage": "public readonly impersonateServiceAccountDelegates: string[];"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) GCS prefix inside the bucket.",
              "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate."
            },
            "usage": "public readonly prefix: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateGcsConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateGcsConfig: DataTerraformRemoteStateGcsConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateHttpConfig",
        "displayName": "DataTerraformRemoteStateHttpConfig",
        "id": "cdktf.DataTerraformRemoteStateHttpConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.address",
            "displayName": "address",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.address",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The address of the REST endpoint."
            },
            "usage": "public readonly address: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.lockAddress",
            "displayName": "lockAddress",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.lockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The address of the lock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "public readonly lockAddress: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.lockMethod",
            "displayName": "lockMethod",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.lockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when locking.",
              "remarks": "Defaults to LOCK."
            },
            "usage": "public readonly lockMethod: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password for HTTP basic authentication."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryMax",
            "displayName": "retryMax",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryMax",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "(Optional) The number of HTTP request retries.",
              "remarks": "Defaults to 2."
            },
            "usage": "public readonly retryMax: number;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryWaitMax",
            "displayName": "retryWaitMax",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryWaitMax",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 30."
            },
            "usage": "public readonly retryWaitMax: number;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryWaitMin",
            "displayName": "retryWaitMin",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryWaitMin",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 1."
            },
            "usage": "public readonly retryWaitMin: number;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.skipCertVerification",
            "displayName": "skipCertVerification",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.skipCertVerification",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Whether to skip TLS verification.",
              "remarks": "Defaults to false."
            },
            "usage": "public readonly skipCertVerification: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlockAddress",
            "displayName": "unlockAddress",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The address of the unlock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "public readonly unlockAddress: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlockMethod",
            "displayName": "unlockMethod",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when unlocking.",
              "remarks": "Defaults to UNLOCK."
            },
            "usage": "public readonly unlockMethod: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.updateMethod",
            "displayName": "updateMethod",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.updateMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) HTTP method to use when updating state.",
              "remarks": "Defaults to POST."
            },
            "usage": "public readonly updateMethod: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.username",
            "displayName": "username",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The username for HTTP basic authentication."
            },
            "usage": "public readonly username: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateHttpConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateHttpConfig: DataTerraformRemoteStateHttpConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateLocalConfig",
        "displayName": "DataTerraformRemoteStateLocalConfig",
        "id": "cdktf.DataTerraformRemoteStateLocalConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocalConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocalConfig.property.path",
            "displayName": "path",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.path",
            "optional": true,
            "default": "- defaults to terraform.${stackId}.tfstate",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Path where the state file is stored."
            },
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspaceDir",
            "displayName": "workspaceDir",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspaceDir",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to non-default workspaces."
            },
            "usage": "public readonly workspaceDir: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateLocalConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateLocalConfig: DataTerraformRemoteStateLocalConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateMantaConfig",
        "displayName": "DataTerraformRemoteStateMantaConfig",
        "id": "cdktf.DataTerraformRemoteStateMantaConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.account",
            "displayName": "account",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.account",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly account: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.keyId",
            "displayName": "keyId",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.keyId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly keyId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.path",
            "displayName": "path",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.insecureSkipTlsVerify",
            "displayName": "insecureSkipTlsVerify",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.insecureSkipTlsVerify",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly insecureSkipTlsVerify: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.keyMaterial",
            "displayName": "keyMaterial",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.keyMaterial",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly keyMaterial: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.objectName",
            "displayName": "objectName",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.objectName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly objectName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.url",
            "displayName": "url",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.url",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly url: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.user",
            "displayName": "user",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.user",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly user: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateMantaConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateMantaConfig: DataTerraformRemoteStateMantaConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateOssConfig",
        "displayName": "DataTerraformRemoteStateOssConfig",
        "id": "cdktf.DataTerraformRemoteStateOssConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly bucket: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.accessKey",
            "displayName": "accessKey",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly accessKey: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.acl",
            "displayName": "acl",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly acl: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.assumeRole",
            "displayName": "assumeRole",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.assumeRole",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.OssAssumeRole",
                  "displayName": "OssAssumeRole",
                  "fqn": "cdktf.OssAssumeRole",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly assumeRole: OssAssumeRole;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.ecsRoleName",
            "displayName": "ecsRoleName",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.ecsRoleName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly ecsRoleName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly encrypt: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly endpoint: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly prefix: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.profile",
            "displayName": "profile",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly profile: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.region",
            "displayName": "region",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly region: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.secretKey",
            "displayName": "secretKey",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly secretKey: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.securityToken",
            "displayName": "securityToken",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.securityToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly securityToken: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.sharedCredentialsFile",
            "displayName": "sharedCredentialsFile",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly sharedCredentialsFile: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestoreEndpoint",
            "displayName": "tablestoreEndpoint",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestoreEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tablestoreEndpoint: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestoreTable",
            "displayName": "tablestoreTable",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestoreTable",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tablestoreTable: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateOssConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateOssConfig: DataTerraformRemoteStateOssConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStatePgConfig",
        "displayName": "DataTerraformRemoteStatePgConfig",
        "id": "cdktf.DataTerraformRemoteStatePgConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.connStr",
            "displayName": "connStr",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.connStr",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly connStr: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.schemaName",
            "displayName": "schemaName",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.schemaName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly schemaName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.skipSchemaCreation",
            "displayName": "skipSchemaCreation",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.skipSchemaCreation",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly skipSchemaCreation: boolean;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStatePgConfig } from 'cdktf'\n\nconst dataTerraformRemoteStatePgConfig: DataTerraformRemoteStatePgConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig",
        "displayName": "DataTerraformRemoteStateRemoteConfig",
        "id": "cdktf.DataTerraformRemoteStateRemoteConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.organization",
            "displayName": "organization",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.organization",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly organization: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspaces",
            "displayName": "workspaces",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspaces",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IRemoteWorkspace",
                  "displayName": "IRemoteWorkspace",
                  "fqn": "cdktf.IRemoteWorkspace",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly workspaces: IRemoteWorkspace;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.hostname",
            "displayName": "hostname",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.hostname",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly hostname: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.token",
            "displayName": "token",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly token: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateRemoteConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateRemoteConfig: DataTerraformRemoteStateRemoteConfig = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateS3Config",
        "displayName": "DataTerraformRemoteStateS3Config",
        "id": "cdktf.DataTerraformRemoteStateS3Config",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Name of the S3 Bucket."
            },
            "usage": "public readonly bucket: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Path to the state file inside the S3 Bucket.",
              "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key"
            },
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.accessKey",
            "displayName": "accessKey",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) AWS access key.",
              "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)."
            },
            "usage": "public readonly accessKey: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.acl",
            "displayName": "acl",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Canned ACL to be applied to the state file."
            },
            "usage": "public readonly acl: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRolePolicy",
            "displayName": "assumeRolePolicy",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRolePolicy",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "public readonly assumeRolePolicy: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRolePolicyArns",
            "displayName": "assumeRolePolicyArns",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRolePolicyArns",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "public readonly assumeRolePolicyArns: string[];"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRoleTags",
            "displayName": "assumeRoleTags",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRoleTags",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Map of assume role session tags."
            },
            "usage": "public readonly assumeRoleTags: {[ key: string ]: string};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRoleTransitiveTagKeys",
            "displayName": "assumeRoleTransitiveTagKeys",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRoleTransitiveTagKeys",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
            },
            "usage": "public readonly assumeRoleTransitiveTagKeys: string[];"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodbEndpoint",
            "displayName": "dynamodbEndpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodbEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS DynamoDB API.",
              "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable."
            },
            "usage": "public readonly dynamodbEndpoint: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodbTable",
            "displayName": "dynamodbTable",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodbTable",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency.",
              "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled."
            },
            "usage": "public readonly dynamodbTable: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Enable server side encryption of the state file."
            },
            "usage": "public readonly encrypt: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS S3 API.",
              "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable."
            },
            "usage": "public readonly endpoint: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.externalId",
            "displayName": "externalId",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.externalId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) External identifier to use when assuming the role."
            },
            "usage": "public readonly externalId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.forcePathStyle",
            "displayName": "forcePathStyle",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.forcePathStyle",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
            },
            "usage": "public readonly forcePathStyle: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.iamEndpoint",
            "displayName": "iamEndpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.iamEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API.",
              "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable."
            },
            "usage": "public readonly iamEndpoint: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.kmsKeyId",
            "displayName": "kmsKeyId",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.kmsKeyId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state.",
              "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key."
            },
            "usage": "public readonly kmsKeyId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.maxRetries",
            "displayName": "maxRetries",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.maxRetries",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure.",
              "remarks": "Defaults to 5."
            },
            "usage": "public readonly maxRetries: number;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.profile",
            "displayName": "profile",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
            },
            "usage": "public readonly profile: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.region",
            "displayName": "region",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used).",
              "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables."
            },
            "usage": "public readonly region: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.roleArn",
            "displayName": "roleArn",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.roleArn",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
            },
            "usage": "public readonly roleArn: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.secretKey",
            "displayName": "secretKey",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) AWS secret access key.",
              "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)"
            },
            "usage": "public readonly secretKey: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.sessionName",
            "displayName": "sessionName",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Session name to use when assuming the role."
            },
            "usage": "public readonly sessionName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.sharedCredentialsFile",
            "displayName": "sharedCredentialsFile",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Path to the AWS shared credentials file.",
              "remarks": "Defaults to ~/.aws/credentials."
            },
            "usage": "public readonly sharedCredentialsFile: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.skipCredentialsValidation",
            "displayName": "skipCredentialsValidation",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipCredentialsValidation",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Skip credentials validation via the STS API."
            },
            "usage": "public readonly skipCredentialsValidation: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.skipMetadataApiCheck",
            "displayName": "skipMetadataApiCheck",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipMetadataApiCheck",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Skip usage of EC2 Metadata API."
            },
            "usage": "public readonly skipMetadataApiCheck: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.skipRegionValidation",
            "displayName": "skipRegionValidation",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipRegionValidation",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Skip validation of provided region name."
            },
            "usage": "public readonly skipRegionValidation: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.sseCustomerKey",
            "displayName": "sseCustomerKey",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sseCustomerKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C).",
              "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate."
            },
            "usage": "public readonly sseCustomerKey: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.stsEndpoint",
            "displayName": "stsEndpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.stsEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API.",
              "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable."
            },
            "usage": "public readonly stsEndpoint: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.token",
            "displayName": "token",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Multi-Factor Authentication (MFA) token.",
              "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable."
            },
            "usage": "public readonly token: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.workspaceKeyPrefix",
            "displayName": "workspaceKeyPrefix",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.workspaceKeyPrefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Prefix applied to the state path inside the bucket.",
              "remarks": "This is only relevant when using a non-default workspace. Defaults to env:"
            },
            "usage": "public readonly workspaceKeyPrefix: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateS3Config } from 'cdktf'\n\nconst dataTerraformRemoteStateS3Config: DataTerraformRemoteStateS3Config = { ... }"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig",
        "displayName": "DataTerraformRemoteStateSwiftConfig",
        "id": "cdktf.DataTerraformRemoteStateSwiftConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly defaults: {[ key: string ]: any};"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workspace: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.container",
            "displayName": "container",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.container",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly container: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialId",
            "displayName": "applicationCredentialId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly applicationCredentialId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialName",
            "displayName": "applicationCredentialName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly applicationCredentialName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialSecret",
            "displayName": "applicationCredentialSecret",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialSecret",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly applicationCredentialSecret: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.archiveContainer",
            "displayName": "archiveContainer",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.archiveContainer",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly archiveContainer: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.authUrl",
            "displayName": "authUrl",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.authUrl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly authUrl: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cacertFile",
            "displayName": "cacertFile",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cacertFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly cacertFile: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cert",
            "displayName": "cert",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cert",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly cert: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cloud",
            "displayName": "cloud",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cloud",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly cloud: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaultDomain",
            "displayName": "defaultDomain",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaultDomain",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly defaultDomain: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domainId",
            "displayName": "domainId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly domainId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domainName",
            "displayName": "domainName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly domainName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.expireAfter",
            "displayName": "expireAfter",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.expireAfter",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly expireAfter: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.insecure",
            "displayName": "insecure",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly insecure: boolean;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.projectDomainId",
            "displayName": "projectDomainId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.projectDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly projectDomainId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.projectDomainName",
            "displayName": "projectDomainName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.projectDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly projectDomainName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.regionName",
            "displayName": "regionName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.regionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly regionName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.stateName",
            "displayName": "stateName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.stateName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly stateName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenantId",
            "displayName": "tenantId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tenantId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenantName",
            "displayName": "tenantName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenantName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tenantName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.token",
            "displayName": "token",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly token: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userDomainId",
            "displayName": "userDomainId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly userDomainId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userDomainName",
            "displayName": "userDomainName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly userDomainName: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userId",
            "displayName": "userId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly userId: string;"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userName",
            "displayName": "userName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly userName: string;"
          }
        ],
        "docs": {},
        "usage": "import { DataTerraformRemoteStateSwiftConfig } from 'cdktf'\n\nconst dataTerraformRemoteStateSwiftConfig: DataTerraformRemoteStateSwiftConfig = { ... }"
      },
      {
        "fqn": "cdktf.EncodingOptions",
        "displayName": "EncodingOptions",
        "id": "cdktf.EncodingOptions",
        "properties": [
          {
            "fqn": "cdktf.EncodingOptions.property.displayHint",
            "displayName": "displayHint",
            "id": "cdktf.EncodingOptions.property.displayHint",
            "optional": true,
            "default": "- no display hint",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "A hint for the Token's purpose when stringifying it."
            },
            "usage": "public readonly displayHint: string;"
          }
        ],
        "docs": {
          "summary": "Properties to string encodings."
        },
        "usage": "import { EncodingOptions } from 'cdktf'\n\nconst encodingOptions: EncodingOptions = { ... }"
      },
      {
        "fqn": "cdktf.EtcdBackendProps",
        "displayName": "EtcdBackendProps",
        "id": "cdktf.EtcdBackendProps",
        "properties": [
          {
            "fqn": "cdktf.EtcdBackendProps.property.endpoints",
            "displayName": "endpoints",
            "id": "cdktf.EtcdBackendProps.property.endpoints",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) A space-separated list of the etcd endpoints."
            },
            "usage": "public readonly endpoints: string;"
          },
          {
            "fqn": "cdktf.EtcdBackendProps.property.path",
            "displayName": "path",
            "id": "cdktf.EtcdBackendProps.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The path where to store the state."
            },
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.EtcdBackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.EtcdBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.EtcdBackendProps.property.username",
            "displayName": "username",
            "id": "cdktf.EtcdBackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The username."
            },
            "usage": "public readonly username: string;"
          }
        ],
        "docs": {
          "summary": "Stores the state in etcd 2.x at a given path.",
          "remarks": "This backend does not support state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/etcd"
        },
        "usage": "import { EtcdBackendProps } from 'cdktf'\n\nconst etcdBackendProps: EtcdBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.EtcdV3BackendProps",
        "displayName": "EtcdV3BackendProps",
        "id": "cdktf.EtcdV3BackendProps",
        "properties": [
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.endpoints",
            "displayName": "endpoints",
            "id": "cdktf.EtcdV3BackendProps.property.endpoints",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Required) The list of 'etcd' endpoints which to connect to."
            },
            "usage": "public readonly endpoints: string[];"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.cacertPath",
            "displayName": "cacertPath",
            "id": "cdktf.EtcdV3BackendProps.property.cacertPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
            },
            "usage": "public readonly cacertPath: string;"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.certPath",
            "displayName": "certPath",
            "id": "cdktf.EtcdV3BackendProps.property.certPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
            },
            "usage": "public readonly certPath: string;"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.keyPath",
            "displayName": "keyPath",
            "id": "cdktf.EtcdV3BackendProps.property.keyPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
            },
            "usage": "public readonly keyPath: string;"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.lock",
            "displayName": "lock",
            "id": "cdktf.EtcdV3BackendProps.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Whether to lock state access.",
              "remarks": "Defaults to true."
            },
            "usage": "public readonly lock: boolean;"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.EtcdV3BackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Password used to connect to the etcd cluster."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.EtcdV3BackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd.",
              "remarks": "Defaults to \"\"."
            },
            "usage": "public readonly prefix: string;"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.username",
            "displayName": "username",
            "id": "cdktf.EtcdV3BackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Username used to connect to the etcd cluster."
            },
            "usage": "public readonly username: string;"
          }
        ],
        "docs": {
          "summary": "Stores the state in the etcd KV store with a given prefix.",
          "remarks": "This backend supports state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/etcdv3"
        },
        "usage": "import { EtcdV3BackendProps } from 'cdktf'\n\nconst etcdV3BackendProps: EtcdV3BackendProps = { ... }"
      },
      {
        "fqn": "cdktf.FileProvisioner",
        "displayName": "FileProvisioner",
        "id": "cdktf.FileProvisioner",
        "properties": [
          {
            "fqn": "cdktf.FileProvisioner.property.destination",
            "displayName": "destination",
            "id": "cdktf.FileProvisioner.property.destination",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The source file or directory.",
              "remarks": "Specify it either relative to the current working directory or as an absolute path.\nThis argument cannot be combined with content."
            },
            "usage": "public readonly destination: string;"
          },
          {
            "fqn": "cdktf.FileProvisioner.property.type",
            "displayName": "type",
            "id": "cdktf.FileProvisioner.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly type: string;"
          },
          {
            "fqn": "cdktf.FileProvisioner.property.connection",
            "displayName": "connection",
            "id": "cdktf.FileProvisioner.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "% | %",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect."
            },
            "usage": "public readonly connection: SSHProvisionerConnection | WinrmProvisionerConnection;"
          },
          {
            "fqn": "cdktf.FileProvisioner.property.content",
            "displayName": "content",
            "id": "cdktf.FileProvisioner.property.content",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The destination path to write to on the remote system.",
              "remarks": "See Destination Paths below for more information."
            },
            "usage": "public readonly content: string;"
          },
          {
            "fqn": "cdktf.FileProvisioner.property.source",
            "displayName": "source",
            "id": "cdktf.FileProvisioner.property.source",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The direct content to copy on the destination.",
              "remarks": "If destination is a file, the content will be written on that file.\nIn case of a directory, a file named tf-file-content is created inside that directory.\nWe recommend using a file as the destination when using content.\nThis argument cannot be combined with source."
            },
            "usage": "public readonly source: string;"
          }
        ],
        "docs": {
          "summary": "The file provisioner copies files or directories from the machine running Terraform to the newly created resource.",
          "remarks": "The file provisioner supports both ssh and winrm type connections.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/file file}"
        },
        "usage": "import { FileProvisioner } from 'cdktf'\n\nconst fileProvisioner: FileProvisioner = { ... }"
      },
      {
        "fqn": "cdktf.GcsBackendProps",
        "displayName": "GcsBackendProps",
        "id": "cdktf.GcsBackendProps",
        "properties": [
          {
            "fqn": "cdktf.GcsBackendProps.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.GcsBackendProps.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the GCS bucket.",
              "remarks": "This name must be globally unique."
            },
            "usage": "public readonly bucket: string;"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.accessToken",
            "displayName": "accessToken",
            "id": "cdktf.GcsBackendProps.property.accessToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
            },
            "usage": "public readonly accessToken: string;"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.credentials",
            "displayName": "credentials",
            "id": "cdktf.GcsBackendProps.property.credentials",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format.",
              "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable."
            },
            "usage": "public readonly credentials: string;"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.encryptionKey",
            "displayName": "encryptionKey",
            "id": "cdktf.GcsBackendProps.property.encryptionKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
            },
            "usage": "public readonly encryptionKey: string;"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.impersonateServiceAccount",
            "displayName": "impersonateServiceAccount",
            "id": "cdktf.GcsBackendProps.property.impersonateServiceAccount",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The service account to impersonate for accessing the State Bucket.",
              "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable."
            },
            "usage": "public readonly impersonateServiceAccount: string;"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.impersonateServiceAccountDelegates",
            "displayName": "impersonateServiceAccountDelegates",
            "id": "cdktf.GcsBackendProps.property.impersonateServiceAccountDelegates",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) The delegation chain for an impersonating a service account."
            },
            "usage": "public readonly impersonateServiceAccountDelegates: string[];"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.GcsBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) GCS prefix inside the bucket.",
              "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate."
            },
            "usage": "public readonly prefix: string;"
          }
        ],
        "docs": {
          "summary": "Stores the state as an object in a configurable prefix in a pre-existing bucket on Google Cloud Storage (GCS).",
          "remarks": "The bucket must exist prior to configuring the backend.\n\nThis backend supports state locking.\n\nWarning! It is highly recommended that you enable Object Versioning on the GCS bucket\nto allow for state recovery in the case of accidental deletions and human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/gcs"
        },
        "usage": "import { GcsBackendProps } from 'cdktf'\n\nconst gcsBackendProps: GcsBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.HttpBackendProps",
        "displayName": "HttpBackendProps",
        "id": "cdktf.HttpBackendProps",
        "properties": [
          {
            "fqn": "cdktf.HttpBackendProps.property.address",
            "displayName": "address",
            "id": "cdktf.HttpBackendProps.property.address",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The address of the REST endpoint."
            },
            "usage": "public readonly address: string;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.lockAddress",
            "displayName": "lockAddress",
            "id": "cdktf.HttpBackendProps.property.lockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The address of the lock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "public readonly lockAddress: string;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.lockMethod",
            "displayName": "lockMethod",
            "id": "cdktf.HttpBackendProps.property.lockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when locking.",
              "remarks": "Defaults to LOCK."
            },
            "usage": "public readonly lockMethod: string;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.HttpBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password for HTTP basic authentication."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.retryMax",
            "displayName": "retryMax",
            "id": "cdktf.HttpBackendProps.property.retryMax",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "(Optional) The number of HTTP request retries.",
              "remarks": "Defaults to 2."
            },
            "usage": "public readonly retryMax: number;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.retryWaitMax",
            "displayName": "retryWaitMax",
            "id": "cdktf.HttpBackendProps.property.retryWaitMax",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 30."
            },
            "usage": "public readonly retryWaitMax: number;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.retryWaitMin",
            "displayName": "retryWaitMin",
            "id": "cdktf.HttpBackendProps.property.retryWaitMin",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 1."
            },
            "usage": "public readonly retryWaitMin: number;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.skipCertVerification",
            "displayName": "skipCertVerification",
            "id": "cdktf.HttpBackendProps.property.skipCertVerification",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Whether to skip TLS verification.",
              "remarks": "Defaults to false."
            },
            "usage": "public readonly skipCertVerification: boolean;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.unlockAddress",
            "displayName": "unlockAddress",
            "id": "cdktf.HttpBackendProps.property.unlockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The address of the unlock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "public readonly unlockAddress: string;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.unlockMethod",
            "displayName": "unlockMethod",
            "id": "cdktf.HttpBackendProps.property.unlockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when unlocking.",
              "remarks": "Defaults to UNLOCK."
            },
            "usage": "public readonly unlockMethod: string;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.updateMethod",
            "displayName": "updateMethod",
            "id": "cdktf.HttpBackendProps.property.updateMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) HTTP method to use when updating state.",
              "remarks": "Defaults to POST."
            },
            "usage": "public readonly updateMethod: string;"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.username",
            "displayName": "username",
            "id": "cdktf.HttpBackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The username for HTTP basic authentication."
            },
            "usage": "public readonly username: string;"
          }
        ],
        "docs": {
          "summary": "Stores the state using a simple REST client.",
          "remarks": "State will be fetched via GET, updated via POST, and purged with DELETE.\nThe method used for updating is configurable.\n\nThis backend optionally supports state locking.\nWhen locking support is enabled it will use LOCK and UNLOCK requests providing the lock info in the body.\nThe endpoint should return a 423: Locked or 409: Conflict with the holding lock info when\nit's already taken, 200: OK for success. Any other status will be considered an error.\nThe ID of the holding lock info will be added as a query parameter to state updates requests.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/http"
        },
        "usage": "import { HttpBackendProps } from 'cdktf'\n\nconst httpBackendProps: HttpBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.LazyAnyValueOptions",
        "displayName": "LazyAnyValueOptions",
        "id": "cdktf.LazyAnyValueOptions",
        "properties": [
          {
            "fqn": "cdktf.LazyAnyValueOptions.property.displayHint",
            "displayName": "displayHint",
            "id": "cdktf.LazyAnyValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "public readonly displayHint: string;"
          },
          {
            "fqn": "cdktf.LazyAnyValueOptions.property.omitEmptyArray",
            "displayName": "omitEmptyArray",
            "id": "cdktf.LazyAnyValueOptions.property.omitEmptyArray",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "If the produced value is an array and it is empty, return 'undefined' instead."
            },
            "usage": "public readonly omitEmptyArray: boolean;"
          }
        ],
        "docs": {
          "summary": "Options for creating lazy untyped tokens."
        },
        "usage": "import { LazyAnyValueOptions } from 'cdktf'\n\nconst lazyAnyValueOptions: LazyAnyValueOptions = { ... }"
      },
      {
        "fqn": "cdktf.LazyListValueOptions",
        "displayName": "LazyListValueOptions",
        "id": "cdktf.LazyListValueOptions",
        "properties": [
          {
            "fqn": "cdktf.LazyListValueOptions.property.displayHint",
            "displayName": "displayHint",
            "id": "cdktf.LazyListValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "public readonly displayHint: string;"
          },
          {
            "fqn": "cdktf.LazyListValueOptions.property.omitEmpty",
            "displayName": "omitEmpty",
            "id": "cdktf.LazyListValueOptions.property.omitEmpty",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "If the produced list is empty, return 'undefined' instead."
            },
            "usage": "public readonly omitEmpty: boolean;"
          }
        ],
        "docs": {
          "summary": "Options for creating a lazy list token."
        },
        "usage": "import { LazyListValueOptions } from 'cdktf'\n\nconst lazyListValueOptions: LazyListValueOptions = { ... }"
      },
      {
        "fqn": "cdktf.LazyStringValueOptions",
        "displayName": "LazyStringValueOptions",
        "id": "cdktf.LazyStringValueOptions",
        "properties": [
          {
            "fqn": "cdktf.LazyStringValueOptions.property.displayHint",
            "displayName": "displayHint",
            "id": "cdktf.LazyStringValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "public readonly displayHint: string;"
          }
        ],
        "docs": {
          "summary": "Options for creating a lazy string token."
        },
        "usage": "import { LazyStringValueOptions } from 'cdktf'\n\nconst lazyStringValueOptions: LazyStringValueOptions = { ... }"
      },
      {
        "fqn": "cdktf.LocalBackendProps",
        "displayName": "LocalBackendProps",
        "id": "cdktf.LocalBackendProps",
        "properties": [
          {
            "fqn": "cdktf.LocalBackendProps.property.path",
            "displayName": "path",
            "id": "cdktf.LocalBackendProps.property.path",
            "optional": true,
            "default": "- defaults to terraform.${stackId}.tfstate",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Path where the state file is stored."
            },
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.LocalBackendProps.property.workspaceDir",
            "displayName": "workspaceDir",
            "id": "cdktf.LocalBackendProps.property.workspaceDir",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to non-default workspaces."
            },
            "usage": "public readonly workspaceDir: string;"
          }
        ],
        "docs": {
          "summary": "The local backend stores state on the local filesystem, locks that state using system APIs, and performs operations locally.",
          "remarks": "Read more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/local"
        },
        "usage": "import { LocalBackendProps } from 'cdktf'\n\nconst localBackendProps: LocalBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.LocalExecProvisioner",
        "displayName": "LocalExecProvisioner",
        "id": "cdktf.LocalExecProvisioner",
        "properties": [
          {
            "fqn": "cdktf.LocalExecProvisioner.property.command",
            "displayName": "command",
            "id": "cdktf.LocalExecProvisioner.property.command",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "This is the command to execute.",
              "remarks": "It can be provided as a relative path to the current working directory or as an absolute path.\nIt is evaluated in a shell, and can use environment variables or Terraform variables."
            },
            "usage": "public readonly command: string;"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.type",
            "displayName": "type",
            "id": "cdktf.LocalExecProvisioner.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly type: string;"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.environment",
            "displayName": "environment",
            "id": "cdktf.LocalExecProvisioner.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "A record of key value pairs representing the environment of the executed command.",
              "remarks": "It inherits the current process environment."
            },
            "usage": "public readonly environment: {[ key: string ]: string};"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.interpreter",
            "displayName": "interpreter",
            "id": "cdktf.LocalExecProvisioner.property.interpreter",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "If provided, this is a list of interpreter arguments used to execute the command.",
              "remarks": "The first argument is the interpreter itself.\nIt can be provided as a relative path to the current working directory or as an absolute path\nThe remaining arguments are appended prior to the command.\nThis allows building command lines of the form \"/bin/bash\", \"-c\", \"echo foo\".\nIf interpreter is unspecified, sensible defaults will be chosen based on the system OS."
            },
            "usage": "public readonly interpreter: string[];"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.when",
            "displayName": "when",
            "id": "cdktf.LocalExecProvisioner.property.when",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "If provided, specifies when Terraform will execute the command.",
              "remarks": "For example, when = destroy specifies that the provisioner will run when the associated resource is destroyed"
            },
            "usage": "public readonly when: string;"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.workingDir",
            "displayName": "workingDir",
            "id": "cdktf.LocalExecProvisioner.property.workingDir",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "If provided, specifies the working directory where command will be executed.",
              "remarks": "It can be provided as a relative path to the current working directory or as an absolute path.\nThe directory must exist."
            },
            "usage": "public readonly workingDir: string;"
          }
        ],
        "docs": {
          "summary": "The local-exec provisioner invokes a local executable after a resource is created.",
          "remarks": "This invokes a process on the machine running Terraform, not on the resource.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/local-exec local-exec}"
        },
        "usage": "import { LocalExecProvisioner } from 'cdktf'\n\nconst localExecProvisioner: LocalExecProvisioner = { ... }"
      },
      {
        "fqn": "cdktf.MantaBackendProps",
        "displayName": "MantaBackendProps",
        "id": "cdktf.MantaBackendProps",
        "properties": [
          {
            "fqn": "cdktf.MantaBackendProps.property.account",
            "displayName": "account",
            "id": "cdktf.MantaBackendProps.property.account",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly account: string;"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.keyId",
            "displayName": "keyId",
            "id": "cdktf.MantaBackendProps.property.keyId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly keyId: string;"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.path",
            "displayName": "path",
            "id": "cdktf.MantaBackendProps.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.insecureSkipTlsVerify",
            "displayName": "insecureSkipTlsVerify",
            "id": "cdktf.MantaBackendProps.property.insecureSkipTlsVerify",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly insecureSkipTlsVerify: boolean;"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.keyMaterial",
            "displayName": "keyMaterial",
            "id": "cdktf.MantaBackendProps.property.keyMaterial",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly keyMaterial: string;"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.objectName",
            "displayName": "objectName",
            "id": "cdktf.MantaBackendProps.property.objectName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly objectName: string;"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.url",
            "displayName": "url",
            "id": "cdktf.MantaBackendProps.property.url",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly url: string;"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.user",
            "displayName": "user",
            "id": "cdktf.MantaBackendProps.property.user",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly user: string;"
          }
        ],
        "docs": {},
        "usage": "import { MantaBackendProps } from 'cdktf'\n\nconst mantaBackendProps: MantaBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.OssAssumeRole",
        "displayName": "OssAssumeRole",
        "id": "cdktf.OssAssumeRole",
        "properties": [
          {
            "fqn": "cdktf.OssAssumeRole.property.roleArn",
            "displayName": "roleArn",
            "id": "cdktf.OssAssumeRole.property.roleArn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly roleArn: string;"
          },
          {
            "fqn": "cdktf.OssAssumeRole.property.policy",
            "displayName": "policy",
            "id": "cdktf.OssAssumeRole.property.policy",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly policy: string;"
          },
          {
            "fqn": "cdktf.OssAssumeRole.property.sessionExpiration",
            "displayName": "sessionExpiration",
            "id": "cdktf.OssAssumeRole.property.sessionExpiration",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {},
            "usage": "public readonly sessionExpiration: number;"
          },
          {
            "fqn": "cdktf.OssAssumeRole.property.sessionName",
            "displayName": "sessionName",
            "id": "cdktf.OssAssumeRole.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly sessionName: string;"
          }
        ],
        "docs": {},
        "usage": "import { OssAssumeRole } from 'cdktf'\n\nconst ossAssumeRole: OssAssumeRole = { ... }"
      },
      {
        "fqn": "cdktf.OssBackendProps",
        "displayName": "OssBackendProps",
        "id": "cdktf.OssBackendProps",
        "properties": [
          {
            "fqn": "cdktf.OssBackendProps.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.OssBackendProps.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly bucket: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.accessKey",
            "displayName": "accessKey",
            "id": "cdktf.OssBackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly accessKey: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.acl",
            "displayName": "acl",
            "id": "cdktf.OssBackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly acl: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.assumeRole",
            "displayName": "assumeRole",
            "id": "cdktf.OssBackendProps.property.assumeRole",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.OssAssumeRole",
                  "displayName": "OssAssumeRole",
                  "fqn": "cdktf.OssAssumeRole",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly assumeRole: OssAssumeRole;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.ecsRoleName",
            "displayName": "ecsRoleName",
            "id": "cdktf.OssBackendProps.property.ecsRoleName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly ecsRoleName: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.OssBackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly encrypt: boolean;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.OssBackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly endpoint: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.OssBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.OssBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly prefix: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.profile",
            "displayName": "profile",
            "id": "cdktf.OssBackendProps.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly profile: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.region",
            "displayName": "region",
            "id": "cdktf.OssBackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly region: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.secretKey",
            "displayName": "secretKey",
            "id": "cdktf.OssBackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly secretKey: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.securityToken",
            "displayName": "securityToken",
            "id": "cdktf.OssBackendProps.property.securityToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly securityToken: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.sharedCredentialsFile",
            "displayName": "sharedCredentialsFile",
            "id": "cdktf.OssBackendProps.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly sharedCredentialsFile: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.tablestoreEndpoint",
            "displayName": "tablestoreEndpoint",
            "id": "cdktf.OssBackendProps.property.tablestoreEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tablestoreEndpoint: string;"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.tablestoreTable",
            "displayName": "tablestoreTable",
            "id": "cdktf.OssBackendProps.property.tablestoreTable",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tablestoreTable: string;"
          }
        ],
        "docs": {},
        "usage": "import { OssBackendProps } from 'cdktf'\n\nconst ossBackendProps: OssBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.PgBackendProps",
        "displayName": "PgBackendProps",
        "id": "cdktf.PgBackendProps",
        "properties": [
          {
            "fqn": "cdktf.PgBackendProps.property.connStr",
            "displayName": "connStr",
            "id": "cdktf.PgBackendProps.property.connStr",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly connStr: string;"
          },
          {
            "fqn": "cdktf.PgBackendProps.property.schemaName",
            "displayName": "schemaName",
            "id": "cdktf.PgBackendProps.property.schemaName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly schemaName: string;"
          },
          {
            "fqn": "cdktf.PgBackendProps.property.skipSchemaCreation",
            "displayName": "skipSchemaCreation",
            "id": "cdktf.PgBackendProps.property.skipSchemaCreation",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly skipSchemaCreation: boolean;"
          }
        ],
        "docs": {},
        "usage": "import { PgBackendProps } from 'cdktf'\n\nconst pgBackendProps: PgBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.RemoteBackendProps",
        "displayName": "RemoteBackendProps",
        "id": "cdktf.RemoteBackendProps",
        "properties": [
          {
            "fqn": "cdktf.RemoteBackendProps.property.organization",
            "displayName": "organization",
            "id": "cdktf.RemoteBackendProps.property.organization",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly organization: string;"
          },
          {
            "fqn": "cdktf.RemoteBackendProps.property.workspaces",
            "displayName": "workspaces",
            "id": "cdktf.RemoteBackendProps.property.workspaces",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IRemoteWorkspace",
                  "displayName": "IRemoteWorkspace",
                  "fqn": "cdktf.IRemoteWorkspace",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly workspaces: IRemoteWorkspace;"
          },
          {
            "fqn": "cdktf.RemoteBackendProps.property.hostname",
            "displayName": "hostname",
            "id": "cdktf.RemoteBackendProps.property.hostname",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly hostname: string;"
          },
          {
            "fqn": "cdktf.RemoteBackendProps.property.token",
            "displayName": "token",
            "id": "cdktf.RemoteBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly token: string;"
          }
        ],
        "docs": {},
        "usage": "import { RemoteBackendProps } from 'cdktf'\n\nconst remoteBackendProps: RemoteBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.RemoteExecProvisioner",
        "displayName": "RemoteExecProvisioner",
        "id": "cdktf.RemoteExecProvisioner",
        "properties": [
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.type",
            "displayName": "type",
            "id": "cdktf.RemoteExecProvisioner.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly type: string;"
          },
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.connection",
            "displayName": "connection",
            "id": "cdktf.RemoteExecProvisioner.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "% | %",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
              "remarks": "A connection must be provided here or in the parent resource."
            },
            "usage": "public readonly connection: SSHProvisionerConnection | WinrmProvisionerConnection;"
          },
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.inline",
            "displayName": "inline",
            "id": "cdktf.RemoteExecProvisioner.property.inline",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "This is a list of command strings.",
              "remarks": "They are executed in the order they are provided.\nThis cannot be provided with script or scripts."
            },
            "usage": "public readonly inline: string[];"
          },
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.script",
            "displayName": "script",
            "id": "cdktf.RemoteExecProvisioner.property.script",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "This is a path (relative or absolute) to a local script that will be copied to the remote resource and then executed.",
              "remarks": "This cannot be provided with inline or scripts."
            },
            "usage": "public readonly script: string;"
          },
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.scripts",
            "displayName": "scripts",
            "id": "cdktf.RemoteExecProvisioner.property.scripts",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "This is a list of paths (relative or absolute) to local scripts that will be copied to the remote resource and then executed.",
              "remarks": "They are executed in the order they are provided.\nThis cannot be provided with inline or script."
            },
            "usage": "public readonly scripts: string[];"
          }
        ],
        "docs": {
          "summary": "The remote-exec provisioner invokes a script on a remote resource after it is created.",
          "remarks": "This can be used to run a configuration management tool, bootstrap into a cluster, etc\nThe remote-exec provisioner requires a connection and supports both ssh and winrm.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/remote-exec remote-exec}"
        },
        "usage": "import { RemoteExecProvisioner } from 'cdktf'\n\nconst remoteExecProvisioner: RemoteExecProvisioner = { ... }"
      },
      {
        "fqn": "cdktf.ResolveOptions",
        "displayName": "ResolveOptions",
        "id": "cdktf.ResolveOptions",
        "properties": [
          {
            "fqn": "cdktf.ResolveOptions.property.resolver",
            "displayName": "resolver",
            "id": "cdktf.ResolveOptions.property.resolver",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITokenResolver",
                  "displayName": "ITokenResolver",
                  "fqn": "cdktf.ITokenResolver",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The resolver to apply to any resolvable tokens found."
            },
            "usage": "public readonly resolver: ITokenResolver;"
          },
          {
            "fqn": "cdktf.ResolveOptions.property.scope",
            "displayName": "scope",
            "id": "cdktf.ResolveOptions.property.scope",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.IConstruct",
                  "displayName": "IConstruct",
                  "fqn": "constructs.IConstruct",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The scope from which resolution is performed."
            },
            "usage": "public readonly scope: IConstruct;"
          },
          {
            "fqn": "cdktf.ResolveOptions.property.preparing",
            "displayName": "preparing",
            "id": "cdktf.ResolveOptions.property.preparing",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "Whether the resolution is being executed during the prepare phase or not."
            },
            "usage": "public readonly preparing: boolean;"
          }
        ],
        "docs": {
          "summary": "Options to the resolve() operation.",
          "remarks": "NOT the same as the ResolveContext; ResolveContext is exposed to Token\nimplementors and resolution hooks, whereas this struct is just to bundle\na number of things that would otherwise be arguments to resolve() in a\nreadable way."
        },
        "usage": "import { ResolveOptions } from 'cdktf'\n\nconst resolveOptions: ResolveOptions = { ... }"
      },
      {
        "fqn": "cdktf.S3BackendProps",
        "displayName": "S3BackendProps",
        "id": "cdktf.S3BackendProps",
        "properties": [
          {
            "fqn": "cdktf.S3BackendProps.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.S3BackendProps.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Name of the S3 Bucket."
            },
            "usage": "public readonly bucket: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.S3BackendProps.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Path to the state file inside the S3 Bucket.",
              "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key"
            },
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.accessKey",
            "displayName": "accessKey",
            "id": "cdktf.S3BackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) AWS access key.",
              "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)."
            },
            "usage": "public readonly accessKey: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.acl",
            "displayName": "acl",
            "id": "cdktf.S3BackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Canned ACL to be applied to the state file."
            },
            "usage": "public readonly acl: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.assumeRolePolicy",
            "displayName": "assumeRolePolicy",
            "id": "cdktf.S3BackendProps.property.assumeRolePolicy",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "public readonly assumeRolePolicy: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.assumeRolePolicyArns",
            "displayName": "assumeRolePolicyArns",
            "id": "cdktf.S3BackendProps.property.assumeRolePolicyArns",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "public readonly assumeRolePolicyArns: string[];"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.assumeRoleTags",
            "displayName": "assumeRoleTags",
            "id": "cdktf.S3BackendProps.property.assumeRoleTags",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Map of assume role session tags."
            },
            "usage": "public readonly assumeRoleTags: {[ key: string ]: string};"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.assumeRoleTransitiveTagKeys",
            "displayName": "assumeRoleTransitiveTagKeys",
            "id": "cdktf.S3BackendProps.property.assumeRoleTransitiveTagKeys",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
            },
            "usage": "public readonly assumeRoleTransitiveTagKeys: string[];"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.dynamodbEndpoint",
            "displayName": "dynamodbEndpoint",
            "id": "cdktf.S3BackendProps.property.dynamodbEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS DynamoDB API.",
              "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable."
            },
            "usage": "public readonly dynamodbEndpoint: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.dynamodbTable",
            "displayName": "dynamodbTable",
            "id": "cdktf.S3BackendProps.property.dynamodbTable",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency.",
              "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled."
            },
            "usage": "public readonly dynamodbTable: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.S3BackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Enable server side encryption of the state file."
            },
            "usage": "public readonly encrypt: boolean;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.S3BackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS S3 API.",
              "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable."
            },
            "usage": "public readonly endpoint: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.externalId",
            "displayName": "externalId",
            "id": "cdktf.S3BackendProps.property.externalId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) External identifier to use when assuming the role."
            },
            "usage": "public readonly externalId: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.forcePathStyle",
            "displayName": "forcePathStyle",
            "id": "cdktf.S3BackendProps.property.forcePathStyle",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
            },
            "usage": "public readonly forcePathStyle: boolean;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.iamEndpoint",
            "displayName": "iamEndpoint",
            "id": "cdktf.S3BackendProps.property.iamEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API.",
              "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable."
            },
            "usage": "public readonly iamEndpoint: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.kmsKeyId",
            "displayName": "kmsKeyId",
            "id": "cdktf.S3BackendProps.property.kmsKeyId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state.",
              "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key."
            },
            "usage": "public readonly kmsKeyId: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.maxRetries",
            "displayName": "maxRetries",
            "id": "cdktf.S3BackendProps.property.maxRetries",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure.",
              "remarks": "Defaults to 5."
            },
            "usage": "public readonly maxRetries: number;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.profile",
            "displayName": "profile",
            "id": "cdktf.S3BackendProps.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
            },
            "usage": "public readonly profile: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.region",
            "displayName": "region",
            "id": "cdktf.S3BackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used).",
              "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables."
            },
            "usage": "public readonly region: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.roleArn",
            "displayName": "roleArn",
            "id": "cdktf.S3BackendProps.property.roleArn",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
            },
            "usage": "public readonly roleArn: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.secretKey",
            "displayName": "secretKey",
            "id": "cdktf.S3BackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) AWS secret access key.",
              "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)"
            },
            "usage": "public readonly secretKey: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.sessionName",
            "displayName": "sessionName",
            "id": "cdktf.S3BackendProps.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Session name to use when assuming the role."
            },
            "usage": "public readonly sessionName: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.sharedCredentialsFile",
            "displayName": "sharedCredentialsFile",
            "id": "cdktf.S3BackendProps.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Path to the AWS shared credentials file.",
              "remarks": "Defaults to ~/.aws/credentials."
            },
            "usage": "public readonly sharedCredentialsFile: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.skipCredentialsValidation",
            "displayName": "skipCredentialsValidation",
            "id": "cdktf.S3BackendProps.property.skipCredentialsValidation",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Skip credentials validation via the STS API."
            },
            "usage": "public readonly skipCredentialsValidation: boolean;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.skipMetadataApiCheck",
            "displayName": "skipMetadataApiCheck",
            "id": "cdktf.S3BackendProps.property.skipMetadataApiCheck",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Skip usage of EC2 Metadata API."
            },
            "usage": "public readonly skipMetadataApiCheck: boolean;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.skipRegionValidation",
            "displayName": "skipRegionValidation",
            "id": "cdktf.S3BackendProps.property.skipRegionValidation",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "(Optional) Skip validation of provided region name."
            },
            "usage": "public readonly skipRegionValidation: boolean;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.sseCustomerKey",
            "displayName": "sseCustomerKey",
            "id": "cdktf.S3BackendProps.property.sseCustomerKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C).",
              "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate."
            },
            "usage": "public readonly sseCustomerKey: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.stsEndpoint",
            "displayName": "stsEndpoint",
            "id": "cdktf.S3BackendProps.property.stsEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API.",
              "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable."
            },
            "usage": "public readonly stsEndpoint: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.token",
            "displayName": "token",
            "id": "cdktf.S3BackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Multi-Factor Authentication (MFA) token.",
              "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable."
            },
            "usage": "public readonly token: string;"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.workspaceKeyPrefix",
            "displayName": "workspaceKeyPrefix",
            "id": "cdktf.S3BackendProps.property.workspaceKeyPrefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Prefix applied to the state path inside the bucket.",
              "remarks": "This is only relevant when using a non-default workspace. Defaults to env:"
            },
            "usage": "public readonly workspaceKeyPrefix: string;"
          }
        ],
        "docs": {
          "summary": "Stores the state as a given key in a given bucket on Amazon S3.",
          "remarks": "This backend\nalso supports state locking and consistency checking via Dynamo DB, which\ncan be enabled by setting the dynamodb_table field to an existing DynamoDB\ntable name. A single DynamoDB table can be used to lock multiple remote\nstate files. Terraform generates key names that include the values of the\nbucket and key variables.\n\nWarning! It is highly recommended that you enable Bucket Versioning on the\nS3 bucket to allow for state recovery in the case of accidental deletions\nand human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/s3"
        },
        "usage": "import { S3BackendProps } from 'cdktf'\n\nconst s3BackendProps: S3BackendProps = { ... }"
      },
      {
        "fqn": "cdktf.SSHProvisionerConnection",
        "displayName": "SSHProvisionerConnection",
        "id": "cdktf.SSHProvisionerConnection",
        "properties": [
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.host",
            "displayName": "host",
            "id": "cdktf.SSHProvisionerConnection.property.host",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The address of the resource to connect to."
            },
            "usage": "public readonly host: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.type",
            "displayName": "type",
            "id": "cdktf.SSHProvisionerConnection.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The connection type.",
              "remarks": "Valid values are \"ssh\" and \"winrm\".\nProvisioners typically assume that the remote system runs Microsoft Windows when using WinRM.\nBehaviors based on the SSH target_platform will force Windows-specific behavior for WinRM, unless otherwise specified."
            },
            "usage": "public readonly type: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.agent",
            "displayName": "agent",
            "id": "cdktf.SSHProvisionerConnection.property.agent",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Set to false to disable using ssh-agent to authenticate.",
              "remarks": "On Windows the only supported SSH authentication agent is Pageant."
            },
            "usage": "public readonly agent: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.agentIdentity",
            "displayName": "agentIdentity",
            "id": "cdktf.SSHProvisionerConnection.property.agentIdentity",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The preferred identity from the ssh agent for authentication."
            },
            "usage": "public readonly agentIdentity: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastionCertificate",
            "displayName": "bastionCertificate",
            "id": "cdktf.SSHProvisionerConnection.property.bastionCertificate",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The contents of a signed CA Certificate.",
              "remarks": "The certificate argument must be used in conjunction with a bastion_private_key.\nThese can be loaded from a file on disk using the the file function."
            },
            "usage": "public readonly bastionCertificate: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastionHost",
            "displayName": "bastionHost",
            "id": "cdktf.SSHProvisionerConnection.property.bastionHost",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Setting this enables the bastion Host connection.",
              "remarks": "The provisioner will connect to bastion_host first, and then connect from there to host."
            },
            "usage": "public readonly bastionHost: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastionHostKey",
            "displayName": "bastionHostKey",
            "id": "cdktf.SSHProvisionerConnection.property.bastionHostKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The public key from the remote host or the signing CA, used to verify the host connection."
            },
            "usage": "public readonly bastionHostKey: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastionPassword",
            "displayName": "bastionPassword",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPassword",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The password to use for the bastion host."
            },
            "usage": "public readonly bastionPassword: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastionPort",
            "displayName": "bastionPort",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPort",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "The port to use connect to the bastion host."
            },
            "usage": "public readonly bastionPort: number;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastionPrivateKey",
            "displayName": "bastionPrivateKey",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPrivateKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The contents of an SSH key file to use for the bastion host.",
              "remarks": "These can be loaded from a file on disk using the file function."
            },
            "usage": "public readonly bastionPrivateKey: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastionUser",
            "displayName": "bastionUser",
            "id": "cdktf.SSHProvisionerConnection.property.bastionUser",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The user for the connection to the bastion host."
            },
            "usage": "public readonly bastionUser: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.certificate",
            "displayName": "certificate",
            "id": "cdktf.SSHProvisionerConnection.property.certificate",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The contents of a signed CA Certificate.",
              "remarks": "The certificate argument must be used in conjunction with a private_key.\nThese can be loaded from a file on disk using the the file function."
            },
            "usage": "public readonly certificate: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.hostKey",
            "displayName": "hostKey",
            "id": "cdktf.SSHProvisionerConnection.property.hostKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The public key from the remote host or the signing CA, used to verify the connection."
            },
            "usage": "public readonly hostKey: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.password",
            "displayName": "password",
            "id": "cdktf.SSHProvisionerConnection.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The password to use for the connection."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.port",
            "displayName": "port",
            "id": "cdktf.SSHProvisionerConnection.property.port",
            "optional": true,
            "default": "22",
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "The port to connect to."
            },
            "usage": "public readonly port: number;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.privateKey",
            "displayName": "privateKey",
            "id": "cdktf.SSHProvisionerConnection.property.privateKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The contents of an SSH key to use for the connection.",
              "remarks": "These can be loaded from a file on disk using the file function.\nThis takes preference over password if provided."
            },
            "usage": "public readonly privateKey: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxyHost",
            "displayName": "proxyHost",
            "id": "cdktf.SSHProvisionerConnection.property.proxyHost",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Setting this enables the SSH over HTTP connection.",
              "remarks": "This host will be connected to first, and then the host or bastion_host connection will be made from there."
            },
            "usage": "public readonly proxyHost: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxyPort",
            "displayName": "proxyPort",
            "id": "cdktf.SSHProvisionerConnection.property.proxyPort",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "The port to use connect to the proxy host."
            },
            "usage": "public readonly proxyPort: number;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxyScheme",
            "displayName": "proxyScheme",
            "id": "cdktf.SSHProvisionerConnection.property.proxyScheme",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The ssh connection also supports the following fields to facilitate connections by SSH over HTTP proxy."
            },
            "usage": "public readonly proxyScheme: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxyUserName",
            "displayName": "proxyUserName",
            "id": "cdktf.SSHProvisionerConnection.property.proxyUserName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The username to use connect to the private proxy host.",
              "remarks": "This argument should be specified only if authentication is required for the HTTP Proxy server."
            },
            "usage": "public readonly proxyUserName: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxyUserPassword",
            "displayName": "proxyUserPassword",
            "id": "cdktf.SSHProvisionerConnection.property.proxyUserPassword",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The password to use connect to the private proxy host.",
              "remarks": "This argument should be specified only if authentication is required for the HTTP Proxy server."
            },
            "usage": "public readonly proxyUserPassword: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.scriptPath",
            "displayName": "scriptPath",
            "id": "cdktf.SSHProvisionerConnection.property.scriptPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The path used to copy scripts meant for remote execution.",
              "remarks": "Refer to {@link https://www.terraform.io/language/resources/provisioners/connection#how-provisioners-execute-remote-scripts How Provisioners Execute Remote Scripts below for more details}"
            },
            "usage": "public readonly scriptPath: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.targetPlatform",
            "displayName": "targetPlatform",
            "id": "cdktf.SSHProvisionerConnection.property.targetPlatform",
            "optional": true,
            "default": "unix",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The target platform to connect to.",
              "remarks": "Valid values are \"windows\" and \"unix\".\nIf the platform is set to windows, the default script_path is c:\\windows\\temp\\terraform_%RAND%.cmd, assuming the SSH default shell is cmd.exe.\nIf the SSH default shell is PowerShell, set script_path to \"c:/windows/temp/terraform_%RAND%.ps1\""
            },
            "usage": "public readonly targetPlatform: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.timeout",
            "displayName": "timeout",
            "id": "cdktf.SSHProvisionerConnection.property.timeout",
            "optional": true,
            "default": "5m",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The timeout to wait for the connection to become available.",
              "remarks": "Should be provided as a string (e.g., \"30s\" or \"5m\".)"
            },
            "usage": "public readonly timeout: string;"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.user",
            "displayName": "user",
            "id": "cdktf.SSHProvisionerConnection.property.user",
            "optional": true,
            "default": "root",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The user to use for the connection."
            },
            "usage": "public readonly user: string;"
          }
        ],
        "docs": {
          "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
          "remarks": "See {@link https://www.terraform.io/language/resources/provisioners/connection connection}"
        },
        "usage": "import { SSHProvisionerConnection } from 'cdktf'\n\nconst sSHProvisionerConnection: SSHProvisionerConnection = { ... }"
      },
      {
        "fqn": "cdktf.StackAnnotation",
        "displayName": "StackAnnotation",
        "id": "cdktf.StackAnnotation",
        "properties": [
          {
            "fqn": "cdktf.StackAnnotation.property.constructPath",
            "displayName": "constructPath",
            "id": "cdktf.StackAnnotation.property.constructPath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly constructPath: string;"
          },
          {
            "fqn": "cdktf.StackAnnotation.property.level",
            "displayName": "level",
            "id": "cdktf.StackAnnotation.property.level",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AnnotationMetadataEntryType",
                  "displayName": "AnnotationMetadataEntryType",
                  "fqn": "cdktf.AnnotationMetadataEntryType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly level: AnnotationMetadataEntryType;"
          },
          {
            "fqn": "cdktf.StackAnnotation.property.message",
            "displayName": "message",
            "id": "cdktf.StackAnnotation.property.message",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly message: string;"
          },
          {
            "fqn": "cdktf.StackAnnotation.property.stacktrace",
            "displayName": "stacktrace",
            "id": "cdktf.StackAnnotation.property.stacktrace",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly stacktrace: string[];"
          }
        ],
        "docs": {},
        "usage": "import { StackAnnotation } from 'cdktf'\n\nconst stackAnnotation: StackAnnotation = { ... }"
      },
      {
        "fqn": "cdktf.StackManifest",
        "displayName": "StackManifest",
        "id": "cdktf.StackManifest",
        "properties": [
          {
            "fqn": "cdktf.StackManifest.property.annotations",
            "displayName": "annotations",
            "id": "cdktf.StackManifest.property.annotations",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackAnnotation",
                      "displayName": "StackAnnotation",
                      "fqn": "cdktf.StackAnnotation",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly annotations: StackAnnotation[];"
          },
          {
            "fqn": "cdktf.StackManifest.property.constructPath",
            "displayName": "constructPath",
            "id": "cdktf.StackManifest.property.constructPath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly constructPath: string;"
          },
          {
            "fqn": "cdktf.StackManifest.property.dependencies",
            "displayName": "dependencies",
            "id": "cdktf.StackManifest.property.dependencies",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependencies: string[];"
          },
          {
            "fqn": "cdktf.StackManifest.property.name",
            "displayName": "name",
            "id": "cdktf.StackManifest.property.name",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly name: string;"
          },
          {
            "fqn": "cdktf.StackManifest.property.synthesizedStackPath",
            "displayName": "synthesizedStackPath",
            "id": "cdktf.StackManifest.property.synthesizedStackPath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly synthesizedStackPath: string;"
          },
          {
            "fqn": "cdktf.StackManifest.property.workingDirectory",
            "displayName": "workingDirectory",
            "id": "cdktf.StackManifest.property.workingDirectory",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly workingDirectory: string;"
          }
        ],
        "docs": {},
        "usage": "import { StackManifest } from 'cdktf'\n\nconst stackManifest: StackManifest = { ... }"
      },
      {
        "fqn": "cdktf.SwiftBackendProps",
        "displayName": "SwiftBackendProps",
        "id": "cdktf.SwiftBackendProps",
        "properties": [
          {
            "fqn": "cdktf.SwiftBackendProps.property.container",
            "displayName": "container",
            "id": "cdktf.SwiftBackendProps.property.container",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly container: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.applicationCredentialId",
            "displayName": "applicationCredentialId",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly applicationCredentialId: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.applicationCredentialName",
            "displayName": "applicationCredentialName",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly applicationCredentialName: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.applicationCredentialSecret",
            "displayName": "applicationCredentialSecret",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialSecret",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly applicationCredentialSecret: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.archiveContainer",
            "displayName": "archiveContainer",
            "id": "cdktf.SwiftBackendProps.property.archiveContainer",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly archiveContainer: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.authUrl",
            "displayName": "authUrl",
            "id": "cdktf.SwiftBackendProps.property.authUrl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly authUrl: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.cacertFile",
            "displayName": "cacertFile",
            "id": "cdktf.SwiftBackendProps.property.cacertFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly cacertFile: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.cert",
            "displayName": "cert",
            "id": "cdktf.SwiftBackendProps.property.cert",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly cert: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.cloud",
            "displayName": "cloud",
            "id": "cdktf.SwiftBackendProps.property.cloud",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly cloud: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.defaultDomain",
            "displayName": "defaultDomain",
            "id": "cdktf.SwiftBackendProps.property.defaultDomain",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly defaultDomain: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.domainId",
            "displayName": "domainId",
            "id": "cdktf.SwiftBackendProps.property.domainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly domainId: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.domainName",
            "displayName": "domainName",
            "id": "cdktf.SwiftBackendProps.property.domainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly domainName: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.expireAfter",
            "displayName": "expireAfter",
            "id": "cdktf.SwiftBackendProps.property.expireAfter",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly expireAfter: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.insecure",
            "displayName": "insecure",
            "id": "cdktf.SwiftBackendProps.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly insecure: boolean;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.SwiftBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly key: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.SwiftBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.projectDomainId",
            "displayName": "projectDomainId",
            "id": "cdktf.SwiftBackendProps.property.projectDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly projectDomainId: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.projectDomainName",
            "displayName": "projectDomainName",
            "id": "cdktf.SwiftBackendProps.property.projectDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly projectDomainName: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.regionName",
            "displayName": "regionName",
            "id": "cdktf.SwiftBackendProps.property.regionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly regionName: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.stateName",
            "displayName": "stateName",
            "id": "cdktf.SwiftBackendProps.property.stateName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly stateName: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.tenantId",
            "displayName": "tenantId",
            "id": "cdktf.SwiftBackendProps.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tenantId: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.tenantName",
            "displayName": "tenantName",
            "id": "cdktf.SwiftBackendProps.property.tenantName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tenantName: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.token",
            "displayName": "token",
            "id": "cdktf.SwiftBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly token: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.userDomainId",
            "displayName": "userDomainId",
            "id": "cdktf.SwiftBackendProps.property.userDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly userDomainId: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.userDomainName",
            "displayName": "userDomainName",
            "id": "cdktf.SwiftBackendProps.property.userDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly userDomainName: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.userId",
            "displayName": "userId",
            "id": "cdktf.SwiftBackendProps.property.userId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly userId: string;"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.userName",
            "displayName": "userName",
            "id": "cdktf.SwiftBackendProps.property.userName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly userName: string;"
          }
        ],
        "docs": {},
        "usage": "import { SwiftBackendProps } from 'cdktf'\n\nconst swiftBackendProps: SwiftBackendProps = { ... }"
      },
      {
        "fqn": "cdktf.TerraformAssetConfig",
        "displayName": "TerraformAssetConfig",
        "id": "cdktf.TerraformAssetConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformAssetConfig.property.path",
            "displayName": "path",
            "id": "cdktf.TerraformAssetConfig.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.TerraformAssetConfig.property.assetHash",
            "displayName": "assetHash",
            "id": "cdktf.TerraformAssetConfig.property.assetHash",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly assetHash: string;"
          },
          {
            "fqn": "cdktf.TerraformAssetConfig.property.type",
            "displayName": "type",
            "id": "cdktf.TerraformAssetConfig.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AssetType",
                  "displayName": "AssetType",
                  "fqn": "cdktf.AssetType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly type: AssetType;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformAssetConfig } from 'cdktf'\n\nconst terraformAssetConfig: TerraformAssetConfig = { ... }"
      },
      {
        "fqn": "cdktf.testingMatchers.TerraformConstructor",
        "displayName": "TerraformConstructor",
        "id": "cdktf.testingMatchers.TerraformConstructor",
        "properties": [
          {
            "fqn": "cdktf.testingMatchers.TerraformConstructor.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.testingMatchers.TerraformConstructor.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly tfResourceType: string;"
          }
        ],
        "docs": {},
        "usage": "import { testingMatchers } from 'cdktf'\n\nconst terraformConstructor: testingMatchers.TerraformConstructor = { ... }"
      },
      {
        "fqn": "cdktf.TerraformElementMetadata",
        "displayName": "TerraformElementMetadata",
        "id": "cdktf.TerraformElementMetadata",
        "properties": [
          {
            "fqn": "cdktf.TerraformElementMetadata.property.path",
            "displayName": "path",
            "id": "cdktf.TerraformElementMetadata.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly path: string;"
          },
          {
            "fqn": "cdktf.TerraformElementMetadata.property.stackTrace",
            "displayName": "stackTrace",
            "id": "cdktf.TerraformElementMetadata.property.stackTrace",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly stackTrace: string[];"
          },
          {
            "fqn": "cdktf.TerraformElementMetadata.property.uniqueId",
            "displayName": "uniqueId",
            "id": "cdktf.TerraformElementMetadata.property.uniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly uniqueId: string;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformElementMetadata } from 'cdktf'\n\nconst terraformElementMetadata: TerraformElementMetadata = { ... }"
      },
      {
        "fqn": "cdktf.TerraformHclModuleOptions",
        "displayName": "TerraformHclModuleOptions",
        "id": "cdktf.TerraformHclModuleOptions",
        "properties": [
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformHclModuleOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: ITerraformDependable[];"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformHclModuleOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformHclModuleOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly providers: TerraformProvider | TerraformModuleProvider[];"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.skipAssetCreationFromLocalModules",
            "displayName": "skipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformHclModuleOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly skipAssetCreationFromLocalModules: boolean;"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.source",
            "displayName": "source",
            "id": "cdktf.TerraformHclModuleOptions.property.source",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly source: string;"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformHclModuleOptions.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly version: string;"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.variables",
            "displayName": "variables",
            "id": "cdktf.TerraformHclModuleOptions.property.variables",
            "optional": true,
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "any"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly variables: {[ key: string ]: any};"
          }
        ],
        "docs": {},
        "usage": "import { TerraformHclModuleOptions } from 'cdktf'\n\nconst terraformHclModuleOptions: TerraformHclModuleOptions = { ... }"
      },
      {
        "fqn": "cdktf.TerraformMetaArguments",
        "displayName": "TerraformMetaArguments",
        "id": "cdktf.TerraformMetaArguments",
        "properties": [
          {
            "fqn": "cdktf.TerraformMetaArguments.property.connection",
            "displayName": "connection",
            "id": "cdktf.TerraformMetaArguments.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "% | %",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly connection: SSHProvisionerConnection | WinrmProvisionerConnection;"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.count",
            "displayName": "count",
            "id": "cdktf.TerraformMetaArguments.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {},
            "usage": "public readonly count: number;"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformMetaArguments.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: ITerraformDependable[];"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformMetaArguments.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.TerraformMetaArguments.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly lifecycle: TerraformResourceLifecycle;"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformMetaArguments.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provider: TerraformProvider;"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.provisioners",
            "displayName": "provisioners",
            "id": "cdktf.TerraformMetaArguments.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provisioners: FileProvisioner | LocalExecProvisioner | RemoteExecProvisioner[];"
          }
        ],
        "docs": {},
        "usage": "import { TerraformMetaArguments } from 'cdktf'\n\nconst terraformMetaArguments: TerraformMetaArguments = { ... }"
      },
      {
        "fqn": "cdktf.TerraformModuleOptions",
        "displayName": "TerraformModuleOptions",
        "id": "cdktf.TerraformModuleOptions",
        "properties": [
          {
            "fqn": "cdktf.TerraformModuleOptions.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformModuleOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: ITerraformDependable[];"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformModuleOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformModuleOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly providers: TerraformProvider | TerraformModuleProvider[];"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.skipAssetCreationFromLocalModules",
            "displayName": "skipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformModuleOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly skipAssetCreationFromLocalModules: boolean;"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.source",
            "displayName": "source",
            "id": "cdktf.TerraformModuleOptions.property.source",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly source: string;"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformModuleOptions.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly version: string;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformModuleOptions } from 'cdktf'\n\nconst terraformModuleOptions: TerraformModuleOptions = { ... }"
      },
      {
        "fqn": "cdktf.TerraformModuleProvider",
        "displayName": "TerraformModuleProvider",
        "id": "cdktf.TerraformModuleProvider",
        "properties": [
          {
            "fqn": "cdktf.TerraformModuleProvider.property.moduleAlias",
            "displayName": "moduleAlias",
            "id": "cdktf.TerraformModuleProvider.property.moduleAlias",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly moduleAlias: string;"
          },
          {
            "fqn": "cdktf.TerraformModuleProvider.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformModuleProvider.property.provider",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provider: TerraformProvider;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformModuleProvider } from 'cdktf'\n\nconst terraformModuleProvider: TerraformModuleProvider = { ... }"
      },
      {
        "fqn": "cdktf.TerraformModuleUserOptions",
        "displayName": "TerraformModuleUserOptions",
        "id": "cdktf.TerraformModuleUserOptions",
        "properties": [
          {
            "fqn": "cdktf.TerraformModuleUserOptions.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformModuleUserOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: ITerraformDependable[];"
          },
          {
            "fqn": "cdktf.TerraformModuleUserOptions.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformModuleUserOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.TerraformModuleUserOptions.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformModuleUserOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "% | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly providers: TerraformProvider | TerraformModuleProvider[];"
          },
          {
            "fqn": "cdktf.TerraformModuleUserOptions.property.skipAssetCreationFromLocalModules",
            "displayName": "skipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformModuleUserOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly skipAssetCreationFromLocalModules: boolean;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformModuleUserOptions } from 'cdktf'\n\nconst terraformModuleUserOptions: TerraformModuleUserOptions = { ... }"
      },
      {
        "fqn": "cdktf.TerraformOutputConfig",
        "displayName": "TerraformOutputConfig",
        "id": "cdktf.TerraformOutputConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformOutputConfig.property.value",
            "displayName": "value",
            "id": "cdktf.TerraformOutputConfig.property.value",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {},
            "usage": "public readonly value: any;"
          },
          {
            "fqn": "cdktf.TerraformOutputConfig.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformOutputConfig.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: ITerraformDependable[];"
          },
          {
            "fqn": "cdktf.TerraformOutputConfig.property.description",
            "displayName": "description",
            "id": "cdktf.TerraformOutputConfig.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly description: string;"
          },
          {
            "fqn": "cdktf.TerraformOutputConfig.property.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.TerraformOutputConfig.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly sensitive: boolean;"
          },
          {
            "fqn": "cdktf.TerraformOutputConfig.property.staticId",
            "displayName": "staticId",
            "id": "cdktf.TerraformOutputConfig.property.staticId",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "If set to true the synthesized Terraform Output will be named after the `id` passed to the constructor instead of the default (TerraformOutput.friendlyUniqueId)."
            },
            "usage": "public readonly staticId: boolean;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformOutputConfig } from 'cdktf'\n\nconst terraformOutputConfig: TerraformOutputConfig = { ... }"
      },
      {
        "fqn": "cdktf.TerraformProviderConfig",
        "displayName": "TerraformProviderConfig",
        "id": "cdktf.TerraformProviderConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformProviderConfig.property.terraformResourceType",
            "displayName": "terraformResourceType",
            "id": "cdktf.TerraformProviderConfig.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly terraformResourceType: string;"
          },
          {
            "fqn": "cdktf.TerraformProviderConfig.property.terraformGeneratorMetadata",
            "displayName": "terraformGeneratorMetadata",
            "id": "cdktf.TerraformProviderConfig.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly terraformGeneratorMetadata: TerraformProviderGeneratorMetadata;"
          },
          {
            "fqn": "cdktf.TerraformProviderConfig.property.terraformProviderSource",
            "displayName": "terraformProviderSource",
            "id": "cdktf.TerraformProviderConfig.property.terraformProviderSource",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly terraformProviderSource: string;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformProviderConfig } from 'cdktf'\n\nconst terraformProviderConfig: TerraformProviderConfig = { ... }"
      },
      {
        "fqn": "cdktf.TerraformProviderGeneratorMetadata",
        "displayName": "TerraformProviderGeneratorMetadata",
        "id": "cdktf.TerraformProviderGeneratorMetadata",
        "properties": [
          {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata.property.providerName",
            "displayName": "providerName",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly providerName: string;"
          },
          {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata.property.providerVersion",
            "displayName": "providerVersion",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerVersion",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly providerVersion: string;"
          },
          {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata.property.providerVersionConstraint",
            "displayName": "providerVersionConstraint",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerVersionConstraint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly providerVersionConstraint: string;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformProviderGeneratorMetadata } from 'cdktf'\n\nconst terraformProviderGeneratorMetadata: TerraformProviderGeneratorMetadata = { ... }"
      },
      {
        "fqn": "cdktf.TerraformResourceConfig",
        "displayName": "TerraformResourceConfig",
        "id": "cdktf.TerraformResourceConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformResourceConfig.property.connection",
            "displayName": "connection",
            "id": "cdktf.TerraformResourceConfig.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "% | %",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly connection: SSHProvisionerConnection | WinrmProvisionerConnection;"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.count",
            "displayName": "count",
            "id": "cdktf.TerraformResourceConfig.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {},
            "usage": "public readonly count: number;"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.TerraformResourceConfig.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: ITerraformDependable[];"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.TerraformResourceConfig.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.TerraformResourceConfig.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly lifecycle: TerraformResourceLifecycle;"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformResourceConfig.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provider: TerraformProvider;"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.provisioners",
            "displayName": "provisioners",
            "id": "cdktf.TerraformResourceConfig.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "% | % | %",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provisioners: FileProvisioner | LocalExecProvisioner | RemoteExecProvisioner[];"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.terraformResourceType",
            "displayName": "terraformResourceType",
            "id": "cdktf.TerraformResourceConfig.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly terraformResourceType: string;"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.terraformGeneratorMetadata",
            "displayName": "terraformGeneratorMetadata",
            "id": "cdktf.TerraformResourceConfig.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly terraformGeneratorMetadata: TerraformProviderGeneratorMetadata;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformResourceConfig } from 'cdktf'\n\nconst terraformResourceConfig: TerraformResourceConfig = { ... }"
      },
      {
        "fqn": "cdktf.TerraformResourceLifecycle",
        "displayName": "TerraformResourceLifecycle",
        "id": "cdktf.TerraformResourceLifecycle",
        "properties": [
          {
            "fqn": "cdktf.TerraformResourceLifecycle.property.createBeforeDestroy",
            "displayName": "createBeforeDestroy",
            "id": "cdktf.TerraformResourceLifecycle.property.createBeforeDestroy",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly createBeforeDestroy: boolean;"
          },
          {
            "fqn": "cdktf.TerraformResourceLifecycle.property.ignoreChanges",
            "displayName": "ignoreChanges",
            "id": "cdktf.TerraformResourceLifecycle.property.ignoreChanges",
            "optional": true,
            "type": {
              "formattingPattern": "% | %",
              "types": [
                {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly ignoreChanges: string[] | string;"
          },
          {
            "fqn": "cdktf.TerraformResourceLifecycle.property.preventDestroy",
            "displayName": "preventDestroy",
            "id": "cdktf.TerraformResourceLifecycle.property.preventDestroy",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly preventDestroy: boolean;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformResourceLifecycle } from 'cdktf'\n\nconst terraformResourceLifecycle: TerraformResourceLifecycle = { ... }"
      },
      {
        "fqn": "cdktf.TerraformStackMetadata",
        "displayName": "TerraformStackMetadata",
        "id": "cdktf.TerraformStackMetadata",
        "properties": [
          {
            "fqn": "cdktf.TerraformStackMetadata.property.backend",
            "displayName": "backend",
            "id": "cdktf.TerraformStackMetadata.property.backend",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly backend: string;"
          },
          {
            "fqn": "cdktf.TerraformStackMetadata.property.stackName",
            "displayName": "stackName",
            "id": "cdktf.TerraformStackMetadata.property.stackName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly stackName: string;"
          },
          {
            "fqn": "cdktf.TerraformStackMetadata.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformStackMetadata.property.version",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly version: string;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformStackMetadata } from 'cdktf'\n\nconst terraformStackMetadata: TerraformStackMetadata = { ... }"
      },
      {
        "fqn": "cdktf.TerraformVariableConfig",
        "displayName": "TerraformVariableConfig",
        "id": "cdktf.TerraformVariableConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformVariableConfig.property.default",
            "displayName": "default",
            "id": "cdktf.TerraformVariableConfig.property.default",
            "optional": true,
            "type": {
              "formattingPattern": "any"
            },
            "docs": {},
            "usage": "public readonly default: any;"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.description",
            "displayName": "description",
            "id": "cdktf.TerraformVariableConfig.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly description: string;"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.nullable",
            "displayName": "nullable",
            "id": "cdktf.TerraformVariableConfig.property.nullable",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly nullable: boolean;"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.TerraformVariableConfig.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly sensitive: boolean;"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.type",
            "displayName": "type",
            "id": "cdktf.TerraformVariableConfig.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The type argument in a variable block allows you to restrict the type of value that will be accepted as the value for a variable.",
              "remarks": "If no type constraint is set then a value of any type is accepted.\n\nWhile type constraints are optional, we recommend specifying them; they serve as easy reminders for users of the module, and allow Terraform to return a helpful error message if the wrong type is used.\n\nType constraints are created from a mixture of type keywords and type constructors. The supported type keywords are:\n\n- string\n- number\n- bool\n\nThe type constructors allow you to specify complex types such as collections:\n\n- list(\\<TYPE\\>)\n- set(\\<TYPE\\>)\n- map(\\<TYPE\\>)\n- object({\\<ATTR NAME\\> = \\<TYPE\\>, ... })\n- tuple([\\<TYPE\\>, ...])\n\nThe keyword any may be used to indicate that any type is acceptable. For more information on the meaning and behavior of these different types, as well as detailed information about automatic conversion of complex types, see {@link https://www.terraform.io/docs/configuration/types.html|Type Constraints}.\n\nIf both the type and default arguments are specified, the given default value must be convertible to the specified type."
            },
            "usage": "public readonly type: string;"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.validation",
            "displayName": "validation",
            "id": "cdktf.TerraformVariableConfig.property.validation",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformVariableValidationConfig",
                      "displayName": "TerraformVariableValidationConfig",
                      "fqn": "cdktf.TerraformVariableValidationConfig",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Specify arbitrary custom validation rules for a particular variable using a validation block nested within the corresponding variable block."
            },
            "usage": "public readonly validation: TerraformVariableValidationConfig[];"
          }
        ],
        "docs": {},
        "usage": "import { TerraformVariableConfig } from 'cdktf'\n\nconst terraformVariableConfig: TerraformVariableConfig = { ... }"
      },
      {
        "fqn": "cdktf.TerraformVariableValidationConfig",
        "displayName": "TerraformVariableValidationConfig",
        "id": "cdktf.TerraformVariableValidationConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformVariableValidationConfig.property.condition",
            "displayName": "condition",
            "id": "cdktf.TerraformVariableValidationConfig.property.condition",
            "type": {
              "formattingPattern": "any"
            },
            "docs": {},
            "usage": "public readonly condition: any;"
          },
          {
            "fqn": "cdktf.TerraformVariableValidationConfig.property.errorMessage",
            "displayName": "errorMessage",
            "id": "cdktf.TerraformVariableValidationConfig.property.errorMessage",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly errorMessage: string;"
          }
        ],
        "docs": {},
        "usage": "import { TerraformVariableValidationConfig } from 'cdktf'\n\nconst terraformVariableValidationConfig: TerraformVariableValidationConfig = { ... }"
      },
      {
        "fqn": "cdktf.TestingAppOptions",
        "displayName": "TestingAppOptions",
        "id": "cdktf.TestingAppOptions",
        "properties": [
          {
            "fqn": "cdktf.TestingAppOptions.property.enableFutureFlags",
            "displayName": "enableFutureFlags",
            "id": "cdktf.TestingAppOptions.property.enableFutureFlags",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly enableFutureFlags: boolean;"
          },
          {
            "fqn": "cdktf.TestingAppOptions.property.fakeCdktfJsonPath",
            "displayName": "fakeCdktfJsonPath",
            "id": "cdktf.TestingAppOptions.property.fakeCdktfJsonPath",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly fakeCdktfJsonPath: boolean;"
          },
          {
            "fqn": "cdktf.TestingAppOptions.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.TestingAppOptions.property.outdir",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly outdir: string;"
          },
          {
            "fqn": "cdktf.TestingAppOptions.property.stackTraces",
            "displayName": "stackTraces",
            "id": "cdktf.TestingAppOptions.property.stackTraces",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly stackTraces: boolean;"
          },
          {
            "fqn": "cdktf.TestingAppOptions.property.stubVersion",
            "displayName": "stubVersion",
            "id": "cdktf.TestingAppOptions.property.stubVersion",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly stubVersion: boolean;"
          }
        ],
        "docs": {},
        "usage": "import { TestingAppOptions } from 'cdktf'\n\nconst testingAppOptions: TestingAppOptions = { ... }"
      },
      {
        "fqn": "cdktf.WinrmProvisionerConnection",
        "displayName": "WinrmProvisionerConnection",
        "id": "cdktf.WinrmProvisionerConnection",
        "properties": [
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.host",
            "displayName": "host",
            "id": "cdktf.WinrmProvisionerConnection.property.host",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The address of the resource to connect to."
            },
            "usage": "public readonly host: string;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.type",
            "displayName": "type",
            "id": "cdktf.WinrmProvisionerConnection.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The connection type.",
              "remarks": "Valid values are \"ssh\" and \"winrm\".\nProvisioners typically assume that the remote system runs Microsoft Windows when using WinRM.\nBehaviors based on the SSH target_platform will force Windows-specific behavior for WinRM, unless otherwise specified."
            },
            "usage": "public readonly type: string;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.cacert",
            "displayName": "cacert",
            "id": "cdktf.WinrmProvisionerConnection.property.cacert",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The CA certificate to validate against."
            },
            "usage": "public readonly cacert: string;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.https",
            "displayName": "https",
            "id": "cdktf.WinrmProvisionerConnection.property.https",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "Set to true to connect using HTTPS instead of HTTP."
            },
            "usage": "public readonly https: boolean;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.insecure",
            "displayName": "insecure",
            "id": "cdktf.WinrmProvisionerConnection.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "Set to true to skip validating the HTTPS certificate chain."
            },
            "usage": "public readonly insecure: boolean;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.password",
            "displayName": "password",
            "id": "cdktf.WinrmProvisionerConnection.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The password to use for the connection."
            },
            "usage": "public readonly password: string;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.port",
            "displayName": "port",
            "id": "cdktf.WinrmProvisionerConnection.property.port",
            "optional": true,
            "default": "22",
            "type": {
              "formattingPattern": "number"
            },
            "docs": {
              "summary": "The port to connect to."
            },
            "usage": "public readonly port: number;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.scriptPath",
            "displayName": "scriptPath",
            "id": "cdktf.WinrmProvisionerConnection.property.scriptPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The path used to copy scripts meant for remote execution.",
              "remarks": "Refer to {@link https://www.terraform.io/language/resources/provisioners/connection#how-provisioners-execute-remote-scripts How Provisioners Execute Remote Scripts below for more details}"
            },
            "usage": "public readonly scriptPath: string;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.timeout",
            "displayName": "timeout",
            "id": "cdktf.WinrmProvisionerConnection.property.timeout",
            "optional": true,
            "default": "5m",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The timeout to wait for the connection to become available.",
              "remarks": "Should be provided as a string (e.g., \"30s\" or \"5m\".)"
            },
            "usage": "public readonly timeout: string;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.useNtlm",
            "displayName": "useNtlm",
            "id": "cdktf.WinrmProvisionerConnection.property.useNtlm",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "Set to true to use NTLM authentication rather than default (basic authentication), removing the requirement for basic authentication to be enabled within the target guest.",
              "remarks": "Refer to Authentication for Remote Connections in the Windows App Development documentation for more details."
            },
            "usage": "public readonly useNtlm: boolean;"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.user",
            "displayName": "user",
            "id": "cdktf.WinrmProvisionerConnection.property.user",
            "optional": true,
            "default": "root",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The user to use for the connection."
            },
            "usage": "public readonly user: string;"
          }
        ],
        "docs": {
          "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
          "remarks": "See {@link https://www.terraform.io/language/resources/provisioners/connection connection}"
        },
        "usage": "import { WinrmProvisionerConnection } from 'cdktf'\n\nconst winrmProvisionerConnection: WinrmProvisionerConnection = { ... }"
      }
    ],
    "interfaces": [
      {
        "fqn": "cdktf.IAnyProducer",
        "displayName": "IAnyProducer",
        "id": "cdktf.IAnyProducer",
        "implementations": [
          {
            "fqn": "cdktf.IAnyProducer",
            "displayName": "IAnyProducer",
            "id": "cdktf.IAnyProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IAnyProducer.produce",
            "displayName": "produce",
            "id": "cdktf.IAnyProducer.produce",
            "parameters": [
              {
                "fqn": "cdktf.IAnyProducer.produce.parameter.context",
                "displayName": "context",
                "id": "cdktf.IAnyProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the value."
            },
            "usage": "public produce(context: IResolveContext): any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy untyped value producers."
        }
      },
      {
        "fqn": "cdktf.IAspect",
        "displayName": "IAspect",
        "id": "cdktf.IAspect",
        "implementations": [
          {
            "fqn": "cdktf.IAspect",
            "displayName": "IAspect",
            "id": "cdktf.IAspect",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IAspect.visit",
            "displayName": "visit",
            "id": "cdktf.IAspect.visit",
            "parameters": [
              {
                "fqn": "cdktf.IAspect.visit.parameter.node",
                "displayName": "node",
                "id": "cdktf.IAspect.visit.parameter.node",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "All aspects can visit an IConstruct."
            },
            "usage": "public visit(node: IConstruct): void"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Represents an Aspect."
        }
      },
      {
        "fqn": "cdktf.IFragmentConcatenator",
        "displayName": "IFragmentConcatenator",
        "id": "cdktf.IFragmentConcatenator",
        "implementations": [
          {
            "fqn": "cdktf.StringConcat",
            "displayName": "StringConcat",
            "id": "cdktf.StringConcat",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IFragmentConcatenator",
            "displayName": "IFragmentConcatenator",
            "id": "cdktf.IFragmentConcatenator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IFragmentConcatenator.join",
            "displayName": "join",
            "id": "cdktf.IFragmentConcatenator.join",
            "parameters": [
              {
                "fqn": "cdktf.IFragmentConcatenator.join.parameter.left",
                "displayName": "left",
                "id": "cdktf.IFragmentConcatenator.join.parameter.left",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.IFragmentConcatenator.join.parameter.right",
                "displayName": "right",
                "id": "cdktf.IFragmentConcatenator.join.parameter.right",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Join the fragment on the left and on the right."
            },
            "usage": "public join(left: any, right: any): any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Function used to concatenate symbols in the target document language.",
          "remarks": "Interface so it could potentially be exposed over jsii."
        }
      },
      {
        "fqn": "cdktf.IInterpolatingParent",
        "displayName": "IInterpolatingParent",
        "id": "cdktf.IInterpolatingParent",
        "implementations": [
          {
            "fqn": "cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IInterpolatingParent.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.IInterpolatingParent.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.IInterpolatingParent.interpolationForAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.IInterpolatingParent.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(terraformAttribute: string): IResolvable"
          }
        ],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.IListProducer",
        "displayName": "IListProducer",
        "id": "cdktf.IListProducer",
        "implementations": [
          {
            "fqn": "cdktf.IListProducer",
            "displayName": "IListProducer",
            "id": "cdktf.IListProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IListProducer.produce",
            "displayName": "produce",
            "id": "cdktf.IListProducer.produce",
            "parameters": [
              {
                "fqn": "cdktf.IListProducer.produce.parameter.context",
                "displayName": "context",
                "id": "cdktf.IListProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the list value."
            },
            "usage": "public produce(context: IResolveContext): string[]"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy list producers."
        }
      },
      {
        "fqn": "cdktf.IManifest",
        "displayName": "IManifest",
        "id": "cdktf.IManifest",
        "implementations": [
          {
            "fqn": "cdktf.Manifest",
            "displayName": "Manifest",
            "id": "cdktf.Manifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IManifest",
            "displayName": "IManifest",
            "id": "cdktf.IManifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.IManifest.property.stacks",
            "displayName": "stacks",
            "id": "cdktf.IManifest.property.stacks",
            "type": {
              "formattingPattern": "{[ key: string ]: %}",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackManifest",
                      "displayName": "StackManifest",
                      "fqn": "cdktf.StackManifest",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public readonly stacks: {[ key: string ]: StackManifest};"
          },
          {
            "fqn": "cdktf.IManifest.property.version",
            "displayName": "version",
            "id": "cdktf.IManifest.property.version",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly version: string;"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.INumberProducer",
        "displayName": "INumberProducer",
        "id": "cdktf.INumberProducer",
        "implementations": [
          {
            "fqn": "cdktf.INumberProducer",
            "displayName": "INumberProducer",
            "id": "cdktf.INumberProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.INumberProducer.produce",
            "displayName": "produce",
            "id": "cdktf.INumberProducer.produce",
            "parameters": [
              {
                "fqn": "cdktf.INumberProducer.produce.parameter.context",
                "displayName": "context",
                "id": "cdktf.INumberProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the number value."
            },
            "usage": "public produce(context: IResolveContext): number"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy number producers."
        }
      },
      {
        "fqn": "cdktf.IPostProcessor",
        "displayName": "IPostProcessor",
        "id": "cdktf.IPostProcessor",
        "implementations": [
          {
            "fqn": "cdktf.IPostProcessor",
            "displayName": "IPostProcessor",
            "id": "cdktf.IPostProcessor",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IPostProcessor.postProcess",
            "displayName": "postProcess",
            "id": "cdktf.IPostProcessor.postProcess",
            "parameters": [
              {
                "fqn": "cdktf.IPostProcessor.postProcess.parameter.input",
                "displayName": "input",
                "id": "cdktf.IPostProcessor.postProcess.parameter.input",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.IPostProcessor.postProcess.parameter.context",
                "displayName": "context",
                "id": "cdktf.IPostProcessor.postProcess.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Process the completely resolved value, after full recursion/resolution has happened."
            },
            "usage": "public postProcess(input: any, context: IResolveContext): any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "A Token that can post-process the complete resolved value, after resolve() has recursed over it."
        }
      },
      {
        "fqn": "cdktf.IRemoteWorkspace",
        "displayName": "IRemoteWorkspace",
        "id": "cdktf.IRemoteWorkspace",
        "implementations": [
          {
            "fqn": "cdktf.NamedRemoteWorkspace",
            "displayName": "NamedRemoteWorkspace",
            "id": "cdktf.NamedRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.PrefixedRemoteWorkspaces",
            "displayName": "PrefixedRemoteWorkspaces",
            "id": "cdktf.PrefixedRemoteWorkspaces",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.IResolvable",
        "displayName": "IResolvable",
        "id": "cdktf.IResolvable",
        "implementations": [
          {
            "fqn": "cdktf.AnyMap",
            "displayName": "AnyMap",
            "id": "cdktf.AnyMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMap",
            "displayName": "BooleanMap",
            "id": "cdktf.BooleanMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexList",
            "displayName": "ComplexList",
            "id": "cdktf.ComplexList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexMap",
            "displayName": "ComplexMap",
            "id": "cdktf.ComplexMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.LazyBase",
            "displayName": "LazyBase",
            "id": "cdktf.LazyBase",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMap",
            "displayName": "NumberMap",
            "id": "cdktf.NumberMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMap",
            "displayName": "StringMap",
            "id": "cdktf.StringMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IResolvable.resolve",
            "displayName": "resolve",
            "id": "cdktf.IResolvable.resolve",
            "parameters": [
              {
                "fqn": "cdktf.IResolvable.resolve.parameter.context",
                "displayName": "context",
                "id": "cdktf.IResolvable.resolve.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "public resolve(context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.IResolvable.toString",
            "displayName": "toString",
            "id": "cdktf.IResolvable.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "public toString(): string"
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.IResolvable.property.creationStack",
            "displayName": "creationStack",
            "id": "cdktf.IResolvable.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public readonly creationStack: string[];"
          }
        ],
        "docs": {
          "summary": "Interface for values that can be resolvable later.",
          "remarks": "Tokens are special objects that participate in synthesis."
        }
      },
      {
        "fqn": "cdktf.IResolveContext",
        "displayName": "IResolveContext",
        "id": "cdktf.IResolveContext",
        "implementations": [
          {
            "fqn": "cdktf.IResolveContext",
            "displayName": "IResolveContext",
            "id": "cdktf.IResolveContext",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IResolveContext.registerPostProcessor",
            "displayName": "registerPostProcessor",
            "id": "cdktf.IResolveContext.registerPostProcessor",
            "parameters": [
              {
                "fqn": "cdktf.IResolveContext.registerPostProcessor.parameter.postProcessor",
                "displayName": "postProcessor",
                "id": "cdktf.IResolveContext.registerPostProcessor.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Use this postprocessor after the entire token structure has been resolved."
            },
            "usage": "public registerPostProcessor(postProcessor: IPostProcessor): void"
          },
          {
            "fqn": "cdktf.IResolveContext.resolve",
            "displayName": "resolve",
            "id": "cdktf.IResolveContext.resolve",
            "parameters": [
              {
                "fqn": "cdktf.IResolveContext.resolve.parameter.x",
                "displayName": "x",
                "id": "cdktf.IResolveContext.resolve.parameter.x",
                "type": {
                  "formattingPattern": "any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve an inner object."
            },
            "usage": "public resolve(x: any): any"
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.IResolveContext.property.preparing",
            "displayName": "preparing",
            "id": "cdktf.IResolveContext.property.preparing",
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "True when we are still preparing, false if we're rendering the final output."
            },
            "usage": "public readonly preparing: boolean;"
          },
          {
            "fqn": "cdktf.IResolveContext.property.scope",
            "displayName": "scope",
            "id": "cdktf.IResolveContext.property.scope",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.IConstruct",
                  "displayName": "IConstruct",
                  "fqn": "constructs.IConstruct",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The scope from which resolution has been initiated."
            },
            "usage": "public readonly scope: IConstruct;"
          },
          {
            "fqn": "cdktf.IResolveContext.property.iteratorContext",
            "displayName": "iteratorContext",
            "id": "cdktf.IResolveContext.property.iteratorContext",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "TerraformIterators can be passed for block attributes and normal list attributes both require different handling when the iterable variable is accessed e.g. a dynamic block needs each.key while a for expression just needs key."
            },
            "usage": "public readonly iteratorContext: string;"
          },
          {
            "fqn": "cdktf.IResolveContext.property.suppressBraces",
            "displayName": "suppressBraces",
            "id": "cdktf.IResolveContext.property.suppressBraces",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {
              "summary": "True when ${} should be ommitted (because already inside them), false otherwise."
            },
            "usage": "public readonly suppressBraces: boolean;"
          }
        ],
        "docs": {
          "summary": "Current resolution context for tokens."
        }
      },
      {
        "fqn": "cdktf.IResource",
        "displayName": "IResource",
        "id": "cdktf.IResource",
        "implementations": [
          {
            "fqn": "cdktf.Resource",
            "displayName": "Resource",
            "id": "cdktf.Resource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResource",
            "displayName": "IResource",
            "id": "cdktf.IResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [
          {
            "fqn": "constructs.IConstruct",
            "displayName": "IConstruct",
            "id": "constructs.IConstruct",
            "packageName": "constructs",
            "packageVersion": "10.1.45"
          }
        ],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.IResource.property.node",
            "displayName": "node",
            "id": "cdktf.IResource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public readonly node: Node;"
          },
          {
            "fqn": "cdktf.IResource.property.stack",
            "displayName": "stack",
            "id": "cdktf.IResource.property.stack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The stack in which this resource is defined."
            },
            "usage": "public readonly stack: TerraformStack;"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.IResourceConstructor",
        "displayName": "IResourceConstructor",
        "id": "cdktf.IResourceConstructor",
        "implementations": [
          {
            "fqn": "cdktf.IResourceConstructor",
            "displayName": "IResourceConstructor",
            "id": "cdktf.IResourceConstructor",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.IScopeCallback",
        "displayName": "IScopeCallback",
        "id": "cdktf.IScopeCallback",
        "implementations": [
          {
            "fqn": "cdktf.IScopeCallback",
            "displayName": "IScopeCallback",
            "id": "cdktf.IScopeCallback",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.IStackSynthesizer",
        "displayName": "IStackSynthesizer",
        "id": "cdktf.IStackSynthesizer",
        "implementations": [
          {
            "fqn": "cdktf.IStackSynthesizer",
            "displayName": "IStackSynthesizer",
            "id": "cdktf.IStackSynthesizer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IStackSynthesizer.synthesize",
            "displayName": "synthesize",
            "id": "cdktf.IStackSynthesizer.synthesize",
            "parameters": [
              {
                "fqn": "cdktf.IStackSynthesizer.synthesize.parameter.session",
                "displayName": "session",
                "id": "cdktf.IStackSynthesizer.synthesize.parameter.session",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ISynthesisSession",
                      "displayName": "ISynthesisSession",
                      "fqn": "cdktf.ISynthesisSession",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Synthesize the associated stack to the session."
            },
            "usage": "public synthesize(session: ISynthesisSession): void"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Encodes information how a certain Stack should be deployed inspired by AWS CDK v2 implementation (synth functionality was removed in constructs v10)."
        }
      },
      {
        "fqn": "cdktf.IStringProducer",
        "displayName": "IStringProducer",
        "id": "cdktf.IStringProducer",
        "implementations": [
          {
            "fqn": "cdktf.IStringProducer",
            "displayName": "IStringProducer",
            "id": "cdktf.IStringProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IStringProducer.produce",
            "displayName": "produce",
            "id": "cdktf.IStringProducer.produce",
            "parameters": [
              {
                "fqn": "cdktf.IStringProducer.produce.parameter.context",
                "displayName": "context",
                "id": "cdktf.IStringProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the string value."
            },
            "usage": "public produce(context: IResolveContext): string"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy string producers."
        }
      },
      {
        "fqn": "cdktf.ISynthesisSession",
        "displayName": "ISynthesisSession",
        "id": "cdktf.ISynthesisSession",
        "implementations": [
          {
            "fqn": "cdktf.ISynthesisSession",
            "displayName": "ISynthesisSession",
            "id": "cdktf.ISynthesisSession",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.ISynthesisSession.property.manifest",
            "displayName": "manifest",
            "id": "cdktf.ISynthesisSession.property.manifest",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.Manifest",
                  "displayName": "Manifest",
                  "fqn": "cdktf.Manifest",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly manifest: Manifest;"
          },
          {
            "fqn": "cdktf.ISynthesisSession.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.ISynthesisSession.property.outdir",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The output directory for this synthesis session."
            },
            "usage": "public readonly outdir: string;"
          },
          {
            "fqn": "cdktf.ISynthesisSession.property.skipValidation",
            "displayName": "skipValidation",
            "id": "cdktf.ISynthesisSession.property.skipValidation",
            "optional": true,
            "type": {
              "formattingPattern": "boolean"
            },
            "docs": {},
            "usage": "public readonly skipValidation: boolean;"
          }
        ],
        "docs": {
          "summary": "Represents a single session of synthesis.",
          "remarks": "Passed into `TerraformStack.onSynthesize()` methods.\noriginally from aws/constructs lib v3.3.126 (synth functionality was removed in constructs v10)"
        }
      },
      {
        "fqn": "cdktf.ITerraformAddressable",
        "displayName": "ITerraformAddressable",
        "id": "cdktf.ITerraformAddressable",
        "implementations": [
          {
            "fqn": "cdktf.AnyMap",
            "displayName": "AnyMap",
            "id": "cdktf.AnyMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMap",
            "displayName": "BooleanMap",
            "id": "cdktf.BooleanMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexList",
            "displayName": "ComplexList",
            "id": "cdktf.ComplexList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexMap",
            "displayName": "ComplexMap",
            "id": "cdktf.ComplexMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState",
            "displayName": "DataTerraformRemoteState",
            "id": "cdktf.DataTerraformRemoteState",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory",
            "displayName": "DataTerraformRemoteStateArtifactory",
            "id": "cdktf.DataTerraformRemoteStateArtifactory",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm",
            "displayName": "DataTerraformRemoteStateAzurerm",
            "id": "cdktf.DataTerraformRemoteStateAzurerm",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul",
            "displayName": "DataTerraformRemoteStateConsul",
            "id": "cdktf.DataTerraformRemoteStateConsul",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos",
            "displayName": "DataTerraformRemoteStateCos",
            "id": "cdktf.DataTerraformRemoteStateCos",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd",
            "displayName": "DataTerraformRemoteStateEtcd",
            "id": "cdktf.DataTerraformRemoteStateEtcd",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3",
            "displayName": "DataTerraformRemoteStateEtcdV3",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs",
            "displayName": "DataTerraformRemoteStateGcs",
            "id": "cdktf.DataTerraformRemoteStateGcs",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp",
            "displayName": "DataTerraformRemoteStateHttp",
            "id": "cdktf.DataTerraformRemoteStateHttp",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal",
            "displayName": "DataTerraformRemoteStateLocal",
            "id": "cdktf.DataTerraformRemoteStateLocal",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta",
            "displayName": "DataTerraformRemoteStateManta",
            "id": "cdktf.DataTerraformRemoteStateManta",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss",
            "displayName": "DataTerraformRemoteStateOss",
            "id": "cdktf.DataTerraformRemoteStateOss",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg",
            "displayName": "DataTerraformRemoteStatePg",
            "id": "cdktf.DataTerraformRemoteStatePg",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3",
            "displayName": "DataTerraformRemoteStateS3",
            "id": "cdktf.DataTerraformRemoteStateS3",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift",
            "displayName": "DataTerraformRemoteStateSwift",
            "id": "cdktf.DataTerraformRemoteStateSwift",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMap",
            "displayName": "NumberMap",
            "id": "cdktf.NumberMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMap",
            "displayName": "StringMap",
            "id": "cdktf.StringMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformHclModule",
            "displayName": "TerraformHclModule",
            "id": "cdktf.TerraformHclModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformLocal",
            "displayName": "TerraformLocal",
            "id": "cdktf.TerraformLocal",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformModule",
            "displayName": "TerraformModule",
            "id": "cdktf.TerraformModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformRemoteState",
            "displayName": "TerraformRemoteState",
            "id": "cdktf.TerraformRemoteState",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformVariable",
            "displayName": "TerraformVariable",
            "id": "cdktf.TerraformVariable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.ITerraformAddressable.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ITerraformAddressable.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.ITerraformDependable",
        "displayName": "ITerraformDependable",
        "id": "cdktf.ITerraformDependable",
        "implementations": [
          {
            "fqn": "cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformHclModule",
            "displayName": "TerraformHclModule",
            "id": "cdktf.TerraformHclModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformModule",
            "displayName": "TerraformModule",
            "id": "cdktf.TerraformModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.ITerraformDependable.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ITerraformDependable.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.ITerraformIterator",
        "displayName": "ITerraformIterator",
        "id": "cdktf.ITerraformIterator",
        "implementations": [
          {
            "fqn": "cdktf.ListTerraformIterator",
            "displayName": "ListTerraformIterator",
            "id": "cdktf.ListTerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.MapTerraformIterator",
            "displayName": "MapTerraformIterator",
            "id": "cdktf.MapTerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformIterator",
            "displayName": "TerraformIterator",
            "id": "cdktf.TerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformIterator",
            "displayName": "ITerraformIterator",
            "id": "cdktf.ITerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.ITerraformResource",
        "displayName": "ITerraformResource",
        "id": "cdktf.ITerraformResource",
        "implementations": [
          {
            "fqn": "cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ITerraformResource.interpolationForAttribute",
            "displayName": "interpolationForAttribute",
            "id": "cdktf.ITerraformResource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ITerraformResource.interpolationForAttribute.parameter.terraformAttribute",
                "displayName": "terraformAttribute",
                "id": "cdktf.ITerraformResource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "public interpolationForAttribute(terraformAttribute: string): IResolvable"
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.ITerraformResource.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ITerraformResource.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly fqn: string;"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.friendlyUniqueId",
            "displayName": "friendlyUniqueId",
            "id": "cdktf.ITerraformResource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly friendlyUniqueId: string;"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.terraformResourceType",
            "displayName": "terraformResourceType",
            "id": "cdktf.ITerraformResource.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public readonly terraformResourceType: string;"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.count",
            "displayName": "count",
            "id": "cdktf.ITerraformResource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "number"
            },
            "docs": {},
            "usage": "public readonly count: number;"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.dependsOn",
            "displayName": "dependsOn",
            "id": "cdktf.ITerraformResource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly dependsOn: string[];"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.forEach",
            "displayName": "forEach",
            "id": "cdktf.ITerraformResource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly forEach: ITerraformIterator;"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.ITerraformResource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly lifecycle: TerraformResourceLifecycle;"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.provider",
            "displayName": "provider",
            "id": "cdktf.ITerraformResource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public readonly provider: TerraformProvider;"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.ITokenMapper",
        "displayName": "ITokenMapper",
        "id": "cdktf.ITokenMapper",
        "implementations": [
          {
            "fqn": "cdktf.ITokenMapper",
            "displayName": "ITokenMapper",
            "id": "cdktf.ITokenMapper",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ITokenMapper.mapToken",
            "displayName": "mapToken",
            "id": "cdktf.ITokenMapper.mapToken",
            "parameters": [
              {
                "fqn": "cdktf.ITokenMapper.mapToken.parameter.t",
                "displayName": "t",
                "id": "cdktf.ITokenMapper.mapToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Replace a single token."
            },
            "usage": "public mapToken(t: IResolvable): any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface to apply operation to tokens in a string.",
          "remarks": "Interface so it can be exported via jsii."
        }
      },
      {
        "fqn": "cdktf.ITokenResolver",
        "displayName": "ITokenResolver",
        "id": "cdktf.ITokenResolver",
        "implementations": [
          {
            "fqn": "cdktf.DefaultTokenResolver",
            "displayName": "DefaultTokenResolver",
            "id": "cdktf.DefaultTokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITokenResolver",
            "displayName": "ITokenResolver",
            "id": "cdktf.ITokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ITokenResolver.resolveList",
            "displayName": "resolveList",
            "id": "cdktf.ITokenResolver.resolveList",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolveList.parameter.l",
                "displayName": "l",
                "id": "cdktf.ITokenResolver.resolveList.parameter.l",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolveList.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized list."
            },
            "usage": "public resolveList(l: string[], context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.ITokenResolver.resolveMap",
            "displayName": "resolveMap",
            "id": "cdktf.ITokenResolver.resolveMap",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolveMap.parameter.m",
                "displayName": "m",
                "id": "cdktf.ITokenResolver.resolveMap.parameter.m",
                "type": {
                  "formattingPattern": "{[ key: string ]: %}",
                  "types": [
                    {
                      "formattingPattern": "any"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolveMap.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveMap.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized map."
            },
            "usage": "public resolveMap(m: {[ key: string ]: any}, context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.ITokenResolver.resolveNumberList",
            "displayName": "resolveNumberList",
            "id": "cdktf.ITokenResolver.resolveNumberList",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolveNumberList.parameter.l",
                "displayName": "l",
                "id": "cdktf.ITokenResolver.resolveNumberList.parameter.l",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "number"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolveNumberList.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveNumberList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized number list."
            },
            "usage": "public resolveNumberList(l: number[], context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.ITokenResolver.resolveString",
            "displayName": "resolveString",
            "id": "cdktf.ITokenResolver.resolveString",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolveString.parameter.s",
                "displayName": "s",
                "id": "cdktf.ITokenResolver.resolveString.parameter.s",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TokenizedStringFragments",
                      "displayName": "TokenizedStringFragments",
                      "fqn": "cdktf.TokenizedStringFragments",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolveString.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveString.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a string with at least one stringified token in it.",
              "remarks": "(May use concatenation)"
            },
            "usage": "public resolveString(s: TokenizedStringFragments, context: IResolveContext): any"
          },
          {
            "fqn": "cdktf.ITokenResolver.resolveToken",
            "displayName": "resolveToken",
            "id": "cdktf.ITokenResolver.resolveToken",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolveToken.parameter.t",
                "displayName": "t",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolveToken.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolveToken.parameter.postProcessor",
                "displayName": "postProcessor",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a single token."
            },
            "usage": "public resolveToken(t: IResolvable, context: IResolveContext, postProcessor: IPostProcessor): any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "How to resolve tokens."
        }
      }
    ],
    "enums": [
      {
        "fqn": "cdktf.AnnotationMetadataEntryType",
        "displayName": "AnnotationMetadataEntryType",
        "id": "cdktf.AnnotationMetadataEntryType",
        "members": [
          {
            "id": "cdktf.AnnotationMetadataEntryType.INFO",
            "displayName": "INFO",
            "fqn": "cdktf.AnnotationMetadataEntryType.INFO",
            "docs": {}
          },
          {
            "id": "cdktf.AnnotationMetadataEntryType.WARN",
            "displayName": "WARN",
            "fqn": "cdktf.AnnotationMetadataEntryType.WARN",
            "docs": {}
          },
          {
            "id": "cdktf.AnnotationMetadataEntryType.ERROR",
            "displayName": "ERROR",
            "fqn": "cdktf.AnnotationMetadataEntryType.ERROR",
            "docs": {}
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.AssetType",
        "displayName": "AssetType",
        "id": "cdktf.AssetType",
        "members": [
          {
            "id": "cdktf.AssetType.FILE",
            "displayName": "FILE",
            "fqn": "cdktf.AssetType.FILE",
            "docs": {}
          },
          {
            "id": "cdktf.AssetType.DIRECTORY",
            "displayName": "DIRECTORY",
            "fqn": "cdktf.AssetType.DIRECTORY",
            "docs": {}
          },
          {
            "id": "cdktf.AssetType.ARCHIVE",
            "displayName": "ARCHIVE",
            "fqn": "cdktf.AssetType.ARCHIVE",
            "docs": {}
          }
        ],
        "docs": {}
      }
    ]
  }
}