{
  "version": "0.1",
  "language": "csharp",
  "metadata": {
    "packageName": "cdktf",
    "packageVersion": "0.0.0"
  },
  "apiReference": {
    "constructs": [
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.App.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.App.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.App.Initializer.parameter.Options",
              "displayName": "Options",
              "id": "cdktf.App.Initializer.parameter.options",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.AppOptions",
                    "displayName": "AppOptions",
                    "fqn": "HashiCorp.Cdktf.AppOptions",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {
                "summary": "configuration options."
              }
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew App(AppOptions Options = null);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.App.ToString",
            "displayName": "ToString",
            "id": "cdktf.App.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.App.CrossStackReference",
            "displayName": "CrossStackReference",
            "id": "cdktf.App.crossStackReference",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.App.CrossStackReference.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.App.crossStackReference.parameter.fromStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.App.CrossStackReference.parameter.ToStack",
                "displayName": "ToStack",
                "id": "cdktf.App.crossStackReference.parameter.toStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.App.CrossStackReference.parameter.Identifier",
                "displayName": "Identifier",
                "id": "cdktf.App.crossStackReference.parameter.identifier",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a reference from one stack to another, invoked on prepareStack since it creates extra resources."
            },
            "usage": "private string CrossStackReference(TerraformStack FromStack, TerraformStack ToStack, string Identifier)"
          },
          {
            "fqn": "HashiCorp.Cdktf.App.Synth",
            "displayName": "Synth",
            "id": "cdktf.App.synth",
            "parameters": [],
            "docs": {
              "summary": "Synthesizes all resources to the output directory."
            },
            "usage": "private void Synth()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.App.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.App.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.App.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.App.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nApp.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.App.IsApp",
            "displayName": "IsApp",
            "id": "cdktf.App.isApp",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.App.IsApp.parameter.X",
                "displayName": "X",
                "id": "cdktf.App.isApp.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nApp.IsApp(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.App.Of",
            "displayName": "Of",
            "id": "cdktf.App.of",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.App.Of.parameter.Construct",
                "displayName": "Construct",
                "id": "cdktf.App.of.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "Constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nApp.Of(IConstruct Construct);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.App.property.Node",
            "displayName": "Node",
            "id": "cdktf.App.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.App.property.Manifest",
            "displayName": "Manifest",
            "id": "cdktf.App.property.manifest",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.Manifest",
                  "displayName": "Manifest",
                  "fqn": "HashiCorp.Cdktf.Manifest",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public Manifest Manifest { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.App.property.Outdir",
            "displayName": "Outdir",
            "id": "cdktf.App.property.outdir",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The output directory into which resources will be synthesized."
            },
            "usage": "public string Outdir { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.App.property.SkipValidation",
            "displayName": "SkipValidation",
            "id": "cdktf.App.property.skipValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Whether to skip the validation during synthesis of the app."
            },
            "usage": "public bool SkipValidation { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.App.property.TargetStackId",
            "displayName": "TargetStackId",
            "id": "cdktf.App.property.targetStackId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The stack which will be synthesized.",
              "remarks": "If not set, all stacks will be synthesized."
            },
            "usage": "public string TargetStackId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.App",
        "displayName": "App",
        "id": "cdktf.App",
        "docs": {
          "summary": "Represents a cdktf application."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ArtifactoryBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.ArtifactoryBackendProps",
                    "displayName": "ArtifactoryBackendProps",
                    "fqn": "HashiCorp.Cdktf.ArtifactoryBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew ArtifactoryBackend(Construct Scope, ArtifactoryBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.ArtifactoryBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.ArtifactoryBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.ArtifactoryBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.ArtifactoryBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.ArtifactoryBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.ArtifactoryBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.ArtifactoryBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.ArtifactoryBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.ArtifactoryBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.ArtifactoryBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.ArtifactoryBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nArtifactoryBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.ArtifactoryBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.ArtifactoryBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nArtifactoryBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.ArtifactoryBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.ArtifactoryBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ArtifactoryBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.ArtifactoryBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.ArtifactoryBackend",
        "displayName": "ArtifactoryBackend",
        "id": "cdktf.ArtifactoryBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.AzurermBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AzurermBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.AzurermBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.AzurermBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.AzurermBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.AzurermBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.AzurermBackendProps",
                    "displayName": "AzurermBackendProps",
                    "fqn": "HashiCorp.Cdktf.AzurermBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew AzurermBackend(Construct Scope, AzurermBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.AzurermBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.AzurermBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AzurermBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.AzurermBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.AzurermBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.AzurermBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.AzurermBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AzurermBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.AzurermBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.AzurermBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.AzurermBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.AzurermBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.AzurermBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AzurermBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.AzurermBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.AzurermBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.AzurermBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AzurermBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.AzurermBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nAzurermBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.AzurermBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AzurermBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.AzurermBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nAzurermBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.AzurermBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.AzurermBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.AzurermBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.AzurermBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.AzurermBackend",
        "displayName": "AzurermBackend",
        "id": "cdktf.AzurermBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.CloudBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CloudBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.CloudBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.CloudBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.CloudBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.CloudBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.CloudBackendProps",
                    "displayName": "CloudBackendProps",
                    "fqn": "HashiCorp.Cdktf.CloudBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew CloudBackend(Construct Scope, CloudBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.CloudBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.CloudBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CloudBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.CloudBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.CloudBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.CloudBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.CloudBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CloudBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.CloudBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.CloudBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.CloudBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.CloudBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.CloudBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CloudBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.CloudBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.CloudBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.CloudBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CloudBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.CloudBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nCloudBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.CloudBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CloudBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.CloudBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nCloudBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.CloudBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.CloudBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.CloudBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.CloudBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.CloudBackend",
        "displayName": "CloudBackend",
        "id": "cdktf.CloudBackend",
        "docs": {
          "summary": "The Cloud Backend synthesizes a {@link https://www.terraform.io/cli/cloud/settings#the-cloud-block cloud block}. The cloud block is a nested block within the top-level terraform settings block. It specifies which Terraform Cloud workspaces to use for the current working directory. The cloud block only affects Terraform CLI's behavior. When Terraform Cloud uses a configuration that contains a cloud block - for example, when a workspace is configured to use a VCS provider directly - it ignores the block and behaves according to its own workspace settings."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.ConsulBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ConsulBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.ConsulBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.ConsulBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ConsulBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.ConsulBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.ConsulBackendProps",
                    "displayName": "ConsulBackendProps",
                    "fqn": "HashiCorp.Cdktf.ConsulBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew ConsulBackend(Construct Scope, ConsulBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.ConsulBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.ConsulBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ConsulBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.ConsulBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ConsulBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.ConsulBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.ConsulBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ConsulBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.ConsulBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.ConsulBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.ConsulBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.ConsulBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.ConsulBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ConsulBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ConsulBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ConsulBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.ConsulBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ConsulBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.ConsulBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nConsulBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.ConsulBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ConsulBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.ConsulBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nConsulBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.ConsulBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.ConsulBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ConsulBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.ConsulBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.ConsulBackend",
        "displayName": "ConsulBackend",
        "id": "cdktf.ConsulBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.CosBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CosBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.CosBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.CosBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.CosBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.CosBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.CosBackendProps",
                    "displayName": "CosBackendProps",
                    "fqn": "HashiCorp.Cdktf.CosBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew CosBackend(Construct Scope, CosBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.CosBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.CosBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CosBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.CosBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.CosBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.CosBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.CosBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CosBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.CosBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.CosBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.CosBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.CosBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.CosBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CosBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.CosBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.CosBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.CosBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CosBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.CosBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nCosBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.CosBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.CosBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.CosBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nCosBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.CosBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.CosBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.CosBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.CosBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.CosBackend",
        "displayName": "CosBackend",
        "id": "cdktf.CosBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteState.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateRemoteConfig",
                    "displayName": "DataTerraformRemoteStateRemoteConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateRemoteConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteState(Construct Scope, string Id, DataTerraformRemoteStateRemoteConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteState.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteState.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteState.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteState.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteState.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteState.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteState.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteState.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteState.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteState.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteState.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteState.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteState.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteState.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteState.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteState.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteState.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteState.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteState.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteState.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteState.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteState.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteState.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteState.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteState.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteState.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteState.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState",
        "displayName": "DataTerraformRemoteState",
        "id": "cdktf.DataTerraformRemoteState",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
                    "displayName": "DataTerraformRemoteStateArtifactoryConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateArtifactory(Construct Scope, string Id, DataTerraformRemoteStateArtifactoryConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateArtifactory.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory",
        "displayName": "DataTerraformRemoteStateArtifactory",
        "id": "cdktf.DataTerraformRemoteStateArtifactory",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateAzurermConfig",
                    "displayName": "DataTerraformRemoteStateAzurermConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateAzurerm(Construct Scope, string Id, DataTerraformRemoteStateAzurermConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateAzurerm.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm",
        "displayName": "DataTerraformRemoteStateAzurerm",
        "id": "cdktf.DataTerraformRemoteStateAzurerm",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateConsul.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateConsulConfig",
                    "displayName": "DataTerraformRemoteStateConsulConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateConsul(Construct Scope, string Id, DataTerraformRemoteStateConsulConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateConsul.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateConsul.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateConsul.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateConsul.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateConsul.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateConsul.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateConsul.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateConsul.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateConsul.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateConsul.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateConsul.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateConsul.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateConsul.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateConsul.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateConsul.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateConsul.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateConsul.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateConsul.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul",
        "displayName": "DataTerraformRemoteStateConsul",
        "id": "cdktf.DataTerraformRemoteStateConsul",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateCos.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateCosConfig",
                    "displayName": "DataTerraformRemoteStateCosConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateCos(Construct Scope, string Id, DataTerraformRemoteStateCosConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateCos.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateCos.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateCos.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateCos.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateCos.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateCos.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateCos.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateCos.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateCos.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateCos.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateCos.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateCos.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateCos.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateCos.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateCos.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateCos.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateCos.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateCos.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateCos.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateCos.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateCos.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateCos.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateCos.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateCos.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateCos.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateCos.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateCos.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos",
        "displayName": "DataTerraformRemoteStateCos",
        "id": "cdktf.DataTerraformRemoteStateCos",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateEtcdConfig",
                    "displayName": "DataTerraformRemoteStateEtcdConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateEtcd(Construct Scope, string Id, DataTerraformRemoteStateEtcdConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateEtcd.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateEtcd.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateEtcd.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateEtcd.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateEtcd.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateEtcd.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateEtcd.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd",
        "displayName": "DataTerraformRemoteStateEtcd",
        "id": "cdktf.DataTerraformRemoteStateEtcd",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateEtcdV3Config",
                    "displayName": "DataTerraformRemoteStateEtcdV3Config",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateEtcdV3(Construct Scope, string Id, DataTerraformRemoteStateEtcdV3Config Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateEtcdV3.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3",
        "displayName": "DataTerraformRemoteStateEtcdV3",
        "id": "cdktf.DataTerraformRemoteStateEtcdV3",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateGcs.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateGcsConfig",
                    "displayName": "DataTerraformRemoteStateGcsConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateGcs(Construct Scope, string Id, DataTerraformRemoteStateGcsConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateGcs.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateGcs.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateGcs.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateGcs.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateGcs.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateGcs.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateGcs.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateGcs.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateGcs.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateGcs.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateGcs.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateGcs.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateGcs.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateGcs.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateGcs.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateGcs.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateGcs.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateGcs.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs",
        "displayName": "DataTerraformRemoteStateGcs",
        "id": "cdktf.DataTerraformRemoteStateGcs",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateHttp.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateHttpConfig",
                    "displayName": "DataTerraformRemoteStateHttpConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateHttp(Construct Scope, string Id, DataTerraformRemoteStateHttpConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateHttp.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateHttp.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateHttp.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateHttp.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateHttp.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateHttp.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateHttp.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateHttp.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateHttp.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateHttp.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateHttp.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateHttp.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateHttp.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateHttp.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateHttp.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateHttp.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateHttp.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateHttp.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp",
        "displayName": "DataTerraformRemoteStateHttp",
        "id": "cdktf.DataTerraformRemoteStateHttp",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateLocal.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateLocalConfig",
                    "displayName": "DataTerraformRemoteStateLocalConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocalConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateLocal(Construct Scope, string Id, DataTerraformRemoteStateLocalConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateLocal.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateLocal.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateLocal.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateLocal.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateLocal.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateLocal.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateLocal.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateLocal.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateLocal.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateLocal.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateLocal.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateLocal.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateLocal.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateLocal.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateLocal.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateLocal.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateLocal.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateLocal.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal",
        "displayName": "DataTerraformRemoteStateLocal",
        "id": "cdktf.DataTerraformRemoteStateLocal",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateManta.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateMantaConfig",
                    "displayName": "DataTerraformRemoteStateMantaConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateManta(Construct Scope, string Id, DataTerraformRemoteStateMantaConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateManta.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateManta.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateManta.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateManta.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateManta.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateManta.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateManta.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateManta.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateManta.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateManta.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateManta.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateManta.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateManta.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateManta.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateManta.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateManta.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateManta.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateManta.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateManta.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateManta.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateManta.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateManta.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateManta.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateManta.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateManta.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateManta.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateManta.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta",
        "displayName": "DataTerraformRemoteStateManta",
        "id": "cdktf.DataTerraformRemoteStateManta",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateOss.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateOssConfig",
                    "displayName": "DataTerraformRemoteStateOssConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateOss(Construct Scope, string Id, DataTerraformRemoteStateOssConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateOss.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateOss.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateOss.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateOss.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateOss.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateOss.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateOss.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateOss.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateOss.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateOss.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateOss.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateOss.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateOss.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateOss.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateOss.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateOss.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateOss.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateOss.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateOss.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateOss.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateOss.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateOss.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateOss.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateOss.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateOss.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateOss.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateOss.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss",
        "displayName": "DataTerraformRemoteStateOss",
        "id": "cdktf.DataTerraformRemoteStateOss",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStatePg.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStatePgConfig",
                    "displayName": "DataTerraformRemoteStatePgConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePgConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStatePg(Construct Scope, string Id, DataTerraformRemoteStatePgConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStatePg.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStatePg.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStatePg.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStatePg.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStatePg.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStatePg.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStatePg.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStatePg.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStatePg.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStatePg.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStatePg.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStatePg.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStatePg.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStatePg.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStatePg.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStatePg.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStatePg.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStatePg.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStatePg.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStatePg.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStatePg.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStatePg.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStatePg.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStatePg.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStatePg.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStatePg.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStatePg.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg",
        "displayName": "DataTerraformRemoteStatePg",
        "id": "cdktf.DataTerraformRemoteStatePg",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateS3.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateS3Config",
                    "displayName": "DataTerraformRemoteStateS3Config",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateS3(Construct Scope, string Id, DataTerraformRemoteStateS3Config Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateS3.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateS3.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateS3.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateS3.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateS3.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateS3.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateS3.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateS3.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateS3.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateS3.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateS3.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateS3.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateS3.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateS3.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateS3.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateS3.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateS3.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateS3.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateS3.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateS3.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateS3.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateS3.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateS3.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateS3.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateS3.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateS3.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateS3.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3",
        "displayName": "DataTerraformRemoteStateS3",
        "id": "cdktf.DataTerraformRemoteStateS3",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateSwift.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateSwiftConfig",
                    "displayName": "DataTerraformRemoteStateSwiftConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateSwift(Construct Scope, string Id, DataTerraformRemoteStateSwiftConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.ToString",
            "displayName": "ToString",
            "id": "cdktf.DataTerraformRemoteStateSwift.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.DataTerraformRemoteStateSwift.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.DataTerraformRemoteStateSwift.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.DataTerraformRemoteStateSwift.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateSwift.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.DataTerraformRemoteStateSwift.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.DataTerraformRemoteStateSwift.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.DataTerraformRemoteStateSwift.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.DataTerraformRemoteStateSwift.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.Get",
            "displayName": "Get",
            "id": "cdktf.DataTerraformRemoteStateSwift.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateSwift.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.DataTerraformRemoteStateSwift.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.GetList",
            "displayName": "GetList",
            "id": "cdktf.DataTerraformRemoteStateSwift.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.DataTerraformRemoteStateSwift.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.GetString",
            "displayName": "GetString",
            "id": "cdktf.DataTerraformRemoteStateSwift.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.DataTerraformRemoteStateSwift.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.DataTerraformRemoteStateSwift.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nDataTerraformRemoteStateSwift.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.property.Node",
            "displayName": "Node",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift",
        "displayName": "DataTerraformRemoteStateSwift",
        "id": "cdktf.DataTerraformRemoteStateSwift",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.EtcdBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.EtcdBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.EtcdBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.EtcdBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.EtcdBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.EtcdBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.EtcdBackendProps",
                    "displayName": "EtcdBackendProps",
                    "fqn": "HashiCorp.Cdktf.EtcdBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew EtcdBackend(Construct Scope, EtcdBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.EtcdBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.EtcdBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.EtcdBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.EtcdBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.EtcdBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.EtcdBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.EtcdBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.EtcdBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.EtcdBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.EtcdBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.EtcdBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.EtcdBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.EtcdBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.EtcdBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.EtcdBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nEtcdBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.EtcdBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.EtcdBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nEtcdBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.EtcdBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.EtcdBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.EtcdBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.EtcdBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.EtcdBackend",
        "displayName": "EtcdBackend",
        "id": "cdktf.EtcdBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.EtcdV3Backend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.EtcdV3Backend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.EtcdV3Backend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.EtcdV3Backend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.EtcdV3BackendProps",
                    "displayName": "EtcdV3BackendProps",
                    "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew EtcdV3Backend(Construct Scope, EtcdV3BackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.ToString",
            "displayName": "ToString",
            "id": "cdktf.EtcdV3Backend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.EtcdV3Backend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdV3Backend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.EtcdV3Backend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.EtcdV3Backend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.EtcdV3Backend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.EtcdV3Backend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdV3Backend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.EtcdV3Backend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.EtcdV3Backend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.EtcdV3Backend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.EtcdV3Backend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdV3Backend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.EtcdV3Backend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.EtcdV3Backend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.EtcdV3Backend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdV3Backend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.EtcdV3Backend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nEtcdV3Backend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.EtcdV3Backend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.EtcdV3Backend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.EtcdV3Backend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nEtcdV3Backend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.property.Node",
            "displayName": "Node",
            "id": "cdktf.EtcdV3Backend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.EtcdV3Backend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.EtcdV3Backend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3Backend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.EtcdV3Backend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.EtcdV3Backend",
        "displayName": "EtcdV3Backend",
        "id": "cdktf.EtcdV3Backend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.GcsBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.GcsBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.GcsBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.GcsBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.GcsBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.GcsBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.GcsBackendProps",
                    "displayName": "GcsBackendProps",
                    "fqn": "HashiCorp.Cdktf.GcsBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew GcsBackend(Construct Scope, GcsBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.GcsBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.GcsBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.GcsBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.GcsBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.GcsBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.GcsBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.GcsBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.GcsBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.GcsBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.GcsBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.GcsBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.GcsBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.GcsBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.GcsBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.GcsBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.GcsBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.GcsBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.GcsBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.GcsBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nGcsBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.GcsBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.GcsBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.GcsBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nGcsBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.GcsBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.GcsBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.GcsBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.GcsBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.GcsBackend",
        "displayName": "GcsBackend",
        "id": "cdktf.GcsBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.HttpBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.HttpBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.HttpBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.HttpBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.HttpBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.HttpBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.HttpBackendProps",
                    "displayName": "HttpBackendProps",
                    "fqn": "HashiCorp.Cdktf.HttpBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew HttpBackend(Construct Scope, HttpBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.HttpBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.HttpBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.HttpBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.HttpBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.HttpBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.HttpBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.HttpBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.HttpBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.HttpBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.HttpBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.HttpBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.HttpBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.HttpBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.HttpBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.HttpBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.HttpBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.HttpBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.HttpBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.HttpBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nHttpBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.HttpBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.HttpBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.HttpBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nHttpBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.HttpBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.HttpBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.HttpBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.HttpBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.HttpBackend",
        "displayName": "HttpBackend",
        "id": "cdktf.HttpBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.LocalBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.LocalBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.LocalBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.LocalBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.LocalBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.LocalBackend.Initializer.parameter.props",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.LocalBackendProps",
                    "displayName": "LocalBackendProps",
                    "fqn": "HashiCorp.Cdktf.LocalBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew LocalBackend(Construct Scope, LocalBackendProps Props = null);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.LocalBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.LocalBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.LocalBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.LocalBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.LocalBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.LocalBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.LocalBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.LocalBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.LocalBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.LocalBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.LocalBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.LocalBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.LocalBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.LocalBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.LocalBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.LocalBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.LocalBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.LocalBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.LocalBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nLocalBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.LocalBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.LocalBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.LocalBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nLocalBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.LocalBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.LocalBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.LocalBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.LocalBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.LocalBackend",
        "displayName": "LocalBackend",
        "id": "cdktf.LocalBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.MantaBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.MantaBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.MantaBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.MantaBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.MantaBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.MantaBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.MantaBackendProps",
                    "displayName": "MantaBackendProps",
                    "fqn": "HashiCorp.Cdktf.MantaBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew MantaBackend(Construct Scope, MantaBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.MantaBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.MantaBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MantaBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.MantaBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.MantaBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.MantaBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.MantaBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MantaBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.MantaBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.MantaBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.MantaBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.MantaBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.MantaBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MantaBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.MantaBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.MantaBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.MantaBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MantaBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.MantaBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nMantaBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.MantaBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MantaBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.MantaBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nMantaBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.MantaBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.MantaBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.MantaBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.MantaBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.MantaBackend",
        "displayName": "MantaBackend",
        "id": "cdktf.MantaBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.OssBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.OssBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.OssBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.OssBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.OssBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.OssBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.OssBackendProps",
                    "displayName": "OssBackendProps",
                    "fqn": "HashiCorp.Cdktf.OssBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew OssBackend(Construct Scope, OssBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.OssBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.OssBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.OssBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.OssBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.OssBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.OssBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.OssBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.OssBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.OssBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.OssBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.OssBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.OssBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.OssBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.OssBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.OssBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.OssBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.OssBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.OssBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.OssBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nOssBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.OssBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.OssBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.OssBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nOssBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.OssBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.OssBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.OssBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.OssBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.OssBackend",
        "displayName": "OssBackend",
        "id": "cdktf.OssBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.PgBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.PgBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.PgBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.PgBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.PgBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.PgBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.PgBackendProps",
                    "displayName": "PgBackendProps",
                    "fqn": "HashiCorp.Cdktf.PgBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew PgBackend(Construct Scope, PgBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.PgBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.PgBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.PgBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.PgBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.PgBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.PgBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.PgBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.PgBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.PgBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.PgBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.PgBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.PgBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.PgBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.PgBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.PgBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.PgBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.PgBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.PgBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.PgBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nPgBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.PgBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.PgBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.PgBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nPgBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.PgBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.PgBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.PgBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.PgBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.PgBackend",
        "displayName": "PgBackend",
        "id": "cdktf.PgBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.RemoteBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.RemoteBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.RemoteBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.RemoteBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.RemoteBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.RemoteBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.RemoteBackendProps",
                    "displayName": "RemoteBackendProps",
                    "fqn": "HashiCorp.Cdktf.RemoteBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew RemoteBackend(Construct Scope, RemoteBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.RemoteBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.RemoteBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.RemoteBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.RemoteBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.RemoteBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.RemoteBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.RemoteBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.RemoteBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.RemoteBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.RemoteBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.RemoteBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.RemoteBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.RemoteBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.RemoteBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.RemoteBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.RemoteBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.RemoteBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.RemoteBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.RemoteBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nRemoteBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.RemoteBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.RemoteBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.RemoteBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nRemoteBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.RemoteBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.RemoteBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.RemoteBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.RemoteBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.RemoteBackend",
        "displayName": "RemoteBackend",
        "id": "cdktf.RemoteBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.Resource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Resource.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.Resource.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.Resource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.Resource.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.Resource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew Resource(Construct Scope, string Id);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.IResource",
            "displayName": "IResource",
            "id": "cdktf.IResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Resource.ToString",
            "displayName": "ToString",
            "id": "cdktf.Resource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Resource.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.Resource.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Resource.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.Resource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nResource.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.Resource.property.Node",
            "displayName": "Node",
            "id": "cdktf.Resource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.Resource.property.Stack",
            "displayName": "Stack",
            "id": "cdktf.Resource.property.stack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The stack in which this resource is defined.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "public TerraformStack Stack { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.Resource",
        "displayName": "Resource",
        "id": "cdktf.Resource",
        "docs": {
          "summary": "A construct which represents a resource.",
          "deprecated": true,
          "deprecationReason": "- Please use Construct from the constructs package instead."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.S3Backend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.S3Backend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.S3Backend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.S3Backend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.S3Backend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.S3Backend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.S3BackendProps",
                    "displayName": "S3BackendProps",
                    "fqn": "HashiCorp.Cdktf.S3BackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew S3Backend(Construct Scope, S3BackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.ToString",
            "displayName": "ToString",
            "id": "cdktf.S3Backend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.S3Backend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.S3Backend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.S3Backend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.S3Backend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.S3Backend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.S3Backend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.S3Backend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.S3Backend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.S3Backend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.S3Backend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.S3Backend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.S3Backend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.S3Backend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.S3Backend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.S3Backend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.S3Backend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.S3Backend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.S3Backend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nS3Backend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.S3Backend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.S3Backend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.S3Backend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nS3Backend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.property.Node",
            "displayName": "Node",
            "id": "cdktf.S3Backend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.S3Backend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.S3Backend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3Backend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.S3Backend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.S3Backend",
        "displayName": "S3Backend",
        "id": "cdktf.S3Backend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.SwiftBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.SwiftBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.SwiftBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.SwiftBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.SwiftBackend.Initializer.parameter.Props",
              "displayName": "Props",
              "id": "cdktf.SwiftBackend.Initializer.parameter.props",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.SwiftBackendProps",
                    "displayName": "SwiftBackendProps",
                    "fqn": "HashiCorp.Cdktf.SwiftBackendProps",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew SwiftBackend(Construct Scope, SwiftBackendProps Props);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.SwiftBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.SwiftBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.SwiftBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.SwiftBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.SwiftBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.SwiftBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.SwiftBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.SwiftBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.SwiftBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.SwiftBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.SwiftBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.SwiftBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.SwiftBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.SwiftBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.SwiftBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.SwiftBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.SwiftBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.SwiftBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.SwiftBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nSwiftBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.SwiftBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.SwiftBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.SwiftBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nSwiftBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.SwiftBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.SwiftBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.SwiftBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.SwiftBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.SwiftBackend",
        "displayName": "SwiftBackend",
        "id": "cdktf.SwiftBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformAsset.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformAsset.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformAsset.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformAsset.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformAsset.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformAsset.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformAsset.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.TerraformAsset.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformAssetConfig",
                    "displayName": "TerraformAssetConfig",
                    "fqn": "HashiCorp.Cdktf.TerraformAssetConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformAsset(Construct Scope, string Id, TerraformAssetConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformAsset.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformAsset.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformAsset.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformAsset.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformAsset.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformAsset.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformAsset.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformAsset.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformAsset.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformAsset.property.FileName",
            "displayName": "FileName",
            "id": "cdktf.TerraformAsset.property.fileName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Name of the asset."
            },
            "usage": "public string FileName { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformAsset.property.Path",
            "displayName": "Path",
            "id": "cdktf.TerraformAsset.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The path relative to the root of the terraform directory in posix format Use this property to reference the asset."
            },
            "usage": "public string Path { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformAsset.property.AssetHash",
            "displayName": "AssetHash",
            "id": "cdktf.TerraformAsset.property.assetHash",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string AssetHash { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformAsset.property.Type",
            "displayName": "Type",
            "id": "cdktf.TerraformAsset.property.type",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AssetType",
                  "displayName": "AssetType",
                  "fqn": "HashiCorp.Cdktf.AssetType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public AssetType Type { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformAsset",
        "displayName": "TerraformAsset",
        "id": "cdktf.TerraformAsset",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformBackend.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformBackend.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformBackend.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformBackend.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformBackend.Initializer.parameter.Name",
              "displayName": "Name",
              "id": "cdktf.TerraformBackend.Initializer.parameter.name",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformBackend(Construct Scope, string Id, string Name);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformBackend.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformBackend.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformBackend.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformBackend.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.GetRemoteStateDataSource",
            "displayName": "GetRemoteStateDataSource",
            "id": "cdktf.TerraformBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformBackend.GetRemoteStateDataSource.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "Constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformBackend.GetRemoteStateDataSource.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformBackend.GetRemoteStateDataSource.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.fromStack",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "private TerraformRemoteState GetRemoteStateDataSource(Construct Scope, string Name, string FromStack)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformBackend.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformBackend.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformBackend.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.IsBackend",
            "displayName": "IsBackend",
            "id": "cdktf.TerraformBackend.isBackend",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformBackend.IsBackend.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTerraformBackend.IsBackend(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformBackend.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformBackend.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformBackend",
        "displayName": "TerraformBackend",
        "id": "cdktf.TerraformBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformDataSource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformDataSource.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformDataSource.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformDataSource.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformDataSource.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformResourceConfig",
                    "displayName": "TerraformResourceConfig",
                    "fqn": "HashiCorp.Cdktf.TerraformResourceConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformDataSource(Construct Scope, string Id, TerraformResourceConfig Config);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformDataSource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformDataSource.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformDataSource.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformDataSource.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformDataSource.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformDataSource.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformDataSource.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformDataSource.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformDataSource.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetAnyMapAttribute",
            "displayName": "GetAnyMapAttribute",
            "id": "cdktf.TerraformDataSource.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetAnyMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetAnyMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetBooleanAttribute",
            "displayName": "GetBooleanAttribute",
            "id": "cdktf.TerraformDataSource.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetBooleanAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBooleanAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetBooleanMapAttribute",
            "displayName": "GetBooleanMapAttribute",
            "id": "cdktf.TerraformDataSource.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetBooleanMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, bool> GetBooleanMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetListAttribute",
            "displayName": "GetListAttribute",
            "id": "cdktf.TerraformDataSource.getListAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetListAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetListAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetNumberAttribute",
            "displayName": "GetNumberAttribute",
            "id": "cdktf.TerraformDataSource.getNumberAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetNumberAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumberAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetNumberListAttribute",
            "displayName": "GetNumberListAttribute",
            "id": "cdktf.TerraformDataSource.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetNumberListAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double[] GetNumberListAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetNumberMapAttribute",
            "displayName": "GetNumberMapAttribute",
            "id": "cdktf.TerraformDataSource.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetNumberMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, double> GetNumberMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetStringAttribute",
            "displayName": "GetStringAttribute",
            "id": "cdktf.TerraformDataSource.getStringAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetStringAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetStringAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetStringMapAttribute",
            "displayName": "GetStringMapAttribute",
            "id": "cdktf.TerraformDataSource.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.GetStringMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, string> GetStringMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.TerraformDataSource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.InterpolationForAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformDataSource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string TerraformAttribute)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformDataSource.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformDataSource.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformDataSource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformDataSource.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformDataSource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformDataSource.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformDataSource.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformDataSource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.TerraformMetaArguments",
            "displayName": "TerraformMetaArguments",
            "id": "cdktf.TerraformDataSource.property.terraformMetaArguments",
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> TerraformMetaArguments { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.TerraformResourceType",
            "displayName": "TerraformResourceType",
            "id": "cdktf.TerraformDataSource.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TerraformResourceType { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.TerraformGeneratorMetadata",
            "displayName": "TerraformGeneratorMetadata",
            "id": "cdktf.TerraformDataSource.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProviderGeneratorMetadata TerraformGeneratorMetadata { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.Count",
            "displayName": "Count",
            "id": "cdktf.TerraformDataSource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {},
            "usage": "public double Count { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformDataSource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] DependsOn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformDataSource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.Lifecycle",
            "displayName": "Lifecycle",
            "id": "cdktf.TerraformDataSource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformResourceLifecycle Lifecycle { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource.property.Provider",
            "displayName": "Provider",
            "id": "cdktf.TerraformDataSource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "HashiCorp.Cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProvider Provider { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformDataSource",
        "displayName": "TerraformDataSource",
        "id": "cdktf.TerraformDataSource",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformElement.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformElement.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformElement.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformElement.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformElement.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformElement.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformElement.Initializer.parameter.ElementType",
              "displayName": "ElementType",
              "id": "cdktf.TerraformElement.Initializer.parameter.elementType",
              "optional": true,
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformElement(Construct Scope, string Id, string ElementType = null);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformElement.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformElement.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformElement.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformElement.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformElement.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformElement.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformElement.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformElement.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformElement.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformElement.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformElement.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformElement.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformElement.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformElement.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformElement.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformElement.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformElement.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformElement.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformElement.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElement.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformElement.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformElement",
        "displayName": "TerraformElement",
        "id": "cdktf.TerraformElement",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformHclModule.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformHclModule.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformHclModule.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformHclModule.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformHclModule.Initializer.parameter.Options",
              "displayName": "Options",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.options",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformHclModuleOptions",
                    "displayName": "TerraformHclModuleOptions",
                    "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformHclModule(Construct Scope, string Id, TerraformHclModuleOptions Options);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformHclModule.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformHclModule.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformHclModule.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformHclModule.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformHclModule.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformHclModule.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformHclModule.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformHclModule.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformHclModule.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.AddProvider",
            "displayName": "AddProvider",
            "id": "cdktf.TerraformHclModule.addProvider",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.AddProvider.parameter.Provider",
                "displayName": "Provider",
                "id": "cdktf.TerraformHclModule.addProvider.parameter.provider",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddProvider(object Provider)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.GetString",
            "displayName": "GetString",
            "id": "cdktf.TerraformHclModule.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformHclModule.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.InterpolationForOutput",
            "displayName": "InterpolationForOutput",
            "id": "cdktf.TerraformHclModule.interpolationForOutput",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.InterpolationForOutput.parameter.ModuleOutput",
                "displayName": "ModuleOutput",
                "id": "cdktf.TerraformHclModule.interpolationForOutput.parameter.moduleOutput",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForOutput(string ModuleOutput)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.Get",
            "displayName": "Get",
            "id": "cdktf.TerraformHclModule.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformHclModule.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private object Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.TerraformHclModule.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformHclModule.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.GetList",
            "displayName": "GetList",
            "id": "cdktf.TerraformHclModule.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformHclModule.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.TerraformHclModule.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformHclModule.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.Set",
            "displayName": "Set",
            "id": "cdktf.TerraformHclModule.set",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.Set.parameter.Variable",
                "displayName": "Variable",
                "id": "cdktf.TerraformHclModule.set.parameter.variable",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.Set.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformHclModule.set.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void Set(string Variable, object Value)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformHclModule.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformHclModule.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformHclModule.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformHclModule.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformHclModule.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformHclModule.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformHclModule.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformHclModule.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.Source",
            "displayName": "Source",
            "id": "cdktf.TerraformHclModule.property.source",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Source { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.Providers",
            "displayName": "Providers",
            "id": "cdktf.TerraformHclModule.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object[] Providers { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.SkipAssetCreationFromLocalModules",
            "displayName": "SkipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformHclModule.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool SkipAssetCreationFromLocalModules { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.Version",
            "displayName": "Version",
            "id": "cdktf.TerraformHclModule.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Version { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformHclModule.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] DependsOn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformHclModule.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule.property.Variables",
            "displayName": "Variables",
            "id": "cdktf.TerraformHclModule.property.variables",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Variables { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformHclModule",
        "displayName": "TerraformHclModule",
        "id": "cdktf.TerraformHclModule",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformLocal.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformLocal.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformLocal.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformLocal.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformLocal.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformLocal.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformLocal.Initializer.parameter.Expression",
              "displayName": "Expression",
              "id": "cdktf.TerraformLocal.Initializer.parameter.expression",
              "type": {
                "formattingPattern": "object"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformLocal(Construct Scope, string Id, object Expression);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformLocal.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformLocal.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformLocal.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformLocal.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformLocal.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformLocal.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformLocal.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformLocal.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformLocal.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformLocal.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformLocal.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformLocal.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformLocal.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformLocal.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformLocal.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformLocal.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformLocal.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformLocal.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformLocal.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformLocal.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.AsBoolean",
            "displayName": "AsBoolean",
            "id": "cdktf.TerraformLocal.property.asBoolean",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "HashiCorp.Cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public IResolvable AsBoolean { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.AsList",
            "displayName": "AsList",
            "id": "cdktf.TerraformLocal.property.asList",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] AsList { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.AsNumber",
            "displayName": "AsNumber",
            "id": "cdktf.TerraformLocal.property.asNumber",
            "type": {
              "formattingPattern": "double"
            },
            "docs": {},
            "usage": "public double AsNumber { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.AsString",
            "displayName": "AsString",
            "id": "cdktf.TerraformLocal.property.asString",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string AsString { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal.property.Expression",
            "displayName": "Expression",
            "id": "cdktf.TerraformLocal.property.expression",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {},
            "usage": "public object Expression { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformLocal",
        "displayName": "TerraformLocal",
        "id": "cdktf.TerraformLocal",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformModule.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformModule.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformModule.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformModule.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformModule.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformModule.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformModule.Initializer.parameter.Options",
              "displayName": "Options",
              "id": "cdktf.TerraformModule.Initializer.parameter.options",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformModuleOptions",
                    "displayName": "TerraformModuleOptions",
                    "fqn": "HashiCorp.Cdktf.TerraformModuleOptions",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformModule(Construct Scope, string Id, TerraformModuleOptions Options);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformModule.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformModule.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformModule.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformModule.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformModule.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformModule.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformModule.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformModule.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformModule.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformModule.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformModule.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformModule.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.AddProvider",
            "displayName": "AddProvider",
            "id": "cdktf.TerraformModule.addProvider",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformModule.AddProvider.parameter.Provider",
                "displayName": "Provider",
                "id": "cdktf.TerraformModule.addProvider.parameter.provider",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddProvider(object Provider)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.GetString",
            "displayName": "GetString",
            "id": "cdktf.TerraformModule.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformModule.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformModule.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.InterpolationForOutput",
            "displayName": "InterpolationForOutput",
            "id": "cdktf.TerraformModule.interpolationForOutput",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformModule.InterpolationForOutput.parameter.ModuleOutput",
                "displayName": "ModuleOutput",
                "id": "cdktf.TerraformModule.interpolationForOutput.parameter.moduleOutput",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForOutput(string ModuleOutput)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformModule.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformModule.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformModule.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformModule.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformModule.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformModule.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformModule.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformModule.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.Source",
            "displayName": "Source",
            "id": "cdktf.TerraformModule.property.source",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Source { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.Providers",
            "displayName": "Providers",
            "id": "cdktf.TerraformModule.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object[] Providers { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.SkipAssetCreationFromLocalModules",
            "displayName": "SkipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformModule.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool SkipAssetCreationFromLocalModules { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.Version",
            "displayName": "Version",
            "id": "cdktf.TerraformModule.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Version { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformModule.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] DependsOn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformModule.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformModule",
        "displayName": "TerraformModule",
        "id": "cdktf.TerraformModule",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformOutput.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformOutput.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformOutput.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformOutput.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformOutput.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformOutput.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformOutput.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.TerraformOutput.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformOutputConfig",
                    "displayName": "TerraformOutputConfig",
                    "fqn": "HashiCorp.Cdktf.TerraformOutputConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformOutput(Construct Scope, string Id, TerraformOutputConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformOutput.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformOutput.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformOutput.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformOutput.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformOutput.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformOutput.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformOutput.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformOutput.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformOutput.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformOutput.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformOutput.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformOutput.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformOutput.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformOutput.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformOutput.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformOutput.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.IsTerrafromOutput",
            "displayName": "IsTerrafromOutput",
            "id": "cdktf.TerraformOutput.isTerrafromOutput",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformOutput.IsTerrafromOutput.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformOutput.isTerrafromOutput.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTerraformOutput.IsTerrafromOutput(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformOutput.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformOutput.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformOutput.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformOutput.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.StaticId",
            "displayName": "StaticId",
            "id": "cdktf.TerraformOutput.property.staticId",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool StaticId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.Value",
            "displayName": "Value",
            "id": "cdktf.TerraformOutput.property.value",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {},
            "usage": "public object Value { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformOutput.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "HashiCorp.Cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformDependable[] DependsOn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.Description",
            "displayName": "Description",
            "id": "cdktf.TerraformOutput.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Description { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutput.property.Sensitive",
            "displayName": "Sensitive",
            "id": "cdktf.TerraformOutput.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Sensitive { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformOutput",
        "displayName": "TerraformOutput",
        "id": "cdktf.TerraformOutput",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformProvider.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformProvider.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformProvider.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformProvider.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformProvider.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformProvider.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformProvider.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.TerraformProvider.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformProviderConfig",
                    "displayName": "TerraformProviderConfig",
                    "fqn": "HashiCorp.Cdktf.TerraformProviderConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformProvider(Construct Scope, string Id, TerraformProviderConfig Config);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformProvider.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformProvider.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformProvider.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformProvider.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformProvider.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformProvider.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformProvider.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformProvider.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformProvider.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformProvider.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformProvider.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformProvider.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformProvider.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformProvider.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformProvider.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformProvider.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformProvider.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformProvider.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformProvider.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformProvider.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.MetaAttributes",
            "displayName": "MetaAttributes",
            "id": "cdktf.TerraformProvider.property.metaAttributes",
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> MetaAttributes { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.TerraformResourceType",
            "displayName": "TerraformResourceType",
            "id": "cdktf.TerraformProvider.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TerraformResourceType { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.TerraformGeneratorMetadata",
            "displayName": "TerraformGeneratorMetadata",
            "id": "cdktf.TerraformProvider.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProviderGeneratorMetadata TerraformGeneratorMetadata { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.TerraformProviderSource",
            "displayName": "TerraformProviderSource",
            "id": "cdktf.TerraformProvider.property.terraformProviderSource",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TerraformProviderSource { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProvider.property.Alias",
            "displayName": "Alias",
            "id": "cdktf.TerraformProvider.property.alias",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Alias { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformProvider",
        "displayName": "TerraformProvider",
        "id": "cdktf.TerraformProvider",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformRemoteState.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformRemoteState.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformRemoteState.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformRemoteState.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformRemoteState.Initializer.parameter.Backend",
              "displayName": "Backend",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.backend",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformRemoteState.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.DataTerraformRemoteStateConfig",
                    "displayName": "DataTerraformRemoteStateConfig",
                    "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformRemoteState(Construct Scope, string Id, string Backend, DataTerraformRemoteStateConfig Config);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformRemoteState.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformRemoteState.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformRemoteState.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformRemoteState.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformRemoteState.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformRemoteState.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformRemoteState.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformRemoteState.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformRemoteState.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.Get",
            "displayName": "Get",
            "id": "cdktf.TerraformRemoteState.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.Get.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformRemoteState.get.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Get(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.TerraformRemoteState.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.GetBoolean.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformRemoteState.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.GetList",
            "displayName": "GetList",
            "id": "cdktf.TerraformRemoteState.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.GetList.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformRemoteState.getList.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.TerraformRemoteState.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.GetNumber.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformRemoteState.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Output)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.GetString",
            "displayName": "GetString",
            "id": "cdktf.TerraformRemoteState.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.GetString.parameter.Output",
                "displayName": "Output",
                "id": "cdktf.TerraformRemoteState.getString.parameter.output",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Output)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformRemoteState.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformRemoteState.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformRemoteState.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformRemoteState.IsConstruct(object X);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.TerraformRemoteState.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformRemoteState.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformRemoteState.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformRemoteState.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformRemoteState.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformRemoteState",
        "displayName": "TerraformRemoteState",
        "id": "cdktf.TerraformRemoteState",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformResource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformResource.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformResource.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformResource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformResource.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformResource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformResource.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.TerraformResource.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformResourceConfig",
                    "displayName": "TerraformResourceConfig",
                    "fqn": "HashiCorp.Cdktf.TerraformResourceConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformResource(Construct Scope, string Id, TerraformResourceConfig Config);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformResource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformResource.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformResource.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformResource.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformResource.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformResource.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformResource.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformResource.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformResource.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetAnyMapAttribute",
            "displayName": "GetAnyMapAttribute",
            "id": "cdktf.TerraformResource.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetAnyMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetAnyMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetBooleanAttribute",
            "displayName": "GetBooleanAttribute",
            "id": "cdktf.TerraformResource.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetBooleanAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBooleanAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetBooleanMapAttribute",
            "displayName": "GetBooleanMapAttribute",
            "id": "cdktf.TerraformResource.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetBooleanMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, bool> GetBooleanMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetListAttribute",
            "displayName": "GetListAttribute",
            "id": "cdktf.TerraformResource.getListAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetListAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetListAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetNumberAttribute",
            "displayName": "GetNumberAttribute",
            "id": "cdktf.TerraformResource.getNumberAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetNumberAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumberAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetNumberListAttribute",
            "displayName": "GetNumberListAttribute",
            "id": "cdktf.TerraformResource.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetNumberListAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double[] GetNumberListAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetNumberMapAttribute",
            "displayName": "GetNumberMapAttribute",
            "id": "cdktf.TerraformResource.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetNumberMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, double> GetNumberMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetStringAttribute",
            "displayName": "GetStringAttribute",
            "id": "cdktf.TerraformResource.getStringAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetStringAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetStringAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.GetStringMapAttribute",
            "displayName": "GetStringMapAttribute",
            "id": "cdktf.TerraformResource.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.GetStringMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, string> GetStringMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.TerraformResource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.InterpolationForAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.TerraformResource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string TerraformAttribute)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformResource.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformResource.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformResource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformResource.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformResource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformResource.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformResource.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformResource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.TerraformMetaArguments",
            "displayName": "TerraformMetaArguments",
            "id": "cdktf.TerraformResource.property.terraformMetaArguments",
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> TerraformMetaArguments { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.TerraformResourceType",
            "displayName": "TerraformResourceType",
            "id": "cdktf.TerraformResource.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TerraformResourceType { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.TerraformGeneratorMetadata",
            "displayName": "TerraformGeneratorMetadata",
            "id": "cdktf.TerraformResource.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProviderGeneratorMetadata TerraformGeneratorMetadata { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.Connection",
            "displayName": "Connection",
            "id": "cdktf.TerraformResource.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "object",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object Connection { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.Count",
            "displayName": "Count",
            "id": "cdktf.TerraformResource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {},
            "usage": "public double Count { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformResource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] DependsOn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformResource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.Lifecycle",
            "displayName": "Lifecycle",
            "id": "cdktf.TerraformResource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformResourceLifecycle Lifecycle { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.Provider",
            "displayName": "Provider",
            "id": "cdktf.TerraformResource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "HashiCorp.Cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProvider Provider { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource.property.Provisioners",
            "displayName": "Provisioners",
            "id": "cdktf.TerraformResource.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "HashiCorp.Cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "HashiCorp.Cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object[] Provisioners { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformResource",
        "displayName": "TerraformResource",
        "id": "cdktf.TerraformResource",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformStack.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformStack.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformStack.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformStack.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformStack.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformStack.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformStack(Construct Scope, string Id);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformStack.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.AddDependency",
            "displayName": "AddDependency",
            "id": "cdktf.TerraformStack.addDependency",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.AddDependency.parameter.Dependency",
                "displayName": "Dependency",
                "id": "cdktf.TerraformStack.addDependency.parameter.dependency",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddDependency(TerraformStack Dependency)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformStack.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformStack.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformStack.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.AllProviders",
            "displayName": "AllProviders",
            "id": "cdktf.TerraformStack.allProviders",
            "parameters": [],
            "docs": {},
            "usage": "private TerraformProvider[] AllProviders()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformStack.dependsOn",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.DependsOn.parameter.Stack",
                "displayName": "Stack",
                "id": "cdktf.TerraformStack.dependsOn.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private bool DependsOn(TerraformStack Stack)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.EnsureBackendExists",
            "displayName": "EnsureBackendExists",
            "id": "cdktf.TerraformStack.ensureBackendExists",
            "parameters": [],
            "docs": {},
            "usage": "private TerraformBackend EnsureBackendExists()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.GetLogicalId",
            "displayName": "GetLogicalId",
            "id": "cdktf.TerraformStack.getLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.GetLogicalId.parameter.TfElement",
                "displayName": "TfElement",
                "id": "cdktf.TerraformStack.getLogicalId.parameter.tfElement",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformElement",
                          "displayName": "TerraformElement",
                          "fqn": "HashiCorp.Cdktf.TerraformElement",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "constructs.Node",
                          "displayName": "Node",
                          "fqn": "Constructs.Node",
                          "packageName": "constructs",
                          "packageVersion": "10.1.45"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetLogicalId(object TfElement)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.PrepareStack",
            "displayName": "PrepareStack",
            "id": "cdktf.TerraformStack.prepareStack",
            "parameters": [],
            "docs": {},
            "usage": "private void PrepareStack()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.RegisterIncomingCrossStackReference",
            "displayName": "RegisterIncomingCrossStackReference",
            "id": "cdktf.TerraformStack.registerIncomingCrossStackReference",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.RegisterIncomingCrossStackReference.parameter.FromStack",
                "displayName": "FromStack",
                "id": "cdktf.TerraformStack.registerIncomingCrossStackReference.parameter.fromStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private TerraformRemoteState RegisterIncomingCrossStackReference(TerraformStack FromStack)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.RegisterOutgoingCrossStackReference",
            "displayName": "RegisterOutgoingCrossStackReference",
            "id": "cdktf.TerraformStack.registerOutgoingCrossStackReference",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.RegisterOutgoingCrossStackReference.parameter.Identifier",
                "displayName": "Identifier",
                "id": "cdktf.TerraformStack.registerOutgoingCrossStackReference.parameter.identifier",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private TerraformOutput RegisterOutgoingCrossStackReference(string Identifier)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.RunAllValidations",
            "displayName": "RunAllValidations",
            "id": "cdktf.TerraformStack.runAllValidations",
            "parameters": [],
            "docs": {
              "summary": "Run all validations on the stack."
            },
            "usage": "private void RunAllValidations()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformStack.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformStack.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformStack.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformStack.IsConstruct(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.IsStack",
            "displayName": "IsStack",
            "id": "cdktf.TerraformStack.isStack",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.IsStack.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformStack.isStack.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTerraformStack.IsStack(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.Of",
            "displayName": "Of",
            "id": "cdktf.TerraformStack.of",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformStack.Of.parameter.Construct",
                "displayName": "Construct",
                "id": "cdktf.TerraformStack.of.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "Constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTerraformStack.Of(IConstruct Construct);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformStack.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.property.Dependencies",
            "displayName": "Dependencies",
            "id": "cdktf.TerraformStack.property.dependencies",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack[] Dependencies { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStack.property.Synthesizer",
            "displayName": "Synthesizer",
            "id": "cdktf.TerraformStack.property.synthesizer",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IStackSynthesizer",
                  "displayName": "IStackSynthesizer",
                  "fqn": "HashiCorp.Cdktf.IStackSynthesizer",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public IStackSynthesizer Synthesizer { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformStack",
        "displayName": "TerraformStack",
        "id": "cdktf.TerraformStack",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformVariable.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformVariable.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TerraformVariable.Initializer.parameter.Scope",
              "displayName": "Scope",
              "id": "cdktf.TerraformVariable.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "Constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformVariable.Initializer.parameter.Id",
              "displayName": "Id",
              "id": "cdktf.TerraformVariable.Initializer.parameter.id",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.TerraformVariable.Initializer.parameter.Config",
              "displayName": "Config",
              "id": "cdktf.TerraformVariable.Initializer.parameter.config",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformVariableConfig",
                    "displayName": "TerraformVariableConfig",
                    "fqn": "HashiCorp.Cdktf.TerraformVariableConfig",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformVariable(Construct Scope, string Id, TerraformVariableConfig Config);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.ToString",
            "displayName": "ToString",
            "id": "cdktf.TerraformVariable.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "private string ToString()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.AddOverride",
            "displayName": "AddOverride",
            "id": "cdktf.TerraformVariable.addOverride",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformVariable.AddOverride.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.TerraformVariable.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.TerraformVariable.AddOverride.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TerraformVariable.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddOverride(string Path, object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.OverrideLogicalId",
            "displayName": "OverrideLogicalId",
            "id": "cdktf.TerraformVariable.overrideLogicalId",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformVariable.OverrideLogicalId.parameter.NewLogicalId",
                "displayName": "NewLogicalId",
                "id": "cdktf.TerraformVariable.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "private void OverrideLogicalId(string NewLogicalId)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.ResetOverrideLogicalId",
            "displayName": "ResetOverrideLogicalId",
            "id": "cdktf.TerraformVariable.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "private void ResetOverrideLogicalId()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.ToMetadata",
            "displayName": "ToMetadata",
            "id": "cdktf.TerraformVariable.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "private object ToMetadata()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TerraformVariable.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.AddValidation",
            "displayName": "AddValidation",
            "id": "cdktf.TerraformVariable.addValidation",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformVariable.AddValidation.parameter.Validation",
                "displayName": "Validation",
                "id": "cdktf.TerraformVariable.addValidation.parameter.validation",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformVariableValidationConfig",
                      "displayName": "TerraformVariableValidationConfig",
                      "fqn": "HashiCorp.Cdktf.TerraformVariableValidationConfig",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddValidation(TerraformVariableValidationConfig Validation)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.SynthesizeAttributes",
            "displayName": "SynthesizeAttributes",
            "id": "cdktf.TerraformVariable.synthesizeAttributes",
            "parameters": [],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> SynthesizeAttributes()"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.IsConstruct",
            "displayName": "IsConstruct",
            "id": "cdktf.TerraformVariable.isConstruct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformVariable.IsConstruct.parameter.X",
                "displayName": "X",
                "id": "cdktf.TerraformVariable.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformVariable.IsConstruct(object X);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Node",
            "displayName": "Node",
            "id": "cdktf.TerraformVariable.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.CdktfStack",
            "displayName": "CdktfStack",
            "id": "cdktf.TerraformVariable.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformStack CdktfStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.TerraformVariable.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.TerraformVariable.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.BooleanValue",
            "displayName": "BooleanValue",
            "id": "cdktf.TerraformVariable.property.booleanValue",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "HashiCorp.Cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public IResolvable BooleanValue { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.ListValue",
            "displayName": "ListValue",
            "id": "cdktf.TerraformVariable.property.listValue",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] ListValue { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.NumberValue",
            "displayName": "NumberValue",
            "id": "cdktf.TerraformVariable.property.numberValue",
            "type": {
              "formattingPattern": "double"
            },
            "docs": {},
            "usage": "public double NumberValue { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.StringValue",
            "displayName": "StringValue",
            "id": "cdktf.TerraformVariable.property.stringValue",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string StringValue { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Value",
            "displayName": "Value",
            "id": "cdktf.TerraformVariable.property.value",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {},
            "usage": "public object Value { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Default",
            "displayName": "Default",
            "id": "cdktf.TerraformVariable.property.default",
            "optional": true,
            "type": {
              "formattingPattern": "object"
            },
            "docs": {},
            "usage": "public object Default { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Description",
            "displayName": "Description",
            "id": "cdktf.TerraformVariable.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Description { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Nullable",
            "displayName": "Nullable",
            "id": "cdktf.TerraformVariable.property.nullable",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Nullable { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Sensitive",
            "displayName": "Sensitive",
            "id": "cdktf.TerraformVariable.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Sensitive { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Type",
            "displayName": "Type",
            "id": "cdktf.TerraformVariable.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Type { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable.property.Validation",
            "displayName": "Validation",
            "id": "cdktf.TerraformVariable.property.validation",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformVariableValidationConfig",
                      "displayName": "TerraformVariableValidationConfig",
                      "fqn": "HashiCorp.Cdktf.TerraformVariableValidationConfig",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformVariableValidationConfig[] Validation { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TerraformVariable",
        "displayName": "TerraformVariable",
        "id": "cdktf.TerraformVariable",
        "docs": {}
      }
    ],
    "classes": [
      {
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Annotations.AddError",
            "displayName": "AddError",
            "id": "cdktf.Annotations.addError",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Annotations.AddError.parameter.Message",
                "displayName": "Message",
                "id": "cdktf.Annotations.addError.parameter.message",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The error message."
                }
              }
            ],
            "docs": {
              "summary": "Adds an { \"error\": <message> } metadata entry to this construct.",
              "remarks": "The toolkit will fail synthesis when errors are reported."
            },
            "usage": "private void AddError(string Message)"
          },
          {
            "fqn": "HashiCorp.Cdktf.Annotations.AddInfo",
            "displayName": "AddInfo",
            "id": "cdktf.Annotations.addInfo",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Annotations.AddInfo.parameter.Message",
                "displayName": "Message",
                "id": "cdktf.Annotations.addInfo.parameter.message",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The info message."
                }
              }
            ],
            "docs": {
              "summary": "Adds an info metadata entry to this construct.",
              "remarks": "The CLI will display the info message when apps are synthesized."
            },
            "usage": "private void AddInfo(string Message)"
          },
          {
            "fqn": "HashiCorp.Cdktf.Annotations.AddWarning",
            "displayName": "AddWarning",
            "id": "cdktf.Annotations.addWarning",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Annotations.AddWarning.parameter.Message",
                "displayName": "Message",
                "id": "cdktf.Annotations.addWarning.parameter.message",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "The warning message."
                }
              }
            ],
            "docs": {
              "summary": "Adds a warning metadata entry to this construct.",
              "remarks": "The CLI will display the warning when an app is synthesized.\nIn a future release the CLI might introduce a --strict flag which\nwill then fail the synthesis if it encounters a warning."
            },
            "usage": "private void AddWarning(string Message)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Annotations.Of",
            "displayName": "Of",
            "id": "cdktf.Annotations.of",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Annotations.Of.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.Annotations.of.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "Constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {
                  "summary": "The scope."
                }
              }
            ],
            "docs": {
              "summary": "Returns the annotations API for a construct scope."
            },
            "usage": "using HashiCorp.Cdktf;\n\nAnnotations.Of(IConstruct Scope);"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.Annotations",
        "displayName": "Annotations",
        "id": "cdktf.Annotations",
        "docs": {
          "summary": "Includes API for attaching annotations such as warning messages to constructs."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.AnyMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AnyMap.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.AnyMap.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.AnyMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.AnyMap.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.AnyMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew AnyMap(IInterpolatingParent TerraformResource, string TerraformAttribute);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.AnyMap.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.AnyMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMap.Lookup",
            "displayName": "Lookup",
            "id": "cdktf.AnyMap.lookup",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AnyMap.Lookup.parameter.Key",
                "displayName": "Key",
                "id": "cdktf.AnyMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private object Lookup(string Key)"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMap.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.AnyMap.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AnyMap.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.AnyMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMap.ToString",
            "displayName": "ToString",
            "id": "cdktf.AnyMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.AnyMap.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.AnyMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMap.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.AnyMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.AnyMap",
        "displayName": "AnyMap",
        "id": "cdktf.AnyMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.AnyMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AnyMapList.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.AnyMapList.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.AnyMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.AnyMapList.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.AnyMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.AnyMapList.Initializer.parameter.WrapsSet",
              "displayName": "WrapsSet",
              "id": "cdktf.AnyMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew AnyMapList(IInterpolatingParent TerraformResource, string TerraformAttribute, bool WrapsSet);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.AnyMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList.Get",
            "displayName": "Get",
            "id": "cdktf.AnyMapList.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AnyMapList.Get.parameter.Index",
                "displayName": "Index",
                "id": "cdktf.AnyMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private AnyMap Get(double Index)"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.AnyMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AnyMapList.InterpolationForAttribute.parameter.Property",
                "displayName": "Property",
                "id": "cdktf.AnyMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string Property)"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.AnyMapList.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.AnyMapList.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.AnyMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList.ToString",
            "displayName": "ToString",
            "id": "cdktf.AnyMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.AnyMapList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.AnyMapList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.AnyMapList",
        "displayName": "AnyMapList",
        "id": "cdktf.AnyMapList",
        "docs": {}
      },
      {
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Aspects.Add",
            "displayName": "Add",
            "id": "cdktf.Aspects.add",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Aspects.Add.parameter.Aspect",
                "displayName": "Aspect",
                "id": "cdktf.Aspects.add.parameter.aspect",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAspect",
                      "displayName": "IAspect",
                      "fqn": "HashiCorp.Cdktf.IAspect",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The aspect to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds an aspect to apply this scope before synthesis."
            },
            "usage": "private void Add(IAspect Aspect)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Aspects.Of",
            "displayName": "Of",
            "id": "cdktf.Aspects.of",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Aspects.Of.parameter.Scope",
                "displayName": "Scope",
                "id": "cdktf.Aspects.of.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "Constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {
                  "summary": "The scope for which these aspects will apply."
                }
              }
            ],
            "docs": {
              "summary": "Returns the `Aspects` object associated with a construct scope."
            },
            "usage": "using HashiCorp.Cdktf;\n\nAspects.Of(IConstruct Scope);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.Aspects.property.All",
            "displayName": "All",
            "id": "cdktf.Aspects.property.all",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAspect",
                      "displayName": "IAspect",
                      "fqn": "HashiCorp.Cdktf.IAspect",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "The list of aspects which were directly applied on this scope."
            },
            "usage": "public IAspect[] All { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.Aspects",
        "displayName": "Aspects",
        "id": "cdktf.Aspects",
        "docs": {
          "summary": "Aspects can be applied to CDK tree scopes and can operate on the tree before synthesis."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.testingMatchers.AssertionReturn.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.testingMatchers.AssertionReturn.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.testingMatchers.AssertionReturn.Initializer.parameter.Message",
              "displayName": "Message",
              "id": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.message",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.testingMatchers.AssertionReturn.Initializer.parameter.Pass",
              "displayName": "Pass",
              "id": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.pass",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew AssertionReturn(string Message, bool Pass);"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.testingMatchers.AssertionReturn.property.Message",
            "displayName": "Message",
            "id": "cdktf.testingMatchers.AssertionReturn.property.message",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Message { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.testingMatchers.AssertionReturn.property.Pass",
            "displayName": "Pass",
            "id": "cdktf.testingMatchers.AssertionReturn.property.pass",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Pass { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.testingMatchers.AssertionReturn",
        "displayName": "AssertionReturn",
        "id": "cdktf.testingMatchers.AssertionReturn",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.BooleanMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.BooleanMap.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.BooleanMap.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.BooleanMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.BooleanMap.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.BooleanMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew BooleanMap(IInterpolatingParent TerraformResource, string TerraformAttribute);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.BooleanMap.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.BooleanMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMap.Lookup",
            "displayName": "Lookup",
            "id": "cdktf.BooleanMap.lookup",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.BooleanMap.Lookup.parameter.Key",
                "displayName": "Key",
                "id": "cdktf.BooleanMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Lookup(string Key)"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMap.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.BooleanMap.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.BooleanMap.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.BooleanMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMap.ToString",
            "displayName": "ToString",
            "id": "cdktf.BooleanMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.BooleanMap.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.BooleanMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMap.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.BooleanMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.BooleanMap",
        "displayName": "BooleanMap",
        "id": "cdktf.BooleanMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.BooleanMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.BooleanMapList.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.BooleanMapList.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.BooleanMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.BooleanMapList.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.BooleanMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.BooleanMapList.Initializer.parameter.WrapsSet",
              "displayName": "WrapsSet",
              "id": "cdktf.BooleanMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew BooleanMapList(IInterpolatingParent TerraformResource, string TerraformAttribute, bool WrapsSet);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.BooleanMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList.Get",
            "displayName": "Get",
            "id": "cdktf.BooleanMapList.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.BooleanMapList.Get.parameter.Index",
                "displayName": "Index",
                "id": "cdktf.BooleanMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private BooleanMap Get(double Index)"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.BooleanMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.BooleanMapList.InterpolationForAttribute.parameter.Property",
                "displayName": "Property",
                "id": "cdktf.BooleanMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string Property)"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.BooleanMapList.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.BooleanMapList.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.BooleanMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList.ToString",
            "displayName": "ToString",
            "id": "cdktf.BooleanMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.BooleanMapList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.BooleanMapList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.BooleanMapList",
        "displayName": "BooleanMapList",
        "id": "cdktf.BooleanMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.CloudWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CloudWorkspace.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew CloudWorkspace();"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.CloudWorkspace.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.CloudWorkspace.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.CloudWorkspace",
        "displayName": "CloudWorkspace",
        "id": "cdktf.CloudWorkspace",
        "docs": {
          "summary": "A cloud workspace can either be a single named workspace, or a list of tagged workspaces."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.ComplexComputedList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexComputedList.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.ComplexComputedList.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexComputedList.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexComputedList.Initializer.parameter.ComplexComputedListIndex",
              "displayName": "ComplexComputedListIndex",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.complexComputedListIndex",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexComputedList.Initializer.parameter.WrapsSet",
              "displayName": "WrapsSet",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.wrapsSet",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew ComplexComputedList(IInterpolatingParent TerraformResource, string TerraformAttribute, string ComplexComputedListIndex, bool WrapsSet = null);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.ComplexComputedList.computeFqn",
            "parameters": [],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetAnyMapAttribute",
            "displayName": "GetAnyMapAttribute",
            "id": "cdktf.ComplexComputedList.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetAnyMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetAnyMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetBooleanAttribute",
            "displayName": "GetBooleanAttribute",
            "id": "cdktf.ComplexComputedList.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetBooleanAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private IResolvable GetBooleanAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetBooleanMapAttribute",
            "displayName": "GetBooleanMapAttribute",
            "id": "cdktf.ComplexComputedList.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetBooleanMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private System.Collections.Generic.IDictionary<string, bool> GetBooleanMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetListAttribute",
            "displayName": "GetListAttribute",
            "id": "cdktf.ComplexComputedList.getListAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetListAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private string[] GetListAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetNumberAttribute",
            "displayName": "GetNumberAttribute",
            "id": "cdktf.ComplexComputedList.getNumberAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetNumberAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private double GetNumberAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetNumberListAttribute",
            "displayName": "GetNumberListAttribute",
            "id": "cdktf.ComplexComputedList.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetNumberListAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private double[] GetNumberListAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetNumberMapAttribute",
            "displayName": "GetNumberMapAttribute",
            "id": "cdktf.ComplexComputedList.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetNumberMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private System.Collections.Generic.IDictionary<string, double> GetNumberMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetStringAttribute",
            "displayName": "GetStringAttribute",
            "id": "cdktf.ComplexComputedList.getStringAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetStringAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private string GetStringAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetStringMapAttribute",
            "displayName": "GetStringMapAttribute",
            "id": "cdktf.ComplexComputedList.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.GetStringMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexComputedList.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private System.Collections.Generic.IDictionary<string, string> GetStringMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.ComplexComputedList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.InterpolationForAttribute.parameter.Property",
                "displayName": "Property",
                "id": "cdktf.ComplexComputedList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private IResolvable InterpolationForAttribute(string Property)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.ComplexComputedList.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexComputedList.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ComplexComputedList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.ToString",
            "displayName": "ToString",
            "id": "cdktf.ComplexComputedList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.ComplexComputedList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ComplexComputedList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.ComplexComputedList",
        "displayName": "ComplexComputedList",
        "id": "cdktf.ComplexComputedList",
        "docs": {
          "deprecated": true,
          "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.ComplexList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexList.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.ComplexList.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.ComplexList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexList.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.ComplexList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexList.Initializer.parameter.WrapsSet",
              "displayName": "WrapsSet",
              "id": "cdktf.ComplexList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew ComplexList(IInterpolatingParent TerraformResource, string TerraformAttribute, bool WrapsSet);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ComplexList.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.ComplexList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexList.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.ComplexList.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexList.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ComplexList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexList.ToString",
            "displayName": "ToString",
            "id": "cdktf.ComplexList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ComplexList.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.ComplexList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexList.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ComplexList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.ComplexList",
        "displayName": "ComplexList",
        "id": "cdktf.ComplexList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.ComplexMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexMap.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.ComplexMap.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.ComplexMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexMap.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.ComplexMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew ComplexMap(IInterpolatingParent TerraformResource, string TerraformAttribute);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ComplexMap.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.ComplexMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexMap.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.ComplexMap.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexMap.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ComplexMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexMap.ToString",
            "displayName": "ToString",
            "id": "cdktf.ComplexMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ComplexMap.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.ComplexMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexMap.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ComplexMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.ComplexMap",
        "displayName": "ComplexMap",
        "id": "cdktf.ComplexMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.ComplexObject.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexObject.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.ComplexObject.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.ComplexObject.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexObject.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.ComplexObject.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexObject.Initializer.parameter.ComplexObjectIsFromSet",
              "displayName": "ComplexObjectIsFromSet",
              "id": "cdktf.ComplexObject.Initializer.parameter.complexObjectIsFromSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "set to true if this item is from inside a set and needs tolist() for accessing it set to \"0\" for single list items."
              }
            },
            {
              "fqn": "HashiCorp.Cdktf.ComplexObject.Initializer.parameter.ComplexObjectIndex",
              "displayName": "ComplexObjectIndex",
              "id": "cdktf.ComplexObject.Initializer.parameter.complexObjectIndex",
              "optional": true,
              "type": {
                "formattingPattern": "object",
                "types": [
                  {
                    "formattingPattern": "string"
                  },
                  {
                    "formattingPattern": "double"
                  }
                ]
              },
              "docs": {
                "summary": "the index of the complex object in a list."
              }
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew ComplexObject(IInterpolatingParent TerraformResource, string TerraformAttribute, bool ComplexObjectIsFromSet, object ComplexObjectIndex = null);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.ComplexObject.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetAnyMapAttribute",
            "displayName": "GetAnyMapAttribute",
            "id": "cdktf.ComplexObject.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetAnyMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetAnyMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetBooleanAttribute",
            "displayName": "GetBooleanAttribute",
            "id": "cdktf.ComplexObject.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetBooleanAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBooleanAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetBooleanMapAttribute",
            "displayName": "GetBooleanMapAttribute",
            "id": "cdktf.ComplexObject.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetBooleanMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, bool> GetBooleanMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetListAttribute",
            "displayName": "GetListAttribute",
            "id": "cdktf.ComplexObject.getListAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetListAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string[] GetListAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetNumberAttribute",
            "displayName": "GetNumberAttribute",
            "id": "cdktf.ComplexObject.getNumberAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetNumberAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double GetNumberAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetNumberListAttribute",
            "displayName": "GetNumberListAttribute",
            "id": "cdktf.ComplexObject.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetNumberListAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double[] GetNumberListAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetNumberMapAttribute",
            "displayName": "GetNumberMapAttribute",
            "id": "cdktf.ComplexObject.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetNumberMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, double> GetNumberMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetStringAttribute",
            "displayName": "GetStringAttribute",
            "id": "cdktf.ComplexObject.getStringAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetStringAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string GetStringAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.GetStringMapAttribute",
            "displayName": "GetStringMapAttribute",
            "id": "cdktf.ComplexObject.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.GetStringMapAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ComplexObject.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, string> GetStringMapAttribute(string TerraformAttribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.ComplexObject.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.InterpolationForAttribute.parameter.Property",
                "displayName": "Property",
                "id": "cdktf.ComplexObject.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string Property)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.ComplexObject.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ComplexObject.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ComplexObject.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.ToString",
            "displayName": "ToString",
            "id": "cdktf.ComplexObject.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.ComplexObject.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ComplexObject.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.ComplexObject",
        "displayName": "ComplexObject",
        "id": "cdktf.ComplexObject",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DefaultTokenResolver.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.Initializer.parameter.Concat",
              "displayName": "Concat",
              "id": "cdktf.DefaultTokenResolver.Initializer.parameter.concat",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IFragmentConcatenator",
                    "displayName": "IFragmentConcatenator",
                    "fqn": "HashiCorp.Cdktf.IFragmentConcatenator",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew DefaultTokenResolver(IFragmentConcatenator Concat);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITokenResolver",
            "displayName": "ITokenResolver",
            "id": "cdktf.ITokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveList",
            "displayName": "ResolveList",
            "id": "cdktf.DefaultTokenResolver.resolveList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveList.parameter.Xs",
                "displayName": "Xs",
                "id": "cdktf.DefaultTokenResolver.resolveList.parameter.xs",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveList.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.DefaultTokenResolver.resolveList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a list of string."
            },
            "usage": "private object ResolveList(string[] Xs, IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveMap",
            "displayName": "ResolveMap",
            "id": "cdktf.DefaultTokenResolver.resolveMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveMap.parameter.Xs",
                "displayName": "Xs",
                "id": "cdktf.DefaultTokenResolver.resolveMap.parameter.xs",
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveMap.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.DefaultTokenResolver.resolveMap.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a map token."
            },
            "usage": "private object ResolveMap(System.Collections.Generic.IDictionary<string, object> Xs, IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveNumberList",
            "displayName": "ResolveNumberList",
            "id": "cdktf.DefaultTokenResolver.resolveNumberList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveNumberList.parameter.Xs",
                "displayName": "Xs",
                "id": "cdktf.DefaultTokenResolver.resolveNumberList.parameter.xs",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "double"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveNumberList.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.DefaultTokenResolver.resolveNumberList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a list of numbers."
            },
            "usage": "private object ResolveNumberList(double[] Xs, IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveString",
            "displayName": "ResolveString",
            "id": "cdktf.DefaultTokenResolver.resolveString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveString.parameter.Fragments",
                "displayName": "Fragments",
                "id": "cdktf.DefaultTokenResolver.resolveString.parameter.fragments",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TokenizedStringFragments",
                      "displayName": "TokenizedStringFragments",
                      "fqn": "HashiCorp.Cdktf.TokenizedStringFragments",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveString.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.DefaultTokenResolver.resolveString.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve string fragments to Tokens."
            },
            "usage": "private object ResolveString(TokenizedStringFragments Fragments, IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveToken",
            "displayName": "ResolveToken",
            "id": "cdktf.DefaultTokenResolver.resolveToken",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveToken.parameter.T",
                "displayName": "T",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "HashiCorp.Cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveToken.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.DefaultTokenResolver.ResolveToken.parameter.PostProcessor",
                "displayName": "PostProcessor",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "HashiCorp.Cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Default Token resolution.",
              "remarks": "Resolve the Token, recurse into whatever it returns,\nthen finally post-process it."
            },
            "usage": "private object ResolveToken(IResolvable T, IResolveContext Context, IPostProcessor PostProcessor)"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.DefaultTokenResolver",
        "displayName": "DefaultTokenResolver",
        "id": "cdktf.DefaultTokenResolver",
        "docs": {
          "summary": "Default resolver implementation."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.Fn.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Fn.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew Fn();"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Fn.Abs",
            "displayName": "Abs",
            "id": "cdktf.Fn.abs",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Abs.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.abs.parameter.value",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/abs.html abs} returns the absolute value of the given number."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Abs(double Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Abspath",
            "displayName": "Abspath",
            "id": "cdktf.Fn.abspath",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Abspath.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.abspath.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/abspath.html abspath} takes a string containing a filesystem path and converts it to an absolute path."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Abspath(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Alltrue",
            "displayName": "Alltrue",
            "id": "cdktf.Fn.alltrue",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Alltrue.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.alltrue.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/alltrue.html alltrue} returns true if all elements in a given collection are true or \"true\"."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Alltrue(object[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Anytrue",
            "displayName": "Anytrue",
            "id": "cdktf.Fn.anytrue",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Anytrue.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.anytrue.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/anytrue.html anytrue} returns true if any element in a given collection is true or \"true\"."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Anytrue(object[] Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Base64decode",
            "displayName": "Base64decode",
            "id": "cdktf.Fn.base64decode",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Base64decode.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.base64decode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64decode.html base64decode} takes a string containing a Base64 character sequence and returns the original string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Base64decode(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Base64encode",
            "displayName": "Base64encode",
            "id": "cdktf.Fn.base64encode",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Base64encode.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.base64encode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64encode.html base64encode} takes a string containing a Base64 character sequence and returns the original string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Base64encode(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Base64gzip",
            "displayName": "Base64gzip",
            "id": "cdktf.Fn.base64gzip",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Base64gzip.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.base64gzip.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64gzip.html base64gzip} compresses a string with gzip and then encodes the result in Base64 encoding."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Base64gzip(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Base64sha256",
            "displayName": "Base64sha256",
            "id": "cdktf.Fn.base64sha256",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Base64sha256.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.base64sha256.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64sha256.html base64sha256} computes the SHA256 hash of a given string and encodes it with Base64."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Base64sha256(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Base64sha512",
            "displayName": "Base64sha512",
            "id": "cdktf.Fn.base64sha512",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Base64sha512.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.base64sha512.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64sha512.html base64sha512} computes the SHA512 hash of a given string and encodes it with Base64."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Base64sha512(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Basename",
            "displayName": "Basename",
            "id": "cdktf.Fn.basename",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Basename.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.basename.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/basename.html basename} takes a string containing a filesystem path and removes all except the last portion from it."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Basename(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Bcrypt",
            "displayName": "Bcrypt",
            "id": "cdktf.Fn.bcrypt",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Bcrypt.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.bcrypt.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Bcrypt.parameter.Cost",
                "displayName": "Cost",
                "id": "cdktf.Fn.bcrypt.parameter.cost",
                "optional": true,
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/bcrypt.html bcrypt} computes a hash of the given string using the Blowfish cipher, returning a string in the Modular Crypt Format usually expected in the shadow password file on many Unix systems."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Bcrypt(string Value, double Cost = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Can",
            "displayName": "Can",
            "id": "cdktf.Fn.can",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Can.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.can.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/can.html can} evaluates the given expression and returns a boolean value indicating whether the expression produced a result without any errors."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Can(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Ceil",
            "displayName": "Ceil",
            "id": "cdktf.Fn.ceil",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Ceil.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.ceil.parameter.value",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/ceil.html ceil} returns the closest whole number that is greater than or equal to the given value, which may be a fraction."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Ceil(double Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Chomp",
            "displayName": "Chomp",
            "id": "cdktf.Fn.chomp",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Chomp.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.chomp.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/chomp.html chomp} removes newline characters at the end of a string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Chomp(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Chunklist",
            "displayName": "Chunklist",
            "id": "cdktf.Fn.chunklist",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Chunklist.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.chunklist.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Chunklist.parameter.ChunkSize",
                "displayName": "ChunkSize",
                "id": "cdktf.Fn.chunklist.parameter.chunkSize",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/chunklist.html chunklist} splits a single list into fixed-size chunks, returning a list of lists."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Chunklist(object[] Value, double ChunkSize);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Cidrhost",
            "displayName": "Cidrhost",
            "id": "cdktf.Fn.cidrhost",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Cidrhost.parameter.Prefix",
                "displayName": "Prefix",
                "id": "cdktf.Fn.cidrhost.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Cidrhost.parameter.Hostnum",
                "displayName": "Hostnum",
                "id": "cdktf.Fn.cidrhost.parameter.hostnum",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrhost.html cidrhost} calculates a full host IP address for a given host number within a given IP network address prefix."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Cidrhost(string Prefix, double Hostnum);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Cidrnetmask",
            "displayName": "Cidrnetmask",
            "id": "cdktf.Fn.cidrnetmask",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Cidrnetmask.parameter.Prefix",
                "displayName": "Prefix",
                "id": "cdktf.Fn.cidrnetmask.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrnetmask.html cidrnetmask} converts an IPv4 address prefix given in CIDR notation into a subnet mask address."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Cidrnetmask(string Prefix);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Cidrsubnet",
            "displayName": "Cidrsubnet",
            "id": "cdktf.Fn.cidrsubnet",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Cidrsubnet.parameter.Prefix",
                "displayName": "Prefix",
                "id": "cdktf.Fn.cidrsubnet.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Cidrsubnet.parameter.Newbits",
                "displayName": "Newbits",
                "id": "cdktf.Fn.cidrsubnet.parameter.newbits",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Cidrsubnet.parameter.Netnum",
                "displayName": "Netnum",
                "id": "cdktf.Fn.cidrsubnet.parameter.netnum",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrsubnet.html cidrsubnet} calculates a subnet address within given IP network address prefix."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Cidrsubnet(string Prefix, double Newbits, double Netnum);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Cidrsubnets",
            "displayName": "Cidrsubnets",
            "id": "cdktf.Fn.cidrsubnets",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Cidrsubnets.parameter.Prefix",
                "displayName": "Prefix",
                "id": "cdktf.Fn.cidrsubnets.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Cidrsubnets.parameter.Newbits",
                "displayName": "Newbits",
                "id": "cdktf.Fn.cidrsubnets.parameter.newbits",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "double"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrsubnets.html cidrsubnets} calculates a sequence of consecutive IP address ranges within a particular CIDR prefix."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Cidrsubnets(string Prefix, double[] Newbits);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Coalesce",
            "displayName": "Coalesce",
            "id": "cdktf.Fn.coalesce",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Coalesce.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.coalesce.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/coalesce.html coalesce} takes any number of arguments and returns the first one that isn't null or an empty string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Coalesce(object[] Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Coalescelist",
            "displayName": "Coalescelist",
            "id": "cdktf.Fn.coalescelist",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Coalescelist.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.coalescelist.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/coalescelist.html coalescelist} takes any number of list arguments and returns the first one that isn't empty."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Coalescelist(object[][] Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Compact",
            "displayName": "Compact",
            "id": "cdktf.Fn.compact",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Compact.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.compact.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/compact.html compact} takes a list of strings and returns a new list with any empty string elements removed."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Compact(string[] Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Concat",
            "displayName": "Concat",
            "id": "cdktf.Fn.concat",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Concat.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.concat.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/concat.html concat} takes two or more lists and combines them into a single list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Concat(object[][] Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Contains",
            "displayName": "Contains",
            "id": "cdktf.Fn.contains",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Contains.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.contains.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Contains.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.contains.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/contains.html contains} determines whether a given list or set contains a given single value as one of its elements."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Contains(object List, object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Csvdecode",
            "displayName": "Csvdecode",
            "id": "cdktf.Fn.csvdecode",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Csvdecode.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.csvdecode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/csvdecode.html csvdecode} decodes a string containing CSV-formatted data and produces a list of maps representing that data."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Csvdecode(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Dirname",
            "displayName": "Dirname",
            "id": "cdktf.Fn.dirname",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Dirname.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.dirname.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/dirname.html dirname} takes a string containing a filesystem path and removes the last portion from it."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Dirname(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Distinct",
            "displayName": "Distinct",
            "id": "cdktf.Fn.distinct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Distinct.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.distinct.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/distinct.html distinct} takes a list and returns a new list with any duplicate elements removed."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Distinct(object List);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Element",
            "displayName": "Element",
            "id": "cdktf.Fn.element",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Element.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.element.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Element.parameter.Index",
                "displayName": "Index",
                "id": "cdktf.Fn.element.parameter.index",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/element.html element} retrieves a single element from a list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Element(object List, double Index);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.File",
            "displayName": "File",
            "id": "cdktf.Fn.file",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.File.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.file.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/file.html file} takes a string containing a filesystem path and removes all except the last portion from it."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.File(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Filebase64",
            "displayName": "Filebase64",
            "id": "cdktf.Fn.filebase64",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Filebase64.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.filebase64.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64.html filebase64} reads the contents of a file at the given path and returns them as a base64-encoded string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Filebase64(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Filebase64sha256",
            "displayName": "Filebase64sha256",
            "id": "cdktf.Fn.filebase64sha256",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Filebase64sha256.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.filebase64sha256.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64sha256.html filebase64sha256} is a variant of base64sha256 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Filebase64sha256(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Filebase64sha512",
            "displayName": "Filebase64sha512",
            "id": "cdktf.Fn.filebase64sha512",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Filebase64sha512.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.filebase64sha512.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64sha512.html filebase64sha512} is a variant of base64sha512 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Filebase64sha512(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Fileexists",
            "displayName": "Fileexists",
            "id": "cdktf.Fn.fileexists",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Fileexists.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.fileexists.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/fileexists.html fileexists} determines whether a file exists at a given path."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Fileexists(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Filemd5",
            "displayName": "Filemd5",
            "id": "cdktf.Fn.filemd5",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Filemd5.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.filemd5.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filemd5.html filemd5} is a variant of md5 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Filemd5(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Fileset",
            "displayName": "Fileset",
            "id": "cdktf.Fn.fileset",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Fileset.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.Fn.fileset.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Fileset.parameter.Pattern",
                "displayName": "Pattern",
                "id": "cdktf.Fn.fileset.parameter.pattern",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/fileset.html fileset} enumerates a set of regular file names given a path and pattern."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Fileset(string Path, string Pattern);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Filesha1",
            "displayName": "Filesha1",
            "id": "cdktf.Fn.filesha1",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Filesha1.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.filesha1.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha1.html filesha1} is a variant of sha1 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Filesha1(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Filesha256",
            "displayName": "Filesha256",
            "id": "cdktf.Fn.filesha256",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Filesha256.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.filesha256.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha256.html filesha256} is a variant of sha256 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Filesha256(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Filesha512",
            "displayName": "Filesha512",
            "id": "cdktf.Fn.filesha512",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Filesha512.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.filesha512.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha512.html filesha512} is a variant of sha512 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Filesha512(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Flatten",
            "displayName": "Flatten",
            "id": "cdktf.Fn.flatten",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Flatten.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.flatten.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/flatten.html flatten} takes a list and replaces any elements that are lists with a flattened sequence of the list contents."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Flatten(object List);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Floor",
            "displayName": "Floor",
            "id": "cdktf.Fn.floor",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Floor.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.floor.parameter.value",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/floor.html floor} returns the closest whole number that is less than or equal to the given value, which may be a fraction."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Floor(double Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Format",
            "displayName": "Format",
            "id": "cdktf.Fn.format",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Format.parameter.Spec",
                "displayName": "Spec",
                "id": "cdktf.Fn.format.parameter.spec",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Format.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.format.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/format.html format} produces a string by formatting a number of other values according to a specification string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Format(string Spec, object[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Formatdate",
            "displayName": "Formatdate",
            "id": "cdktf.Fn.formatdate",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Formatdate.parameter.Spec",
                "displayName": "Spec",
                "id": "cdktf.Fn.formatdate.parameter.spec",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Formatdate.parameter.Timestamp",
                "displayName": "Timestamp",
                "id": "cdktf.Fn.formatdate.parameter.timestamp",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/formatdate.html formatdate} converts a timestamp into a different time format."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Formatdate(string Spec, string Timestamp);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Formatlist",
            "displayName": "Formatlist",
            "id": "cdktf.Fn.formatlist",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Formatlist.parameter.Spec",
                "displayName": "Spec",
                "id": "cdktf.Fn.formatlist.parameter.spec",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Formatlist.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.formatlist.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/formatlist.html formatlist} produces a list of strings by formatting a number of other values according to a specification string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Formatlist(string Spec, object[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Indent",
            "displayName": "Indent",
            "id": "cdktf.Fn.indent",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Indent.parameter.Indentation",
                "displayName": "Indentation",
                "id": "cdktf.Fn.indent.parameter.indentation",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Indent.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.indent.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/indent.html indent} adds a given number of spaces to the beginnings of all but the first line in a given multi-line string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Indent(double Indentation, string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Index",
            "displayName": "Index",
            "id": "cdktf.Fn.index",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Index.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.index.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Index.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.index.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/index.html index} finds the element index for a given value in a list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Index(object List, object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Join",
            "displayName": "Join",
            "id": "cdktf.Fn.join",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Join.parameter.Separator",
                "displayName": "Separator",
                "id": "cdktf.Fn.join.parameter.separator",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Join.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.join.parameter.value",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/join.html join} produces a string by concatenating together all elements of a given list of strings with the given delimiter."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Join(string Separator, string[] Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Jsondecode",
            "displayName": "Jsondecode",
            "id": "cdktf.Fn.jsondecode",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Jsondecode.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.jsondecode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/jsondecode.html jsondecode} interprets a given string as JSON, returning a representation of the result of decoding that string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Jsondecode(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Jsonencode",
            "displayName": "Jsonencode",
            "id": "cdktf.Fn.jsonencode",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Jsonencode.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.jsonencode.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/jsonencode.html jsonencode} encodes a given value to a string using JSON syntax."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Jsonencode(object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Keys",
            "displayName": "Keys",
            "id": "cdktf.Fn.keys",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Keys.parameter.Map",
                "displayName": "Map",
                "id": "cdktf.Fn.keys.parameter.map",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/keys.html keys} takes a map and returns a list containing the keys from that map."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Keys(object Map);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.LengthOf",
            "displayName": "LengthOf",
            "id": "cdktf.Fn.lengthOf",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.LengthOf.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.lengthOf.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/length.html length} determines the length of a given list, map, or string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.LengthOf(object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Log",
            "displayName": "Log",
            "id": "cdktf.Fn.log",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Log.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.log.parameter.value",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Log.parameter.Base",
                "displayName": "Base",
                "id": "cdktf.Fn.log.parameter.base",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/log.html log} returns the logarithm of a given number in a given base."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Log(double Value, double Base);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Lookup",
            "displayName": "Lookup",
            "id": "cdktf.Fn.lookup",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Lookup.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.lookup.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Lookup.parameter.Key",
                "displayName": "Key",
                "id": "cdktf.Fn.lookup.parameter.key",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Lookup.parameter.DefaultValue",
                "displayName": "DefaultValue",
                "id": "cdktf.Fn.lookup.parameter.defaultValue",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/lookup.html lookup} retrieves the value of a single element from a map, given its key. If the given key does not exist, the given default value is returned instead."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Lookup(object Value, object Key, object DefaultValue);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Lower",
            "displayName": "Lower",
            "id": "cdktf.Fn.lower",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Lower.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.lower.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/lower.html lower} converts all cased letters in the given string to lowercase."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Lower(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Matchkeys",
            "displayName": "Matchkeys",
            "id": "cdktf.Fn.matchkeys",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Matchkeys.parameter.ValuesList",
                "displayName": "ValuesList",
                "id": "cdktf.Fn.matchkeys.parameter.valuesList",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Matchkeys.parameter.KeysList",
                "displayName": "KeysList",
                "id": "cdktf.Fn.matchkeys.parameter.keysList",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Matchkeys.parameter.SearchSet",
                "displayName": "SearchSet",
                "id": "cdktf.Fn.matchkeys.parameter.searchSet",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/matchkeys.html matchkeys} constructs a new list by taking a subset of elements from one list whose indexes match the corresponding indexes of values in another list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Matchkeys(object ValuesList, object KeysList, object SearchSet);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Max",
            "displayName": "Max",
            "id": "cdktf.Fn.max",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Max.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.max.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "double"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/max.html max} takes one or more numbers and returns the greatest number from the set."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Max(double[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Md5",
            "displayName": "Md5",
            "id": "cdktf.Fn.md5",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Md5.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.md5.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/md5.html md5} computes the MD5 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Md5(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.MergeLists",
            "displayName": "MergeLists",
            "id": "cdktf.Fn.mergeLists",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.MergeLists.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.mergeLists.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/merge.html merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.MergeLists(object[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.MergeMaps",
            "displayName": "MergeMaps",
            "id": "cdktf.Fn.mergeMaps",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.MergeMaps.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.mergeMaps.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/merge.html merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.MergeMaps(object[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Min",
            "displayName": "Min",
            "id": "cdktf.Fn.min",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Min.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.min.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "double"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/min.html min} takes one or more numbers and returns the smallest number from the set."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Min(double[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Nonsensitive",
            "displayName": "Nonsensitive",
            "id": "cdktf.Fn.nonsensitive",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Nonsensitive.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.nonsensitive.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/nonsensitive.html nonsensitive} takes a sensitive value and returns a copy of that value with the sensitive marking removed, thereby exposing the sensitive value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Nonsensitive(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.One",
            "displayName": "One",
            "id": "cdktf.Fn.one",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.One.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.one.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/one.html one} takes a list, set, or tuple value with either zero or one elements."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.One(object List);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.ParseInt",
            "displayName": "ParseInt",
            "id": "cdktf.Fn.parseInt",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.ParseInt.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.parseInt.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.ParseInt.parameter.Base",
                "displayName": "Base",
                "id": "cdktf.Fn.parseInt.parameter.base",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/parseint.html parseInt} parses the given string as a representation of an integer in the specified base and returns the resulting number. The base must be between 2 and 62 inclusive."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.ParseInt(string Value, double Base);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Pathexpand",
            "displayName": "Pathexpand",
            "id": "cdktf.Fn.pathexpand",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Pathexpand.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.pathexpand.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/pathexpand.html pathexpand} takes a string containing a filesystem path and removes the last portion from it."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Pathexpand(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Pow",
            "displayName": "Pow",
            "id": "cdktf.Fn.pow",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Pow.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.pow.parameter.value",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Pow.parameter.Power",
                "displayName": "Power",
                "id": "cdktf.Fn.pow.parameter.power",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/pow.html pow} calculates an exponent, by raising its first argument to the power of the second argument."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Pow(double Value, double Power);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Range",
            "displayName": "Range",
            "id": "cdktf.Fn.range",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Range.parameter.Start",
                "displayName": "Start",
                "id": "cdktf.Fn.range.parameter.start",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Range.parameter.Limit",
                "displayName": "Limit",
                "id": "cdktf.Fn.range.parameter.limit",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Range.parameter.Step",
                "displayName": "Step",
                "id": "cdktf.Fn.range.parameter.step",
                "optional": true,
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/range.html range} generates a list of numbers using a start value, a limit value, and a step value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Range(double Start, double Limit, double Step = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.RawString",
            "displayName": "RawString",
            "id": "cdktf.Fn.rawString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.RawString.parameter.Str",
                "displayName": "Str",
                "id": "cdktf.Fn.rawString.parameter.str",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Use this function to wrap a string and escape it properly for the use in Terraform This is only needed in certain scenarios (e.g., if you have unescaped double quotes in the string)."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.RawString(string Str);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Regex",
            "displayName": "Regex",
            "id": "cdktf.Fn.regex",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Regex.parameter.Pattern",
                "displayName": "Pattern",
                "id": "cdktf.Fn.regex.parameter.pattern",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Regex.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.regex.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/regex.html regex} applies a regular expression to a string and returns the matching substrings in pattern."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Regex(string Pattern, string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Regexall",
            "displayName": "Regexall",
            "id": "cdktf.Fn.regexall",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Regexall.parameter.Pattern",
                "displayName": "Pattern",
                "id": "cdktf.Fn.regexall.parameter.pattern",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Regexall.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.regexall.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/regexall.html regexall} applies a regular expression to a string and returns a list of all matches."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Regexall(string Pattern, string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Replace",
            "displayName": "Replace",
            "id": "cdktf.Fn.replace",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Replace.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.replace.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Replace.parameter.Substring",
                "displayName": "Substring",
                "id": "cdktf.Fn.replace.parameter.substring",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Replace.parameter.Replacement",
                "displayName": "Replacement",
                "id": "cdktf.Fn.replace.parameter.replacement",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/replace.html replace} searches a given string for another given substring, and replaces each occurrence with a given replacement string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Replace(string Value, string Substring, string Replacement);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Reverse",
            "displayName": "Reverse",
            "id": "cdktf.Fn.reverse",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Reverse.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.reverse.parameter.values",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/reverse.html reverse} takes a sequence and produces a new sequence of the same length with all of the same elements as the given sequence but in reverse order."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Reverse(object Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Rsadecrypt",
            "displayName": "Rsadecrypt",
            "id": "cdktf.Fn.rsadecrypt",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Rsadecrypt.parameter.Ciphertext",
                "displayName": "Ciphertext",
                "id": "cdktf.Fn.rsadecrypt.parameter.ciphertext",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Rsadecrypt.parameter.Privatekey",
                "displayName": "Privatekey",
                "id": "cdktf.Fn.rsadecrypt.parameter.privatekey",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/rsadecrypt.html rsadecrypt} decrypts an RSA-encrypted ciphertext, returning the corresponding cleartext."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Rsadecrypt(string Ciphertext, string Privatekey);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Sensitive",
            "displayName": "Sensitive",
            "id": "cdktf.Fn.sensitive",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Sensitive.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.sensitive.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sensitive.html sensitive} takes any value and returns a copy of it marked so that Terraform will treat it as sensitive, with the same meaning and behavior as for sensitive input variables."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Sensitive(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Setintersection",
            "displayName": "Setintersection",
            "id": "cdktf.Fn.setintersection",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Setintersection.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.setintersection.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setintersection.html setintersection} function takes multiple sets and produces a single set containing only the elements that all of the given sets have in common."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Setintersection(object[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Setproduct",
            "displayName": "Setproduct",
            "id": "cdktf.Fn.setproduct",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Setproduct.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.setproduct.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setproduct.html setproduct} function finds all of the possible combinations of elements from all of the given sets by computing the Cartesian product."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Setproduct(object[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Setsubtract",
            "displayName": "Setsubtract",
            "id": "cdktf.Fn.setsubtract",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Setsubtract.parameter.Minuend",
                "displayName": "Minuend",
                "id": "cdktf.Fn.setsubtract.parameter.minuend",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Setsubtract.parameter.Subtrahend",
                "displayName": "Subtrahend",
                "id": "cdktf.Fn.setsubtract.parameter.subtrahend",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/slice.html setsubtract} function returns a new set containing the elements from the first set that are not present in the second set."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Setsubtract(object Minuend, object Subtrahend);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Setunion",
            "displayName": "Setunion",
            "id": "cdktf.Fn.setunion",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Setunion.parameter.Values",
                "displayName": "Values",
                "id": "cdktf.Fn.setunion.parameter.values",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setunion.html setunion} function takes multiple sets and produces a single set containing the elements from all of the given sets."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Setunion(object[] Values);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Sha1",
            "displayName": "Sha1",
            "id": "cdktf.Fn.sha1",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Sha1.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.sha1.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha1.html sha1} computes the SHA1 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Sha1(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Sha256",
            "displayName": "Sha256",
            "id": "cdktf.Fn.sha256",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Sha256.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.sha256.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha256.html sha256} computes the SHA256 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Sha256(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Sha512",
            "displayName": "Sha512",
            "id": "cdktf.Fn.sha512",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Sha512.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.sha512.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha512.html sha512} computes the SHA512 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Sha512(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Signum",
            "displayName": "Signum",
            "id": "cdktf.Fn.signum",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Signum.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.signum.parameter.value",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/signum.html signum} determines the sign of a number, returning a number between -1 and 1 to represent the sign."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Signum(double Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Slice",
            "displayName": "Slice",
            "id": "cdktf.Fn.slice",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Slice.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.slice.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Slice.parameter.Startindex",
                "displayName": "Startindex",
                "id": "cdktf.Fn.slice.parameter.startindex",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Slice.parameter.Endindex",
                "displayName": "Endindex",
                "id": "cdktf.Fn.slice.parameter.endindex",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/slice.html slice} extracts some consecutive elements from within a list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Slice(object List, double Startindex, double Endindex);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Sort",
            "displayName": "Sort",
            "id": "cdktf.Fn.sort",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Sort.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.sort.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sort.html sort} takes a list of strings and returns a new list with those strings sorted lexicographically."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Sort(object List);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Split",
            "displayName": "Split",
            "id": "cdktf.Fn.split",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Split.parameter.Seperator",
                "displayName": "Seperator",
                "id": "cdktf.Fn.split.parameter.seperator",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Split.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.split.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/split.html split} produces a list by dividing a given string at all occurrences of a given separator."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Split(string Seperator, string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Strrev",
            "displayName": "Strrev",
            "id": "cdktf.Fn.strrev",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Strrev.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.strrev.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/strrev.html strrev} reverses the characters in a string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Strrev(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Substr",
            "displayName": "Substr",
            "id": "cdktf.Fn.substr",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Substr.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.substr.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Substr.parameter.Offset",
                "displayName": "Offset",
                "id": "cdktf.Fn.substr.parameter.offset",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Substr.parameter.Length",
                "displayName": "Length",
                "id": "cdktf.Fn.substr.parameter.length",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/substr.html substr} extracts a substring from a given string by offset and length."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Substr(string Value, double Offset, double Length);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Sum",
            "displayName": "Sum",
            "id": "cdktf.Fn.sum",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Sum.parameter.List",
                "displayName": "List",
                "id": "cdktf.Fn.sum.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "string"
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sum.html sum} takes a list or set of numbers and returns the sum of those numbers."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Sum(object List);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Templatefile",
            "displayName": "Templatefile",
            "id": "cdktf.Fn.templatefile",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Templatefile.parameter.Path",
                "displayName": "Path",
                "id": "cdktf.Fn.templatefile.parameter.path",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Templatefile.parameter.Vars",
                "displayName": "Vars",
                "id": "cdktf.Fn.templatefile.parameter.vars",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/templatefile.html templatefile} reads the file at the given path and renders its content as a template using a supplied set of template variables."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Templatefile(string Path, object Vars);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Textdecodebase64",
            "displayName": "Textdecodebase64",
            "id": "cdktf.Fn.textdecodebase64",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Textdecodebase64.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.textdecodebase64.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Textdecodebase64.parameter.EncodingName",
                "displayName": "EncodingName",
                "id": "cdktf.Fn.textdecodebase64.parameter.encodingName",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/textdecodebase64.html textdecodebase64} function decodes a string that was previously Base64-encoded, and then interprets the result as characters in a specified character encoding."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Textdecodebase64(string Value, string EncodingName);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Textencodebase64",
            "displayName": "Textencodebase64",
            "id": "cdktf.Fn.textencodebase64",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Textencodebase64.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.textencodebase64.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Textencodebase64.parameter.EncodingName",
                "displayName": "EncodingName",
                "id": "cdktf.Fn.textencodebase64.parameter.encodingName",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/textencodebase64.html textencodebase64}  encodes the unicode characters in a given string using a specified character encoding, returning the result base64 encoded because Terraform language strings are always sequences of unicode characters."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Textencodebase64(string Value, string EncodingName);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Timeadd",
            "displayName": "Timeadd",
            "id": "cdktf.Fn.timeadd",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Timeadd.parameter.Timestamp",
                "displayName": "Timestamp",
                "id": "cdktf.Fn.timeadd.parameter.timestamp",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Timeadd.parameter.Duration",
                "displayName": "Duration",
                "id": "cdktf.Fn.timeadd.parameter.duration",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/timeadd.html timeadd} adds a duration to a timestamp, returning a new timestamp."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Timeadd(string Timestamp, string Duration);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Timestamp",
            "displayName": "Timestamp",
            "id": "cdktf.Fn.timestamp",
            "parameters": [],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/timestamp.html timestamp} returns a UTC timestamp string in RFC 3339 format."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Timestamp();"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Title",
            "displayName": "Title",
            "id": "cdktf.Fn.title",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Title.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.title.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/title.html title} converts the first letter of each word in the given string to uppercase."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Title(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Tobool",
            "displayName": "Tobool",
            "id": "cdktf.Fn.tobool",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Tobool.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.tobool.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tobool.html tobool} converts its argument to a boolean value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Tobool(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Tolist",
            "displayName": "Tolist",
            "id": "cdktf.Fn.tolist",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Tolist.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.tolist.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tolist.html tolist} converts its argument to a list value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Tolist(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Tomap",
            "displayName": "Tomap",
            "id": "cdktf.Fn.tomap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Tomap.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.tomap.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tomap.html tomap} converts its argument to a map value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Tomap(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Tonumber",
            "displayName": "Tonumber",
            "id": "cdktf.Fn.tonumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Tonumber.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.tonumber.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tonumber.html tonumber} converts its argument to a number value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Tonumber(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Toset",
            "displayName": "Toset",
            "id": "cdktf.Fn.toset",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Toset.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.toset.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/toset.html toset} converts its argument to a set value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Toset(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Tostring",
            "displayName": "Tostring",
            "id": "cdktf.Fn.tostring",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Tostring.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.tostring.parameter.expression",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tostring.html tostring} converts its argument to a string value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Tostring(object Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Transpose",
            "displayName": "Transpose",
            "id": "cdktf.Fn.transpose",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Transpose.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.transpose.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/transpose.html transpose} takes a map of lists of strings and swaps the keys and values to produce a new map of lists of strings."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Transpose(object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Trim",
            "displayName": "Trim",
            "id": "cdktf.Fn.trim",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Trim.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.trim.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Trim.parameter.Replacement",
                "displayName": "Replacement",
                "id": "cdktf.Fn.trim.parameter.replacement",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trim.html trim} removes the specified characters from the start and end of the given string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Trim(string Value, string Replacement);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Trimprefix",
            "displayName": "Trimprefix",
            "id": "cdktf.Fn.trimprefix",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Trimprefix.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.trimprefix.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Trimprefix.parameter.Prefix",
                "displayName": "Prefix",
                "id": "cdktf.Fn.trimprefix.parameter.prefix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimprefix.html trimprefix} removes the specified prefix from the start of the given string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Trimprefix(string Value, string Prefix);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Trimspace",
            "displayName": "Trimspace",
            "id": "cdktf.Fn.trimspace",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Trimspace.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.trimspace.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimspace.html trimspace} removes any space characters from the start and end of the given string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Trimspace(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Trimsuffix",
            "displayName": "Trimsuffix",
            "id": "cdktf.Fn.trimsuffix",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Trimsuffix.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.trimsuffix.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Trimsuffix.parameter.Suffix",
                "displayName": "Suffix",
                "id": "cdktf.Fn.trimsuffix.parameter.suffix",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimsuffix.html trimsuffix} removes the specified suffix from the end of the given string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Trimsuffix(string Value, string Suffix);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Try",
            "displayName": "Try",
            "id": "cdktf.Fn.try",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Try.parameter.Expression",
                "displayName": "Expression",
                "id": "cdktf.Fn.try.parameter.expression",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/try.html try} evaluates all of its argument expressions in turn and returns the result of the first one that does not produce any errors."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Try(object[] Expression);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Upper",
            "displayName": "Upper",
            "id": "cdktf.Fn.upper",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Upper.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.upper.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/upper.html upper} converts all cased letters in the given string to uppercase."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Upper(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Urlencode",
            "displayName": "Urlencode",
            "id": "cdktf.Fn.urlencode",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Urlencode.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.urlencode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/urlencode.html urlencode} applies URL encoding to a given string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Urlencode(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Uuid",
            "displayName": "Uuid",
            "id": "cdktf.Fn.uuid",
            "parameters": [],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/uuid.html uuid} generates a unique identifier string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Uuid();"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Uuidv5",
            "displayName": "Uuidv5",
            "id": "cdktf.Fn.uuidv5",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Uuidv5.parameter.Namespace",
                "displayName": "Namespace",
                "id": "cdktf.Fn.uuidv5.parameter.namespace",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Uuidv5.parameter.Name",
                "displayName": "Name",
                "id": "cdktf.Fn.uuidv5.parameter.name",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/uuidv5.html uuidv5} generates a unique identifier string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Uuidv5(string Namespace, string Name);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Values",
            "displayName": "Values",
            "id": "cdktf.Fn.values",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Values.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.values.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/values.html values} takes a map and returns a list containing the values of the elements in that map."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Values(object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Yamldecode",
            "displayName": "Yamldecode",
            "id": "cdktf.Fn.yamldecode",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Yamldecode.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.yamldecode.parameter.value",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/yamldecode.html yamldecode} parses a string as a subset of YAML, and produces a representation of its value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Yamldecode(string Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Yamlencode",
            "displayName": "Yamlencode",
            "id": "cdktf.Fn.yamlencode",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Yamlencode.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Fn.yamlencode.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/yamlencode.html yamlencode} encodes a given value to a string using JSON syntax."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Yamlencode(object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Fn.Zipmap",
            "displayName": "Zipmap",
            "id": "cdktf.Fn.zipmap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Fn.Zipmap.parameter.Keyslist",
                "displayName": "Keyslist",
                "id": "cdktf.Fn.zipmap.parameter.keyslist",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Fn.Zipmap.parameter.Valueslist",
                "displayName": "Valueslist",
                "id": "cdktf.Fn.zipmap.parameter.valueslist",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/zipmap.html zipmap} constructs a map from a list of keys and a corresponding list of values."
            },
            "usage": "using HashiCorp.Cdktf;\n\nFn.Zipmap(object Keyslist, object Valueslist);"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.Fn",
        "displayName": "Fn",
        "id": "cdktf.Fn",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.Lazy.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Lazy.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew Lazy();"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Lazy.AnyValue",
            "displayName": "AnyValue",
            "id": "cdktf.Lazy.anyValue",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Lazy.AnyValue.parameter.Producer",
                "displayName": "Producer",
                "id": "cdktf.Lazy.anyValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAnyProducer",
                      "displayName": "IAnyProducer",
                      "fqn": "HashiCorp.Cdktf.IAnyProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The lazy producer."
                }
              },
              {
                "fqn": "HashiCorp.Cdktf.Lazy.AnyValue.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Lazy.anyValue.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.LazyAnyValueOptions",
                      "displayName": "LazyAnyValueOptions",
                      "fqn": "HashiCorp.Cdktf.LazyAnyValueOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "Options."
                }
              }
            ],
            "docs": {
              "summary": "Produces a lazy token from an untyped value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nLazy.AnyValue(IAnyProducer Producer, LazyAnyValueOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Lazy.ListValue",
            "displayName": "ListValue",
            "id": "cdktf.Lazy.listValue",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Lazy.ListValue.parameter.Producer",
                "displayName": "Producer",
                "id": "cdktf.Lazy.listValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IListProducer",
                      "displayName": "IListProducer",
                      "fqn": "HashiCorp.Cdktf.IListProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              },
              {
                "fqn": "HashiCorp.Cdktf.Lazy.ListValue.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Lazy.listValue.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.LazyListValueOptions",
                      "displayName": "LazyListValueOptions",
                      "fqn": "HashiCorp.Cdktf.LazyListValueOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "Options."
                }
              }
            ],
            "docs": {
              "summary": "Returns a list-ified token for a lazy value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nLazy.ListValue(IListProducer Producer, LazyListValueOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Lazy.NumberValue",
            "displayName": "NumberValue",
            "id": "cdktf.Lazy.numberValue",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Lazy.NumberValue.parameter.Producer",
                "displayName": "Producer",
                "id": "cdktf.Lazy.numberValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.INumberProducer",
                      "displayName": "INumberProducer",
                      "fqn": "HashiCorp.Cdktf.INumberProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              }
            ],
            "docs": {
              "summary": "Returns a numberified token for a lazy value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nLazy.NumberValue(INumberProducer Producer);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Lazy.StringValue",
            "displayName": "StringValue",
            "id": "cdktf.Lazy.stringValue",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Lazy.StringValue.parameter.Producer",
                "displayName": "Producer",
                "id": "cdktf.Lazy.stringValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IStringProducer",
                      "displayName": "IStringProducer",
                      "fqn": "HashiCorp.Cdktf.IStringProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              },
              {
                "fqn": "HashiCorp.Cdktf.Lazy.StringValue.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Lazy.stringValue.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.LazyStringValueOptions",
                      "displayName": "LazyStringValueOptions",
                      "fqn": "HashiCorp.Cdktf.LazyStringValueOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "Options."
                }
              }
            ],
            "docs": {
              "summary": "Returns a stringified token for a lazy value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nLazy.StringValue(IStringProducer Producer, LazyStringValueOptions Options = null);"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.Lazy",
        "displayName": "Lazy",
        "id": "cdktf.Lazy",
        "docs": {
          "summary": "Lazily produce a value.",
          "remarks": "Can be used to return a string, list or numeric value whose actual value\nwill only be calculated later, during synthesis."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.LazyBase.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.LazyBase.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew LazyBase();"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.LazyBase.AddPostProcessor",
            "displayName": "AddPostProcessor",
            "id": "cdktf.LazyBase.addPostProcessor",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.LazyBase.AddPostProcessor.parameter.PostProcessor",
                "displayName": "PostProcessor",
                "id": "cdktf.LazyBase.addPostProcessor.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "HashiCorp.Cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private void AddPostProcessor(IPostProcessor PostProcessor)"
          },
          {
            "fqn": "HashiCorp.Cdktf.LazyBase.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.LazyBase.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.LazyBase.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.LazyBase.resolve.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.LazyBase.ToJSON",
            "displayName": "ToJSON",
            "id": "cdktf.LazyBase.toJSON",
            "parameters": [],
            "docs": {
              "summary": "Turn this Token into JSON.",
              "remarks": "Called automatically when JSON.stringify() is called on a Token."
            },
            "usage": "private object ToJSON()"
          },
          {
            "fqn": "HashiCorp.Cdktf.LazyBase.ToString",
            "displayName": "ToString",
            "id": "cdktf.LazyBase.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.LazyBase.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.LazyBase.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.LazyBase",
        "displayName": "LazyBase",
        "id": "cdktf.LazyBase",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.ListTerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ListTerraformIterator.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.ListTerraformIterator.Initializer.parameter.List",
              "displayName": "List",
              "id": "cdktf.ListTerraformIterator.Initializer.parameter.list",
              "type": {
                "formattingPattern": "object",
                "types": [
                  {
                    "formattingPattern": "%[]",
                    "types": [
                      {
                        "formattingPattern": "string"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.IResolvable",
                        "displayName": "IResolvable",
                        "fqn": "HashiCorp.Cdktf.IResolvable",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%[]",
                    "types": [
                      {
                        "formattingPattern": "double"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ComplexList",
                        "displayName": "ComplexList",
                        "fqn": "HashiCorp.Cdktf.ComplexList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.StringMapList",
                        "displayName": "StringMapList",
                        "fqn": "HashiCorp.Cdktf.StringMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.NumberMapList",
                        "displayName": "NumberMapList",
                        "fqn": "HashiCorp.Cdktf.NumberMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.BooleanMapList",
                        "displayName": "BooleanMapList",
                        "fqn": "HashiCorp.Cdktf.BooleanMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.AnyMapList",
                        "displayName": "AnyMapList",
                        "fqn": "HashiCorp.Cdktf.AnyMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%[]",
                    "types": [
                      {
                        "formattingPattern": "object",
                        "types": [
                          {
                            "formattingPattern": "bool"
                          },
                          {
                            "formattingPattern": "%",
                            "types": [
                              {
                                "id": "cdktf.IResolvable",
                                "displayName": "IResolvable",
                                "fqn": "HashiCorp.Cdktf.IResolvable",
                                "packageName": "cdktf",
                                "packageVersion": "0.0.0"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew ListTerraformIterator(object List);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.Dynamic",
            "displayName": "Dynamic",
            "id": "cdktf.ListTerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.Dynamic.parameter.Attributes",
                "displayName": "Attributes",
                "id": "cdktf.ListTerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Dynamic(System.Collections.Generic.IDictionary<string, object> Attributes)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetAny",
            "displayName": "GetAny",
            "id": "cdktf.ListTerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetAny.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetAny(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetAnyMap",
            "displayName": "GetAnyMap",
            "id": "cdktf.ListTerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetAnyMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetAnyMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.ListTerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetBoolean.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetBooleanMap",
            "displayName": "GetBooleanMap",
            "id": "cdktf.ListTerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetBooleanMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, bool> GetBooleanMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetList",
            "displayName": "GetList",
            "id": "cdktf.ListTerraformIterator.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetList.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetMap",
            "displayName": "GetMap",
            "id": "cdktf.ListTerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.ListTerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetNumber.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetNumberList",
            "displayName": "GetNumberList",
            "id": "cdktf.ListTerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetNumberList.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private double[] GetNumberList(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetNumberMap",
            "displayName": "GetNumberMap",
            "id": "cdktf.ListTerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetNumberMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, double> GetNumberMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetString",
            "displayName": "GetString",
            "id": "cdktf.ListTerraformIterator.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetString.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetStringMap",
            "displayName": "GetStringMap",
            "id": "cdktf.ListTerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.GetStringMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.ListTerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, string> GetStringMap(string Attribute)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.FromList",
            "displayName": "FromList",
            "id": "cdktf.ListTerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.FromList.parameter.List",
                "displayName": "List",
                "id": "cdktf.ListTerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "double"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "HashiCorp.Cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "HashiCorp.Cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "HashiCorp.Cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "HashiCorp.Cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "HashiCorp.Cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object",
                          "types": [
                            {
                              "formattingPattern": "bool"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "HashiCorp.Cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nListTerraformIterator.FromList(object List);"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.FromMap",
            "displayName": "FromMap",
            "id": "cdktf.ListTerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ListTerraformIterator.FromMap.parameter.Map",
                "displayName": "Map",
                "id": "cdktf.ListTerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "HashiCorp.Cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "double"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "bool"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "using HashiCorp.Cdktf;\n\nListTerraformIterator.FromMap(object Map);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.property.Key",
            "displayName": "Key",
            "id": "cdktf.ListTerraformIterator.property.key",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {
              "summary": "Returns the currenty entry in the list or set that is being iterated over.",
              "remarks": "For lists this is the same as `iterator.value`. If you need the index,\nuse count using the escape hatch:\nhttps://www.terraform.io/cdktf/concepts/resources#escape-hatch"
            },
            "usage": "public object Key { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator.property.Value",
            "displayName": "Value",
            "id": "cdktf.ListTerraformIterator.property.value",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {
              "summary": "Returns the value of the current item iterated over."
            },
            "usage": "public object Value { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.ListTerraformIterator",
        "displayName": "ListTerraformIterator",
        "id": "cdktf.ListTerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.Manifest.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Manifest.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.Manifest.Initializer.parameter.Version",
              "displayName": "Version",
              "id": "cdktf.Manifest.Initializer.parameter.version",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.Manifest.Initializer.parameter.Outdir",
              "displayName": "Outdir",
              "id": "cdktf.Manifest.Initializer.parameter.outdir",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew Manifest(string Version, string Outdir);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.IManifest",
            "displayName": "IManifest",
            "id": "cdktf.IManifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Manifest.BuildManifest",
            "displayName": "BuildManifest",
            "id": "cdktf.Manifest.buildManifest",
            "parameters": [],
            "docs": {},
            "usage": "private IManifest BuildManifest()"
          },
          {
            "fqn": "HashiCorp.Cdktf.Manifest.ForStack",
            "displayName": "ForStack",
            "id": "cdktf.Manifest.forStack",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Manifest.ForStack.parameter.Stack",
                "displayName": "Stack",
                "id": "cdktf.Manifest.forStack.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private StackManifest ForStack(TerraformStack Stack)"
          },
          {
            "fqn": "HashiCorp.Cdktf.Manifest.WriteToFile",
            "displayName": "WriteToFile",
            "id": "cdktf.Manifest.writeToFile",
            "parameters": [],
            "docs": {},
            "usage": "private void WriteToFile()"
          }
        ],
        "staticMethods": [],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.Manifest.property.FileName",
            "displayName": "FileName",
            "id": "cdktf.Manifest.property.fileName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FileName { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.Manifest.property.StackFileName",
            "displayName": "StackFileName",
            "id": "cdktf.Manifest.property.stackFileName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string StackFileName { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.Manifest.property.StacksFolder",
            "displayName": "StacksFolder",
            "id": "cdktf.Manifest.property.stacksFolder",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string StacksFolder { get; }",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.Manifest.property.Outdir",
            "displayName": "Outdir",
            "id": "cdktf.Manifest.property.outdir",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Outdir { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.Manifest.property.Stacks",
            "displayName": "Stacks",
            "id": "cdktf.Manifest.property.stacks",
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackManifest",
                      "displayName": "StackManifest",
                      "fqn": "HashiCorp.Cdktf.StackManifest",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, StackManifest> Stacks { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.Manifest.property.Version",
            "displayName": "Version",
            "id": "cdktf.Manifest.property.version",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Version { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.Manifest",
        "displayName": "Manifest",
        "id": "cdktf.Manifest",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.MapTerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.MapTerraformIterator.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.MapTerraformIterator.Initializer.parameter.Map",
              "displayName": "Map",
              "id": "cdktf.MapTerraformIterator.Initializer.parameter.map",
              "type": {
                "formattingPattern": "object",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.StringMap",
                        "displayName": "StringMap",
                        "fqn": "HashiCorp.Cdktf.StringMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.NumberMap",
                        "displayName": "NumberMap",
                        "fqn": "HashiCorp.Cdktf.NumberMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.BooleanMap",
                        "displayName": "BooleanMap",
                        "fqn": "HashiCorp.Cdktf.BooleanMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.AnyMap",
                        "displayName": "AnyMap",
                        "fqn": "HashiCorp.Cdktf.AnyMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ComplexMap",
                        "displayName": "ComplexMap",
                        "fqn": "HashiCorp.Cdktf.ComplexMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                    "types": [
                      {
                        "formattingPattern": "object"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                    "types": [
                      {
                        "formattingPattern": "string"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                    "types": [
                      {
                        "formattingPattern": "double"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew MapTerraformIterator(object Map);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.Dynamic",
            "displayName": "Dynamic",
            "id": "cdktf.MapTerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.Dynamic.parameter.Attributes",
                "displayName": "Attributes",
                "id": "cdktf.MapTerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Dynamic(System.Collections.Generic.IDictionary<string, object> Attributes)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetAny",
            "displayName": "GetAny",
            "id": "cdktf.MapTerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetAny.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetAny(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetAnyMap",
            "displayName": "GetAnyMap",
            "id": "cdktf.MapTerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetAnyMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetAnyMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.MapTerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetBoolean.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetBooleanMap",
            "displayName": "GetBooleanMap",
            "id": "cdktf.MapTerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetBooleanMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, bool> GetBooleanMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetList",
            "displayName": "GetList",
            "id": "cdktf.MapTerraformIterator.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetList.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetMap",
            "displayName": "GetMap",
            "id": "cdktf.MapTerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.MapTerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetNumber.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetNumberList",
            "displayName": "GetNumberList",
            "id": "cdktf.MapTerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetNumberList.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private double[] GetNumberList(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetNumberMap",
            "displayName": "GetNumberMap",
            "id": "cdktf.MapTerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetNumberMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, double> GetNumberMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetString",
            "displayName": "GetString",
            "id": "cdktf.MapTerraformIterator.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetString.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetStringMap",
            "displayName": "GetStringMap",
            "id": "cdktf.MapTerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.GetStringMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.MapTerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, string> GetStringMap(string Attribute)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.FromList",
            "displayName": "FromList",
            "id": "cdktf.MapTerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.FromList.parameter.List",
                "displayName": "List",
                "id": "cdktf.MapTerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "double"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "HashiCorp.Cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "HashiCorp.Cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "HashiCorp.Cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "HashiCorp.Cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "HashiCorp.Cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object",
                          "types": [
                            {
                              "formattingPattern": "bool"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "HashiCorp.Cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nMapTerraformIterator.FromList(object List);"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.FromMap",
            "displayName": "FromMap",
            "id": "cdktf.MapTerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.MapTerraformIterator.FromMap.parameter.Map",
                "displayName": "Map",
                "id": "cdktf.MapTerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "HashiCorp.Cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "double"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "bool"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "using HashiCorp.Cdktf;\n\nMapTerraformIterator.FromMap(object Map);"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.property.Key",
            "displayName": "Key",
            "id": "cdktf.MapTerraformIterator.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Returns the key of the current entry in the map that is being iterated over."
            },
            "usage": "public string Key { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator.property.Value",
            "displayName": "Value",
            "id": "cdktf.MapTerraformIterator.property.value",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {
              "summary": "Returns the value of the current item iterated over."
            },
            "usage": "public object Value { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.MapTerraformIterator",
        "displayName": "MapTerraformIterator",
        "id": "cdktf.MapTerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.NamedCloudWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NamedCloudWorkspace.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.NamedCloudWorkspace.Initializer.parameter.Name",
              "displayName": "Name",
              "id": "cdktf.NamedCloudWorkspace.Initializer.parameter.name",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew NamedCloudWorkspace(string Name);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.NamedCloudWorkspace.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.NamedCloudWorkspace.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.NamedCloudWorkspace.property.Name",
            "displayName": "Name",
            "id": "cdktf.NamedCloudWorkspace.property.name",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Name { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.NamedCloudWorkspace",
        "displayName": "NamedCloudWorkspace",
        "id": "cdktf.NamedCloudWorkspace",
        "docs": {
          "summary": "The name of a single Terraform Cloud workspace.",
          "remarks": "You will only be able to use the workspace specified in the configuration with this working directory, and cannot manage workspaces from the CLI (e.g. terraform workspace select or terraform workspace new)."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.NamedRemoteWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NamedRemoteWorkspace.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.NamedRemoteWorkspace.Initializer.parameter.Name",
              "displayName": "Name",
              "id": "cdktf.NamedRemoteWorkspace.Initializer.parameter.name",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew NamedRemoteWorkspace(string Name);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.NamedRemoteWorkspace.property.Name",
            "displayName": "Name",
            "id": "cdktf.NamedRemoteWorkspace.property.name",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Name { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.NamedRemoteWorkspace",
        "displayName": "NamedRemoteWorkspace",
        "id": "cdktf.NamedRemoteWorkspace",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.NumberMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NumberMap.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.NumberMap.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.NumberMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.NumberMap.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.NumberMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew NumberMap(IInterpolatingParent TerraformResource, string TerraformAttribute);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.NumberMap.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.NumberMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMap.Lookup",
            "displayName": "Lookup",
            "id": "cdktf.NumberMap.lookup",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.NumberMap.Lookup.parameter.Key",
                "displayName": "Key",
                "id": "cdktf.NumberMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private double Lookup(string Key)"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMap.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.NumberMap.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.NumberMap.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.NumberMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMap.ToString",
            "displayName": "ToString",
            "id": "cdktf.NumberMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.NumberMap.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.NumberMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMap.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.NumberMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.NumberMap",
        "displayName": "NumberMap",
        "id": "cdktf.NumberMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.NumberMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NumberMapList.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.NumberMapList.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.NumberMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.NumberMapList.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.NumberMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.NumberMapList.Initializer.parameter.WrapsSet",
              "displayName": "WrapsSet",
              "id": "cdktf.NumberMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew NumberMapList(IInterpolatingParent TerraformResource, string TerraformAttribute, bool WrapsSet);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.NumberMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList.Get",
            "displayName": "Get",
            "id": "cdktf.NumberMapList.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.NumberMapList.Get.parameter.Index",
                "displayName": "Index",
                "id": "cdktf.NumberMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private NumberMap Get(double Index)"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.NumberMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.NumberMapList.InterpolationForAttribute.parameter.Property",
                "displayName": "Property",
                "id": "cdktf.NumberMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string Property)"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.NumberMapList.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.NumberMapList.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.NumberMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList.ToString",
            "displayName": "ToString",
            "id": "cdktf.NumberMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.NumberMapList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.NumberMapList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.NumberMapList",
        "displayName": "NumberMapList",
        "id": "cdktf.NumberMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.PrefixedRemoteWorkspaces.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.PrefixedRemoteWorkspaces.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.PrefixedRemoteWorkspaces.Initializer.parameter.Prefix",
              "displayName": "Prefix",
              "id": "cdktf.PrefixedRemoteWorkspaces.Initializer.parameter.prefix",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew PrefixedRemoteWorkspaces(string Prefix);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.PrefixedRemoteWorkspaces.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.PrefixedRemoteWorkspaces.property.prefix",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Prefix { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.PrefixedRemoteWorkspaces",
        "displayName": "PrefixedRemoteWorkspaces",
        "id": "cdktf.PrefixedRemoteWorkspaces",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.StringConcat.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringConcat.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew StringConcat();"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.IFragmentConcatenator",
            "displayName": "IFragmentConcatenator",
            "id": "cdktf.IFragmentConcatenator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.StringConcat.Join",
            "displayName": "Join",
            "id": "cdktf.StringConcat.join",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.StringConcat.Join.parameter.Left",
                "displayName": "Left",
                "id": "cdktf.StringConcat.join.parameter.left",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.StringConcat.Join.parameter.Right",
                "displayName": "Right",
                "id": "cdktf.StringConcat.join.parameter.right",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Concatenates string fragments."
            },
            "usage": "private object Join(object Left, object Right)"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.StringConcat",
        "displayName": "StringConcat",
        "id": "cdktf.StringConcat",
        "docs": {
          "summary": "Converts all fragments to strings and concats those.",
          "remarks": "Drops 'undefined's."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.StringMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringMap.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.StringMap.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.StringMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.StringMap.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.StringMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew StringMap(IInterpolatingParent TerraformResource, string TerraformAttribute);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.StringMap.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.StringMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMap.Lookup",
            "displayName": "Lookup",
            "id": "cdktf.StringMap.lookup",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.StringMap.Lookup.parameter.Key",
                "displayName": "Key",
                "id": "cdktf.StringMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private string Lookup(string Key)"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMap.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.StringMap.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.StringMap.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.StringMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMap.ToString",
            "displayName": "ToString",
            "id": "cdktf.StringMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.StringMap.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.StringMap.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMap.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.StringMap.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.StringMap",
        "displayName": "StringMap",
        "id": "cdktf.StringMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.StringMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringMapList.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.StringMapList.Initializer.parameter.TerraformResource",
              "displayName": "TerraformResource",
              "id": "cdktf.StringMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.StringMapList.Initializer.parameter.TerraformAttribute",
              "displayName": "TerraformAttribute",
              "id": "cdktf.StringMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "string"
              },
              "docs": {}
            },
            {
              "fqn": "HashiCorp.Cdktf.StringMapList.Initializer.parameter.WrapsSet",
              "displayName": "WrapsSet",
              "id": "cdktf.StringMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew StringMapList(IInterpolatingParent TerraformResource, string TerraformAttribute, bool WrapsSet);"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.StringMapList.ComputeFqn",
            "displayName": "ComputeFqn",
            "id": "cdktf.StringMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "private string ComputeFqn()"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMapList.Get",
            "displayName": "Get",
            "id": "cdktf.StringMapList.get",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.StringMapList.Get.parameter.Index",
                "displayName": "Index",
                "id": "cdktf.StringMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private StringMap Get(double Index)"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMapList.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.StringMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.StringMapList.InterpolationForAttribute.parameter.Property",
                "displayName": "Property",
                "id": "cdktf.StringMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string Property)"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMapList.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.StringMapList.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.StringMapList.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.StringMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMapList.ToString",
            "displayName": "ToString",
            "id": "cdktf.StringMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.StringMapList.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.StringMapList.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMapList.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.StringMapList.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.StringMapList",
        "displayName": "StringMapList",
        "id": "cdktf.StringMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TaggedCloudWorkspaces.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TaggedCloudWorkspaces.Initializer",
          "parameters": [
            {
              "fqn": "HashiCorp.Cdktf.TaggedCloudWorkspaces.Initializer.parameter.Tags",
              "displayName": "Tags",
              "id": "cdktf.TaggedCloudWorkspaces.Initializer.parameter.tags",
              "type": {
                "formattingPattern": "%[]",
                "types": [
                  {
                    "formattingPattern": "string"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "using HashiCorp.Cdktf;\n\nnew TaggedCloudWorkspaces(string[] Tags);"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TaggedCloudWorkspaces.ToTerraform",
            "displayName": "ToTerraform",
            "id": "cdktf.TaggedCloudWorkspaces.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "private object ToTerraform()"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TaggedCloudWorkspaces.property.Tags",
            "displayName": "Tags",
            "id": "cdktf.TaggedCloudWorkspaces.property.tags",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] Tags { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TaggedCloudWorkspaces",
        "displayName": "TaggedCloudWorkspaces",
        "id": "cdktf.TaggedCloudWorkspaces",
        "docs": {
          "summary": "A set of Terraform Cloud workspace tags.",
          "remarks": "You will be able to use this working directory with any workspaces that have all of the specified tags, and can use the terraform workspace commands to switch between them or create new workspaces. New workspaces will automatically have the specified tags. This option conflicts with name."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformIterator.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformIterator();"
        },
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformIterator",
            "displayName": "ITerraformIterator",
            "id": "cdktf.ITerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.Dynamic",
            "displayName": "Dynamic",
            "id": "cdktf.TerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.Dynamic.parameter.Attributes",
                "displayName": "Attributes",
                "id": "cdktf.TerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable Dynamic(System.Collections.Generic.IDictionary<string, object> Attributes)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetAny",
            "displayName": "GetAny",
            "id": "cdktf.TerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetAny.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetAny(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetAnyMap",
            "displayName": "GetAnyMap",
            "id": "cdktf.TerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetAnyMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetAnyMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetBoolean",
            "displayName": "GetBoolean",
            "id": "cdktf.TerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetBoolean.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private IResolvable GetBoolean(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetBooleanMap",
            "displayName": "GetBooleanMap",
            "id": "cdktf.TerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetBooleanMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, bool> GetBooleanMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetList",
            "displayName": "GetList",
            "id": "cdktf.TerraformIterator.getList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetList.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private string[] GetList(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetMap",
            "displayName": "GetMap",
            "id": "cdktf.TerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, object> GetMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.TerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetNumber.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private double GetNumber(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetNumberList",
            "displayName": "GetNumberList",
            "id": "cdktf.TerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetNumberList.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private double[] GetNumberList(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetNumberMap",
            "displayName": "GetNumberMap",
            "id": "cdktf.TerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetNumberMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, double> GetNumberMap(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetString",
            "displayName": "GetString",
            "id": "cdktf.TerraformIterator.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetString.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private string GetString(string Attribute)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.GetStringMap",
            "displayName": "GetStringMap",
            "id": "cdktf.TerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.GetStringMap.parameter.Attribute",
                "displayName": "Attribute",
                "id": "cdktf.TerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "private System.Collections.Generic.IDictionary<string, string> GetStringMap(string Attribute)"
          }
        ],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.FromList",
            "displayName": "FromList",
            "id": "cdktf.TerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.FromList.parameter.List",
                "displayName": "List",
                "id": "cdktf.TerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "HashiCorp.Cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "double"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "HashiCorp.Cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "HashiCorp.Cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "HashiCorp.Cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "HashiCorp.Cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "HashiCorp.Cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%[]",
                      "types": [
                        {
                          "formattingPattern": "object",
                          "types": [
                            {
                              "formattingPattern": "bool"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "HashiCorp.Cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformIterator.FromList(object List);"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator.FromMap",
            "displayName": "FromMap",
            "id": "cdktf.TerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformIterator.FromMap.parameter.Map",
                "displayName": "Map",
                "id": "cdktf.TerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "HashiCorp.Cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "object"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "string"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "double"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                      "types": [
                        {
                          "formattingPattern": "bool"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformIterator.FromMap(object Map);"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.TerraformIterator",
        "displayName": "TerraformIterator",
        "id": "cdktf.TerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TerraformSelf.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformSelf.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew TerraformSelf();"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformSelf.GetAny",
            "displayName": "GetAny",
            "id": "cdktf.TerraformSelf.getAny",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformSelf.GetAny.parameter.Key",
                "displayName": "Key",
                "id": "cdktf.TerraformSelf.getAny.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getAny(\"hostPort\")`"
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformSelf.GetAny(string Key);"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformSelf.GetNumber",
            "displayName": "GetNumber",
            "id": "cdktf.TerraformSelf.getNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformSelf.GetNumber.parameter.Key",
                "displayName": "Key",
                "id": "cdktf.TerraformSelf.getNumber.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getNumber(\"hostPort\")`"
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformSelf.GetNumber(string Key);"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformSelf.GetString",
            "displayName": "GetString",
            "id": "cdktf.TerraformSelf.getString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TerraformSelf.GetString.parameter.Key",
                "displayName": "Key",
                "id": "cdktf.TerraformSelf.getString.parameter.key",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getString(\"publicIp\")`"
            },
            "usage": "using HashiCorp.Cdktf;\n\nTerraformSelf.GetString(string Key);"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.TerraformSelf",
        "displayName": "TerraformSelf",
        "id": "cdktf.TerraformSelf",
        "docs": {
          "summary": "Expressions in connection blocks cannot refer to their parent resource by name.",
          "remarks": "References create dependencies, and referring to a resource by name within its own block would create a dependency cycle.\nInstead, expressions can use the self object, which represents the connection's parent resource and has all of that resource's attributes.\nFor example, use self.public_ip to reference an aws_instance's public_ip attribute."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.Testing.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Testing.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew Testing();"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Testing.App",
            "displayName": "App",
            "id": "cdktf.Testing.app",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.App.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Testing.app.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TestingAppOptions",
                      "displayName": "TestingAppOptions",
                      "fqn": "HashiCorp.Cdktf.TestingAppOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Returns an app for testing with the following properties: - Output directory is a temp dir."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTesting.App(TestingAppOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.EnableFutureFlags",
            "displayName": "EnableFutureFlags",
            "id": "cdktf.Testing.enableFutureFlags",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.EnableFutureFlags.parameter.App",
                "displayName": "App",
                "id": "cdktf.Testing.enableFutureFlags.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "HashiCorp.Cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.EnableFutureFlags(App App);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.FakeCdktfJsonPath",
            "displayName": "FakeCdktfJsonPath",
            "id": "cdktf.Testing.fakeCdktfJsonPath",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.FakeCdktfJsonPath.parameter.App",
                "displayName": "App",
                "id": "cdktf.Testing.fakeCdktfJsonPath.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "HashiCorp.Cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.FakeCdktfJsonPath(App App);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.FullSynth",
            "displayName": "FullSynth",
            "id": "cdktf.Testing.fullSynth",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.FullSynth.parameter.Stack",
                "displayName": "Stack",
                "id": "cdktf.Testing.fullSynth.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.FullSynth(TerraformStack Stack);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.RenderConstructTree",
            "displayName": "RenderConstructTree",
            "id": "cdktf.Testing.renderConstructTree",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.RenderConstructTree.parameter.Construct",
                "displayName": "Construct",
                "id": "cdktf.Testing.renderConstructTree.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "Constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.RenderConstructTree(IConstruct Construct);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.SetupJest",
            "displayName": "SetupJest",
            "id": "cdktf.Testing.setupJest",
            "parameters": [],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.SetupJest();"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.StubVersion",
            "displayName": "StubVersion",
            "id": "cdktf.Testing.stubVersion",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.StubVersion.parameter.App",
                "displayName": "App",
                "id": "cdktf.Testing.stubVersion.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "HashiCorp.Cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.StubVersion(App App);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.Synth",
            "displayName": "Synth",
            "id": "cdktf.Testing.synth",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.Synth.parameter.Stack",
                "displayName": "Stack",
                "id": "cdktf.Testing.synth.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "HashiCorp.Cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Testing.Synth.parameter.RunValidations",
                "displayName": "RunValidations",
                "id": "cdktf.Testing.synth.parameter.runValidations",
                "optional": true,
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Returns the Terraform synthesized JSON."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTesting.Synth(TerraformStack Stack, bool RunValidations = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.SynthScope",
            "displayName": "SynthScope",
            "id": "cdktf.Testing.synthScope",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.SynthScope.parameter.Fn",
                "displayName": "Fn",
                "id": "cdktf.Testing.synthScope.parameter.fn",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IScopeCallback",
                      "displayName": "IScopeCallback",
                      "fqn": "HashiCorp.Cdktf.IScopeCallback",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.SynthScope(IScopeCallback Fn);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.ToBeValidTerraform",
            "displayName": "ToBeValidTerraform",
            "id": "cdktf.Testing.toBeValidTerraform",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToBeValidTerraform.parameter.Received",
                "displayName": "Received",
                "id": "cdktf.Testing.toBeValidTerraform.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.ToBeValidTerraform(string Received);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.ToHaveDataSource",
            "displayName": "ToHaveDataSource",
            "id": "cdktf.Testing.toHaveDataSource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveDataSource.parameter.Received",
                "displayName": "Received",
                "id": "cdktf.Testing.toHaveDataSource.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveDataSource.parameter.ResourceType",
                "displayName": "ResourceType",
                "id": "cdktf.Testing.toHaveDataSource.parameter.resourceType",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.ToHaveDataSource(string Received, string ResourceType);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.ToHaveDataSourceWithProperties",
            "displayName": "ToHaveDataSourceWithProperties",
            "id": "cdktf.Testing.toHaveDataSourceWithProperties",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveDataSourceWithProperties.parameter.Received",
                "displayName": "Received",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveDataSourceWithProperties.parameter.ResourceType",
                "displayName": "ResourceType",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.resourceType",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveDataSourceWithProperties.parameter.Properties",
                "displayName": "Properties",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.properties",
                "optional": true,
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.ToHaveDataSourceWithProperties(string Received, string ResourceType, System.Collections.Generic.IDictionary<string, object> Properties = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.ToHaveResource",
            "displayName": "ToHaveResource",
            "id": "cdktf.Testing.toHaveResource",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveResource.parameter.Received",
                "displayName": "Received",
                "id": "cdktf.Testing.toHaveResource.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveResource.parameter.ResourceType",
                "displayName": "ResourceType",
                "id": "cdktf.Testing.toHaveResource.parameter.resourceType",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.ToHaveResource(string Received, string ResourceType);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Testing.ToHaveResourceWithProperties",
            "displayName": "ToHaveResourceWithProperties",
            "id": "cdktf.Testing.toHaveResourceWithProperties",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveResourceWithProperties.parameter.Received",
                "displayName": "Received",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.received",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveResourceWithProperties.parameter.ResourceType",
                "displayName": "ResourceType",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.resourceType",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Testing.ToHaveResourceWithProperties.parameter.Properties",
                "displayName": "Properties",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.properties",
                "optional": true,
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nTesting.ToHaveResourceWithProperties(string Received, string ResourceType, System.Collections.Generic.IDictionary<string, object> Properties = null);"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.Testing",
        "displayName": "Testing",
        "id": "cdktf.Testing",
        "docs": {
          "summary": "Testing utilities for cdktf applications."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.Token.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Token.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew Token();"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Token.AsAny",
            "displayName": "AsAny",
            "id": "cdktf.Token.asAny",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsAny.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asAny.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a resolvable representation of the given value."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsAny(object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsAnyMap",
            "displayName": "AsAnyMap",
            "id": "cdktf.Token.asAnyMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsAnyMap.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asAnyMap.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Token.AsAnyMap.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Token.asAnyMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "HashiCorp.Cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsAnyMap(object Value, EncodingOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsBooleanMap",
            "displayName": "AsBooleanMap",
            "id": "cdktf.Token.asBooleanMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsBooleanMap.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asBooleanMap.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Token.AsBooleanMap.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Token.asBooleanMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "HashiCorp.Cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsBooleanMap(object Value, EncodingOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsList",
            "displayName": "AsList",
            "id": "cdktf.Token.asList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsList.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asList.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Token.AsList.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Token.asList.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "HashiCorp.Cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible list representation of this token."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsList(object Value, EncodingOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsMap",
            "displayName": "AsMap",
            "id": "cdktf.Token.asMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsMap.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asMap.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Token.AsMap.parameter.MapValue",
                "displayName": "MapValue",
                "id": "cdktf.Token.asMap.parameter.mapValue",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Token.AsMap.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Token.asMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "HashiCorp.Cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsMap(object Value, object MapValue, EncodingOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsNumber",
            "displayName": "AsNumber",
            "id": "cdktf.Token.asNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsNumber.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asNumber.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible number representation of this token."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsNumber(object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsNumberList",
            "displayName": "AsNumberList",
            "id": "cdktf.Token.asNumberList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsNumberList.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asNumberList.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible list representation of this token."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsNumberList(object Value);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsNumberMap",
            "displayName": "AsNumberMap",
            "id": "cdktf.Token.asNumberMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsNumberMap.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asNumberMap.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Token.AsNumberMap.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Token.asNumberMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "HashiCorp.Cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsNumberMap(object Value, EncodingOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsString",
            "displayName": "AsString",
            "id": "cdktf.Token.asString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsString.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asString.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Token.AsString.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Token.asString.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "HashiCorp.Cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible string representation of this token.",
              "remarks": "If the Token is initialized with a literal, the stringified value of the\nliteral is returned. Otherwise, a special quoted string representation\nof the Token is returned that can be embedded into other strings.\n\nStrings with quoted Tokens in them can be restored back into\ncomplex values with the Tokens restored by calling `resolve()`\non the string."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsString(object Value, EncodingOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.AsStringMap",
            "displayName": "AsStringMap",
            "id": "cdktf.Token.asStringMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.AsStringMap.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.Token.asStringMap.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.Token.AsStringMap.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Token.asStringMap.parameter.options",
                "optional": true,
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.EncodingOptions",
                      "displayName": "EncodingOptions",
                      "fqn": "HashiCorp.Cdktf.EncodingOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.AsStringMap(object Value, EncodingOptions Options = null);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.IsUnresolved",
            "displayName": "IsUnresolved",
            "id": "cdktf.Token.isUnresolved",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Token.IsUnresolved.parameter.Obj",
                "displayName": "Obj",
                "id": "cdktf.Token.isUnresolved.parameter.obj",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "The object to test."
                }
              }
            ],
            "docs": {
              "summary": "Returns true if obj represents an unresolved value.",
              "remarks": "One of these must be true:\n\n* `obj` is an IResolvable\n* `obj` is a string containing at least one encoded `IResolvable`\n* `obj` is either an encoded number or list\n\nThis does NOT recurse into lists or objects to see if they\ncontaining resolvables."
            },
            "usage": "using HashiCorp.Cdktf;\n\nToken.IsUnresolved(object Obj);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.Token.property.AnyMapTokenValue",
            "displayName": "AnyMapTokenValue",
            "id": "cdktf.Token.property.ANY_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Any map token representation."
            },
            "usage": "public string AnyMapTokenValue { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.property.NumberMapTokenValue",
            "displayName": "NumberMapTokenValue",
            "id": "cdktf.Token.property.NUMBER_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "Number Map token value representation."
            },
            "usage": "public double NumberMapTokenValue { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.Token.property.StringMapTokenValue",
            "displayName": "StringMapTokenValue",
            "id": "cdktf.Token.property.STRING_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "String Map token value representation."
            },
            "usage": "public string StringMapTokenValue { get; }",
            "const": true
          }
        ],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.Token",
        "displayName": "Token",
        "id": "cdktf.Token",
        "docs": {
          "summary": "Represents a special or lazily-evaluated value.",
          "remarks": "Can be used to delay evaluation of a certain value in case, for example,\nthat it requires some context or late-bound data. Can also be used to\nmark values that need special processing at document rendering time.\n\nTokens can be embedded into strings while retaining their original\nsemantics."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.Tokenization.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Tokenization.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew Tokenization();"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.IsResolvable",
            "displayName": "IsResolvable",
            "id": "cdktf.Tokenization.isResolvable",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.IsResolvable.parameter.Obj",
                "displayName": "Obj",
                "id": "cdktf.Tokenization.isResolvable.parameter.obj",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return whether the given object is an IResolvable object.",
              "remarks": "This is different from Token.isUnresolved() which will also check for\nencoded Tokens, whereas this method will only do a type check on the given\nobject."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.IsResolvable(object Obj);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.Tokenization.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.Resolve.parameter.Obj",
                "displayName": "Obj",
                "id": "cdktf.Tokenization.resolve.parameter.obj",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "The object to resolve."
                }
              },
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.Resolve.parameter.Options",
                "displayName": "Options",
                "id": "cdktf.Tokenization.resolve.parameter.options",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ResolveOptions",
                      "displayName": "ResolveOptions",
                      "fqn": "HashiCorp.Cdktf.ResolveOptions",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "Prefix key path components for diagnostics."
                }
              }
            ],
            "docs": {
              "summary": "Resolves an object by evaluating all tokens and removing any undefined or empty objects or arrays.",
              "remarks": "Values can only be primitives, arrays or tokens. Other objects (i.e. with methods) will be rejected."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.Resolve(object Obj, ResolveOptions Options);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.Reverse",
            "displayName": "Reverse",
            "id": "cdktf.Tokenization.reverse",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.Reverse.parameter.X",
                "displayName": "X",
                "id": "cdktf.Tokenization.reverse.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Reverse any value into Resolvables, if possible."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.Reverse(object X);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.ReverseList",
            "displayName": "ReverseList",
            "id": "cdktf.Tokenization.reverseList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.ReverseList.parameter.L",
                "displayName": "L",
                "id": "cdktf.Tokenization.reverseList.parameter.l",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.ReverseList(string[] L);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.ReverseMap",
            "displayName": "ReverseMap",
            "id": "cdktf.Tokenization.reverseMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.ReverseMap.parameter.M",
                "displayName": "M",
                "id": "cdktf.Tokenization.reverseMap.parameter.m",
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a map."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.ReverseMap(System.Collections.Generic.IDictionary<string, object> M);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.ReverseNumber",
            "displayName": "ReverseNumber",
            "id": "cdktf.Tokenization.reverseNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.ReverseNumber.parameter.N",
                "displayName": "N",
                "id": "cdktf.Tokenization.reverseNumber.parameter.n",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a number."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.ReverseNumber(double N);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.ReverseNumberList",
            "displayName": "ReverseNumberList",
            "id": "cdktf.Tokenization.reverseNumberList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.ReverseNumberList.parameter.L",
                "displayName": "L",
                "id": "cdktf.Tokenization.reverseNumberList.parameter.l",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "double"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a list."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.ReverseNumberList(double[] L);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.ReverseString",
            "displayName": "ReverseString",
            "id": "cdktf.Tokenization.reverseString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.ReverseString.parameter.S",
                "displayName": "S",
                "id": "cdktf.Tokenization.reverseString.parameter.s",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a string potentially containing encoded tokens."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.ReverseString(string S);"
          },
          {
            "fqn": "HashiCorp.Cdktf.Tokenization.StringifyNumber",
            "displayName": "StringifyNumber",
            "id": "cdktf.Tokenization.stringifyNumber",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.Tokenization.StringifyNumber.parameter.X",
                "displayName": "X",
                "id": "cdktf.Tokenization.stringifyNumber.parameter.x",
                "type": {
                  "formattingPattern": "double"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Stringify a number directly or lazily if it's a Token.",
              "remarks": "If it is an object (i.e., { Ref: 'SomeLogicalId' }), return it as-is."
            },
            "usage": "using HashiCorp.Cdktf;\n\nTokenization.StringifyNumber(double X);"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.Tokenization",
        "displayName": "Tokenization",
        "id": "cdktf.Tokenization",
        "docs": {
          "summary": "Less oft-needed functions to manipulate Tokens."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TokenizedStringFragments.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew TokenizedStringFragments();"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.AddIntrinsic",
            "displayName": "AddIntrinsic",
            "id": "cdktf.TokenizedStringFragments.addIntrinsic",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.AddIntrinsic.parameter.Value",
                "displayName": "Value",
                "id": "cdktf.TokenizedStringFragments.addIntrinsic.parameter.value",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "the intrinsic value to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds an intrinsic fragment."
            },
            "usage": "private void AddIntrinsic(object Value)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.AddLiteral",
            "displayName": "AddLiteral",
            "id": "cdktf.TokenizedStringFragments.addLiteral",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.AddLiteral.parameter.Lit",
                "displayName": "Lit",
                "id": "cdktf.TokenizedStringFragments.addLiteral.parameter.lit",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {
                  "summary": "the literal to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds a literal fragment."
            },
            "usage": "private void AddLiteral(object Lit)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.AddToken",
            "displayName": "AddToken",
            "id": "cdktf.TokenizedStringFragments.addToken",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.AddToken.parameter.Token",
                "displayName": "Token",
                "id": "cdktf.TokenizedStringFragments.addToken.parameter.token",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "HashiCorp.Cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "the token to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds a token fragment."
            },
            "usage": "private void AddToken(IResolvable Token)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.Join",
            "displayName": "Join",
            "id": "cdktf.TokenizedStringFragments.join",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.Join.parameter.Concat",
                "displayName": "Concat",
                "id": "cdktf.TokenizedStringFragments.join.parameter.concat",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IFragmentConcatenator",
                      "displayName": "IFragmentConcatenator",
                      "fqn": "HashiCorp.Cdktf.IFragmentConcatenator",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Combine the string fragments using the given joiner.",
              "remarks": "If there are any"
            },
            "usage": "private object Join(IFragmentConcatenator Concat)"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.MapTokens",
            "displayName": "MapTokens",
            "id": "cdktf.TokenizedStringFragments.mapTokens",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.MapTokens.parameter.Mapper",
                "displayName": "Mapper",
                "id": "cdktf.TokenizedStringFragments.mapTokens.parameter.mapper",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITokenMapper",
                      "displayName": "ITokenMapper",
                      "fqn": "HashiCorp.Cdktf.ITokenMapper",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Apply a transformation function to all tokens in the string."
            },
            "usage": "private TokenizedStringFragments MapTokens(ITokenMapper Mapper)"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.property.FirstValue",
            "displayName": "FirstValue",
            "id": "cdktf.TokenizedStringFragments.property.firstValue",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {
              "summary": "Returns the first value."
            },
            "usage": "public object FirstValue { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.property.Intrinsic",
            "displayName": "Intrinsic",
            "id": "cdktf.TokenizedStringFragments.property.intrinsic",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "HashiCorp.Cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all intrinsic fragments from this string."
            },
            "usage": "public IResolvable[] Intrinsic { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.property.Length",
            "displayName": "Length",
            "id": "cdktf.TokenizedStringFragments.property.length",
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "Returns the number of fragments."
            },
            "usage": "public double Length { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.property.Literals",
            "displayName": "Literals",
            "id": "cdktf.TokenizedStringFragments.property.literals",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "HashiCorp.Cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all literals from this string."
            },
            "usage": "public IResolvable[] Literals { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.property.Tokens",
            "displayName": "Tokens",
            "id": "cdktf.TokenizedStringFragments.property.tokens",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "HashiCorp.Cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all Tokens from this string."
            },
            "usage": "public IResolvable[] Tokens { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TokenizedStringFragments.property.FirstToken",
            "displayName": "FirstToken",
            "id": "cdktf.TokenizedStringFragments.property.firstToken",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "HashiCorp.Cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "Returns the first token."
            },
            "usage": "public IResolvable FirstToken { get; }"
          }
        ],
        "fqn": "HashiCorp.Cdktf.TokenizedStringFragments",
        "displayName": "TokenizedStringFragments",
        "id": "cdktf.TokenizedStringFragments",
        "docs": {
          "summary": "Fragments of a concatenated string containing stringified Tokens."
        }
      },
      {
        "initializer": {
          "fqn": "HashiCorp.Cdktf.VariableType.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.VariableType.Initializer",
          "parameters": [],
          "usage": "using HashiCorp.Cdktf;\n\nnew VariableType();"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "HashiCorp.Cdktf.VariableType.List",
            "displayName": "List",
            "id": "cdktf.VariableType.list",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.VariableType.List.parameter.Type",
                "displayName": "Type",
                "id": "cdktf.VariableType.list.parameter.type",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nVariableType.List(string Type);"
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.Map",
            "displayName": "Map",
            "id": "cdktf.VariableType.map",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.VariableType.Map.parameter.Type",
                "displayName": "Type",
                "id": "cdktf.VariableType.map.parameter.type",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nVariableType.Map(string Type);"
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.Object",
            "displayName": "Object",
            "id": "cdktf.VariableType.object",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.VariableType.Object.parameter.Attributes",
                "displayName": "Attributes",
                "id": "cdktf.VariableType.object.parameter.attributes",
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nVariableType.Object(System.Collections.Generic.IDictionary<string, string> Attributes);"
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.Set",
            "displayName": "Set",
            "id": "cdktf.VariableType.set",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.VariableType.Set.parameter.Type",
                "displayName": "Type",
                "id": "cdktf.VariableType.set.parameter.type",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nVariableType.Set(string Type);"
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.Tuple",
            "displayName": "Tuple",
            "id": "cdktf.VariableType.tuple",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.VariableType.Tuple.parameter.Elements",
                "displayName": "Elements",
                "id": "cdktf.VariableType.tuple.parameter.elements",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "using HashiCorp.Cdktf;\n\nVariableType.Tuple(string Elements);"
          }
        ],
        "constants": [
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.Any",
            "displayName": "Any",
            "id": "cdktf.VariableType.property.ANY",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Any { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.Bool",
            "displayName": "Bool",
            "id": "cdktf.VariableType.property.BOOL",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Bool { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.List",
            "displayName": "List",
            "id": "cdktf.VariableType.property.LIST",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string List { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.ListBool",
            "displayName": "ListBool",
            "id": "cdktf.VariableType.property.LIST_BOOL",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ListBool { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.ListNumber",
            "displayName": "ListNumber",
            "id": "cdktf.VariableType.property.LIST_NUMBER",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ListNumber { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.ListString",
            "displayName": "ListString",
            "id": "cdktf.VariableType.property.LIST_STRING",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ListString { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.Map",
            "displayName": "Map",
            "id": "cdktf.VariableType.property.MAP",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Map { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.MapBool",
            "displayName": "MapBool",
            "id": "cdktf.VariableType.property.MAP_BOOL",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string MapBool { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.MapNumber",
            "displayName": "MapNumber",
            "id": "cdktf.VariableType.property.MAP_NUMBER",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string MapNumber { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.MapString",
            "displayName": "MapString",
            "id": "cdktf.VariableType.property.MAP_STRING",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string MapString { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.Number",
            "displayName": "Number",
            "id": "cdktf.VariableType.property.NUMBER",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Number { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.Set",
            "displayName": "Set",
            "id": "cdktf.VariableType.property.SET",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Set { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.SetBool",
            "displayName": "SetBool",
            "id": "cdktf.VariableType.property.SET_BOOL",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SetBool { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.SetNumber",
            "displayName": "SetNumber",
            "id": "cdktf.VariableType.property.SET_NUMBER",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SetNumber { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.SetString",
            "displayName": "SetString",
            "id": "cdktf.VariableType.property.SET_STRING",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SetString { get; }",
            "const": true
          },
          {
            "fqn": "HashiCorp.Cdktf.VariableType.property.String",
            "displayName": "String",
            "id": "cdktf.VariableType.property.STRING",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string String { get; }",
            "const": true
          }
        ],
        "properties": [],
        "fqn": "HashiCorp.Cdktf.VariableType",
        "displayName": "VariableType",
        "id": "cdktf.VariableType",
        "docs": {}
      }
    ],
    "structs": [
      {
        "fqn": "HashiCorp.Cdktf.AppOptions",
        "displayName": "AppOptions",
        "id": "cdktf.AppOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.AppOptions.property.Context",
            "displayName": "Context",
            "id": "cdktf.AppOptions.property.context",
            "optional": true,
            "default": "- no additional context",
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {
              "summary": "Additional context values for the application.",
              "remarks": "Context set by the CLI or the `context` key in `cdktf.json` has precedence.\n\nContext can be read from any construct using `node.getContext(key)`."
            },
            "usage": "public System.Collections.Generic.IDictionary<string, object> Context { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AppOptions.property.Outdir",
            "displayName": "Outdir",
            "id": "cdktf.AppOptions.property.outdir",
            "optional": true,
            "default": "- CDKTF_OUTDIR if defined, otherwise \"cdktf.out\"",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The directory to output Terraform resources."
            },
            "usage": "public string Outdir { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AppOptions.property.SkipValidation",
            "displayName": "SkipValidation",
            "id": "cdktf.AppOptions.property.skipValidation",
            "optional": true,
            "default": "- false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Whether to skip the validation during synthesis of the app."
            },
            "usage": "public bool SkipValidation { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AppOptions.property.StackTraces",
            "displayName": "StackTraces",
            "id": "cdktf.AppOptions.property.stackTraces",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool StackTraces { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew AppOptions {\n    System.Collections.Generic.IDictionary<string, object> Context = null,\n    string Outdir = null,\n    bool SkipValidation = null,\n    bool StackTraces = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.ArtifactoryBackendProps",
        "displayName": "ArtifactoryBackendProps",
        "id": "cdktf.ArtifactoryBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackendProps.property.Password",
            "displayName": "Password",
            "id": "cdktf.ArtifactoryBackendProps.property.password",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The password."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackendProps.property.Repo",
            "displayName": "Repo",
            "id": "cdktf.ArtifactoryBackendProps.property.repo",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The repository name."
            },
            "usage": "public string Repo { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackendProps.property.Subpath",
            "displayName": "Subpath",
            "id": "cdktf.ArtifactoryBackendProps.property.subpath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - Path within the repository."
            },
            "usage": "public string Subpath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackendProps.property.Url",
            "displayName": "Url",
            "id": "cdktf.ArtifactoryBackendProps.property.url",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The URL.",
              "remarks": "Note that this is the base url to artifactory not the full repo and subpath."
            },
            "usage": "public string Url { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ArtifactoryBackendProps.property.Username",
            "displayName": "Username",
            "id": "cdktf.ArtifactoryBackendProps.property.username",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The username."
            },
            "usage": "public string Username { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state as an artifact in a given repository in Artifactory.",
          "remarks": "Generic HTTP repositories are supported, and state from different configurations\nmay be kept at different subpaths within the repository.\n\nNote: The URL must include the path to the Artifactory installation.\nIt will likely end in /artifactory.\n\nThis backend does not support state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/artifactory"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew ArtifactoryBackendProps {\n    string Password,\n    string Repo,\n    string Subpath,\n    string Url,\n    string Username\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.AzurermBackendProps",
        "displayName": "AzurermBackendProps",
        "id": "cdktf.AzurermBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.ContainerName",
            "displayName": "ContainerName",
            "id": "cdktf.AzurermBackendProps.property.containerName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Container within the Storage Account."
            },
            "usage": "public string ContainerName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.Key",
            "displayName": "Key",
            "id": "cdktf.AzurermBackendProps.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
            },
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.StorageAccountName",
            "displayName": "StorageAccountName",
            "id": "cdktf.AzurermBackendProps.property.storageAccountName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Account."
            },
            "usage": "public string StorageAccountName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.AccessKey",
            "displayName": "AccessKey",
            "id": "cdktf.AzurermBackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable."
            },
            "usage": "public string AccessKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.ClientCertificatePassword",
            "displayName": "ClientCertificatePassword",
            "id": "cdktf.AzurermBackendProps.property.clientCertificatePassword",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable."
            },
            "usage": "public string ClientCertificatePassword { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.ClientCertificatePath",
            "displayName": "ClientCertificatePath",
            "id": "cdktf.AzurermBackendProps.property.clientCertificatePath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable."
            },
            "usage": "public string ClientCertificatePath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.ClientId",
            "displayName": "ClientId",
            "id": "cdktf.AzurermBackendProps.property.clientId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Client ID of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable."
            },
            "usage": "public string ClientId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.ClientSecret",
            "displayName": "ClientSecret",
            "id": "cdktf.AzurermBackendProps.property.clientSecret",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Client Secret of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable."
            },
            "usage": "public string ClientSecret { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.Endpoint",
            "displayName": "Endpoint",
            "id": "cdktf.AzurermBackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable.",
              "remarks": "NOTE: An endpoint should only be configured when using Azure Stack."
            },
            "usage": "public string Endpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.Environment",
            "displayName": "Environment",
            "id": "cdktf.AzurermBackendProps.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Azure Environment which should be used.",
              "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\nPossible values are public, china, german, stack and usgovernment. Defaults to public."
            },
            "usage": "public string Environment { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.MsiEndpoint",
            "displayName": "MsiEndpoint",
            "id": "cdktf.AzurermBackendProps.property.msiEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified.",
              "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable."
            },
            "usage": "public string MsiEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.OidcRequestToken",
            "displayName": "OidcRequestToken",
            "id": "cdktf.AzurermBackendProps.property.oidcRequestToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The bearer token for the request to the OIDC provider.",
              "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables."
            },
            "usage": "public string OidcRequestToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.OidcRequestUrl",
            "displayName": "OidcRequestUrl",
            "id": "cdktf.AzurermBackendProps.property.oidcRequestUrl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The URL for the OIDC provider from which to request an ID token.",
              "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables."
            },
            "usage": "public string OidcRequestUrl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.ResourceGroupName",
            "displayName": "ResourceGroupName",
            "id": "cdktf.AzurermBackendProps.property.resourceGroupName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
            },
            "usage": "public string ResourceGroupName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.SasToken",
            "displayName": "SasToken",
            "id": "cdktf.AzurermBackendProps.property.sasToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The SAS Token used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable."
            },
            "usage": "public string SasToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.Snapshot",
            "displayName": "Snapshot",
            "id": "cdktf.AzurermBackendProps.property.snapshot",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?",
              "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable."
            },
            "usage": "public bool Snapshot { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.SubscriptionId",
            "displayName": "SubscriptionId",
            "id": "cdktf.AzurermBackendProps.property.subscriptionId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Subscription ID in which the Storage Account exists.",
              "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable."
            },
            "usage": "public string SubscriptionId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.TenantId",
            "displayName": "TenantId",
            "id": "cdktf.AzurermBackendProps.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Tenant ID in which the Subscription exists.",
              "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable."
            },
            "usage": "public string TenantId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.UseAzureadAuth",
            "displayName": "UseAzureadAuth",
            "id": "cdktf.AzurermBackendProps.property.useAzureadAuth",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned."
            },
            "usage": "public bool UseAzureadAuth { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.UseMicrosoftGraph",
            "displayName": "UseMicrosoftGraph",
            "id": "cdktf.AzurermBackendProps.property.useMicrosoftGraph",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?",
              "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL."
            },
            "usage": "public bool UseMicrosoftGraph { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.UseMsi",
            "displayName": "UseMsi",
            "id": "cdktf.AzurermBackendProps.property.useMsi",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should Managed Service Identity authentication be used?",
              "remarks": "This can also be sourced from the ARM_USE_MSI environment variable."
            },
            "usage": "public bool UseMsi { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.AzurermBackendProps.property.UseOidc",
            "displayName": "UseOidc",
            "id": "cdktf.AzurermBackendProps.property.useOidc",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable.",
              "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default)."
            },
            "usage": "public bool UseOidc { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state as a Blob with the given Key within the Blob Container within the Blob Storage Account.",
          "remarks": "This backend supports state locking and consistency checking\nwith Azure Blob Storage native capabilities.\n\nNote: By default the Azure Backend uses ADAL for authentication which is deprecated\nin favour of MSAL - MSAL can be used by setting use_microsoft_graph to true.\nThe default for this will change in Terraform 1.2,\nso that MSAL authentication is used by default.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/azurerm"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew AzurermBackendProps {\n    string ContainerName,\n    string Key,\n    string StorageAccountName,\n    string AccessKey = null,\n    string ClientCertificatePassword = null,\n    string ClientCertificatePath = null,\n    string ClientId = null,\n    string ClientSecret = null,\n    string Endpoint = null,\n    string Environment = null,\n    string MsiEndpoint = null,\n    string OidcRequestToken = null,\n    string OidcRequestUrl = null,\n    string ResourceGroupName = null,\n    string SasToken = null,\n    bool Snapshot = null,\n    string SubscriptionId = null,\n    string TenantId = null,\n    bool UseAzureadAuth = null,\n    bool UseMicrosoftGraph = null,\n    bool UseMsi = null,\n    bool UseOidc = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.CloudBackendProps",
        "displayName": "CloudBackendProps",
        "id": "cdktf.CloudBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.CloudBackendProps.property.Organization",
            "displayName": "Organization",
            "id": "cdktf.CloudBackendProps.property.organization",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The name of the organization containing the workspace(s) the current configuration should use."
            },
            "usage": "public string Organization { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackendProps.property.Workspaces",
            "displayName": "Workspaces",
            "id": "cdktf.CloudBackendProps.property.workspaces",
            "type": {
              "formattingPattern": "object",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.NamedCloudWorkspace",
                      "displayName": "NamedCloudWorkspace",
                      "fqn": "HashiCorp.Cdktf.NamedCloudWorkspace",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TaggedCloudWorkspaces",
                      "displayName": "TaggedCloudWorkspaces",
                      "fqn": "HashiCorp.Cdktf.TaggedCloudWorkspaces",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "A nested block that specifies which remote Terraform Cloud workspaces to use for the current configuration.",
              "remarks": "The workspaces block must contain exactly one of the following arguments, each denoting a strategy for how workspaces should be mapped:"
            },
            "usage": "public object Workspaces { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackendProps.property.Hostname",
            "displayName": "Hostname",
            "id": "cdktf.CloudBackendProps.property.hostname",
            "optional": true,
            "default": "app.terraform.io",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The hostname of a Terraform Enterprise installation, if using Terraform Enterprise."
            },
            "usage": "public string Hostname { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CloudBackendProps.property.Token",
            "displayName": "Token",
            "id": "cdktf.CloudBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The token used to authenticate with Terraform Cloud.",
              "remarks": "We recommend omitting the token from the configuration, and instead using terraform login or manually configuring credentials in the CLI config file."
            },
            "usage": "public string Token { get; set; }"
          }
        ],
        "docs": {
          "summary": "The Cloud Backend synthesizes a {@link https://www.terraform.io/cli/cloud/settings#the-cloud-block cloud block}. The cloud block is a nested block within the top-level terraform settings block. It specifies which Terraform Cloud workspaces to use for the current working directory. The cloud block only affects Terraform CLI's behavior. When Terraform Cloud uses a configuration that contains a cloud block - for example, when a workspace is configured to use a VCS provider directly - it ignores the block and behaves according to its own workspace settings.",
          "remarks": "https://www.terraform.io/cli/cloud/settings#arguments"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew CloudBackendProps {\n    string Organization,\n    object Workspaces,\n    string Hostname = null,\n    string Token = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.ConsulBackendProps",
        "displayName": "ConsulBackendProps",
        "id": "cdktf.ConsulBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.AccessToken",
            "displayName": "AccessToken",
            "id": "cdktf.ConsulBackendProps.property.accessToken",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) Access token."
            },
            "usage": "public string AccessToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.Path",
            "displayName": "Path",
            "id": "cdktf.ConsulBackendProps.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) Path in the Consul KV store."
            },
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.Address",
            "displayName": "Address",
            "id": "cdktf.ConsulBackendProps.property.address",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port.",
              "remarks": "Defaults to the local agent HTTP listener."
            },
            "usage": "public string Address { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.CaFile",
            "displayName": "CaFile",
            "id": "cdktf.ConsulBackendProps.property.caFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
            },
            "usage": "public string CaFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.CertFile",
            "displayName": "CertFile",
            "id": "cdktf.ConsulBackendProps.property.certFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;",
              "remarks": "requires use of key_file."
            },
            "usage": "public string CertFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.Datacenter",
            "displayName": "Datacenter",
            "id": "cdktf.ConsulBackendProps.property.datacenter",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The datacenter to use.",
              "remarks": "Defaults to that of the agent."
            },
            "usage": "public string Datacenter { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.Gzip",
            "displayName": "Gzip",
            "id": "cdktf.ConsulBackendProps.property.gzip",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
            },
            "usage": "public bool Gzip { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.HttpAuth",
            "displayName": "HttpAuth",
            "id": "cdktf.ConsulBackendProps.property.httpAuth",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
            },
            "usage": "public string HttpAuth { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.KeyFile",
            "displayName": "KeyFile",
            "id": "cdktf.ConsulBackendProps.property.keyFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
            },
            "usage": "public string KeyFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.Lock",
            "displayName": "Lock",
            "id": "cdktf.ConsulBackendProps.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) false to disable locking.",
              "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking."
            },
            "usage": "public bool Lock { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ConsulBackendProps.property.Scheme",
            "displayName": "Scheme",
            "id": "cdktf.ConsulBackendProps.property.scheme",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https.",
              "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true."
            },
            "usage": "public string Scheme { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state in the Consul KV store at a given path. This backend supports state locking.",
          "remarks": "Read more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/consul"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew ConsulBackendProps {\n    string AccessToken,\n    string Path,\n    string Address = null,\n    string CaFile = null,\n    string CertFile = null,\n    string Datacenter = null,\n    bool Gzip = null,\n    string HttpAuth = null,\n    string KeyFile = null,\n    bool Lock = null,\n    string Scheme = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.CosBackendProps",
        "displayName": "CosBackendProps",
        "id": "cdktf.CosBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.CosBackendProps.property.Bucket",
            "displayName": "Bucket",
            "id": "cdktf.CosBackendProps.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the COS bucket.",
              "remarks": "You shall manually create it first."
            },
            "usage": "public string Bucket { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackendProps.property.Acl",
            "displayName": "Acl",
            "id": "cdktf.CosBackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read.",
              "remarks": "Defaults to private."
            },
            "usage": "public string Acl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackendProps.property.Encrypt",
            "displayName": "Encrypt",
            "id": "cdktf.CosBackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to enable server side encryption of the state file.",
              "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file."
            },
            "usage": "public bool Encrypt { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackendProps.property.Key",
            "displayName": "Key",
            "id": "cdktf.CosBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path for saving the state file in bucket.",
              "remarks": "Defaults to terraform.tfstate."
            },
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackendProps.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.CosBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The directory for saving the state file in bucket.",
              "remarks": "Default to \"env:\"."
            },
            "usage": "public string Prefix { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackendProps.property.Region",
            "displayName": "Region",
            "id": "cdktf.CosBackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The region of the COS bucket.",
              "remarks": "It supports environment variables TENCENTCLOUD_REGION."
            },
            "usage": "public string Region { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackendProps.property.SecretId",
            "displayName": "SecretId",
            "id": "cdktf.CosBackendProps.property.secretId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Secret id of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID."
            },
            "usage": "public string SecretId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.CosBackendProps.property.SecretKey",
            "displayName": "SecretKey",
            "id": "cdktf.CosBackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Secret key of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY."
            },
            "usage": "public string SecretKey { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state as an object in a configurable prefix in a given bucket on Tencent Cloud Object Storage (COS).",
          "remarks": "This backend supports state locking.\n\nWarning! It is highly recommended that you enable Object Versioning on the COS bucket to allow for state recovery in the case of accidental deletions and human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/cos"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew CosBackendProps {\n    string Bucket,\n    string Acl = null,\n    bool Encrypt = null,\n    string Key = null,\n    string Prefix = null,\n    string Region = null,\n    string SecretId = null,\n    string SecretKey = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig",
        "displayName": "DataTerraformRemoteStateArtifactoryConfig",
        "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig.property.Password",
            "displayName": "Password",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.password",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The password."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig.property.Repo",
            "displayName": "Repo",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.repo",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The repository name."
            },
            "usage": "public string Repo { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig.property.Subpath",
            "displayName": "Subpath",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.subpath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - Path within the repository."
            },
            "usage": "public string Subpath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig.property.Url",
            "displayName": "Url",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.url",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The URL.",
              "remarks": "Note that this is the base url to artifactory not the full repo and subpath."
            },
            "usage": "public string Url { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactoryConfig.property.Username",
            "displayName": "Username",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.username",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) - The username."
            },
            "usage": "public string Username { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateArtifactoryConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Password,\n    string Repo,\n    string Subpath,\n    string Url,\n    string Username\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig",
        "displayName": "DataTerraformRemoteStateAzurermConfig",
        "id": "cdktf.DataTerraformRemoteStateAzurermConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.ContainerName",
            "displayName": "ContainerName",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.containerName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Container within the Storage Account."
            },
            "usage": "public string ContainerName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.Key",
            "displayName": "Key",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
            },
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.StorageAccountName",
            "displayName": "StorageAccountName",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.storageAccountName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Account."
            },
            "usage": "public string StorageAccountName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.AccessKey",
            "displayName": "AccessKey",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable."
            },
            "usage": "public string AccessKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.ClientCertificatePassword",
            "displayName": "ClientCertificatePassword",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientCertificatePassword",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable."
            },
            "usage": "public string ClientCertificatePassword { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.ClientCertificatePath",
            "displayName": "ClientCertificatePath",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientCertificatePath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable."
            },
            "usage": "public string ClientCertificatePath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.ClientId",
            "displayName": "ClientId",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Client ID of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable."
            },
            "usage": "public string ClientId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.ClientSecret",
            "displayName": "ClientSecret",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientSecret",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Client Secret of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable."
            },
            "usage": "public string ClientSecret { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.Endpoint",
            "displayName": "Endpoint",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable.",
              "remarks": "NOTE: An endpoint should only be configured when using Azure Stack."
            },
            "usage": "public string Endpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.Environment",
            "displayName": "Environment",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Azure Environment which should be used.",
              "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\nPossible values are public, china, german, stack and usgovernment. Defaults to public."
            },
            "usage": "public string Environment { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.MsiEndpoint",
            "displayName": "MsiEndpoint",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.msiEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified.",
              "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable."
            },
            "usage": "public string MsiEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.OidcRequestToken",
            "displayName": "OidcRequestToken",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidcRequestToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The bearer token for the request to the OIDC provider.",
              "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables."
            },
            "usage": "public string OidcRequestToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.OidcRequestUrl",
            "displayName": "OidcRequestUrl",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidcRequestUrl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The URL for the OIDC provider from which to request an ID token.",
              "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables."
            },
            "usage": "public string OidcRequestUrl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.ResourceGroupName",
            "displayName": "ResourceGroupName",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.resourceGroupName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
            },
            "usage": "public string ResourceGroupName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.SasToken",
            "displayName": "SasToken",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.sasToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The SAS Token used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable."
            },
            "usage": "public string SasToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.Snapshot",
            "displayName": "Snapshot",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.snapshot",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?",
              "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable."
            },
            "usage": "public bool Snapshot { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.SubscriptionId",
            "displayName": "SubscriptionId",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.subscriptionId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Subscription ID in which the Storage Account exists.",
              "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable."
            },
            "usage": "public string SubscriptionId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.TenantId",
            "displayName": "TenantId",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The Tenant ID in which the Subscription exists.",
              "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable."
            },
            "usage": "public string TenantId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.UseAzureadAuth",
            "displayName": "UseAzureadAuth",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useAzureadAuth",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned."
            },
            "usage": "public bool UseAzureadAuth { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.UseMicrosoftGraph",
            "displayName": "UseMicrosoftGraph",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useMicrosoftGraph",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?",
              "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL."
            },
            "usage": "public bool UseMicrosoftGraph { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.UseMsi",
            "displayName": "UseMsi",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useMsi",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should Managed Service Identity authentication be used?",
              "remarks": "This can also be sourced from the ARM_USE_MSI environment variable."
            },
            "usage": "public bool UseMsi { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurermConfig.property.UseOidc",
            "displayName": "UseOidc",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useOidc",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable.",
              "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default)."
            },
            "usage": "public bool UseOidc { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateAzurermConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string ContainerName,\n    string Key,\n    string StorageAccountName,\n    string AccessKey = null,\n    string ClientCertificatePassword = null,\n    string ClientCertificatePath = null,\n    string ClientId = null,\n    string ClientSecret = null,\n    string Endpoint = null,\n    string Environment = null,\n    string MsiEndpoint = null,\n    string OidcRequestToken = null,\n    string OidcRequestUrl = null,\n    string ResourceGroupName = null,\n    string SasToken = null,\n    bool Snapshot = null,\n    string SubscriptionId = null,\n    string TenantId = null,\n    bool UseAzureadAuth = null,\n    bool UseMicrosoftGraph = null,\n    bool UseMsi = null,\n    bool UseOidc = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConfig",
        "displayName": "DataTerraformRemoteStateConfig",
        "id": "cdktf.DataTerraformRemoteStateConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig",
        "displayName": "DataTerraformRemoteStateConsulConfig",
        "id": "cdktf.DataTerraformRemoteStateConsulConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.AccessToken",
            "displayName": "AccessToken",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.accessToken",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) Access token."
            },
            "usage": "public string AccessToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.Path",
            "displayName": "Path",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) Path in the Consul KV store."
            },
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.Address",
            "displayName": "Address",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.address",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port.",
              "remarks": "Defaults to the local agent HTTP listener."
            },
            "usage": "public string Address { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.CaFile",
            "displayName": "CaFile",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.caFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
            },
            "usage": "public string CaFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.CertFile",
            "displayName": "CertFile",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.certFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;",
              "remarks": "requires use of key_file."
            },
            "usage": "public string CertFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.Datacenter",
            "displayName": "Datacenter",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.datacenter",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The datacenter to use.",
              "remarks": "Defaults to that of the agent."
            },
            "usage": "public string Datacenter { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.Gzip",
            "displayName": "Gzip",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.gzip",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
            },
            "usage": "public bool Gzip { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.HttpAuth",
            "displayName": "HttpAuth",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.httpAuth",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
            },
            "usage": "public string HttpAuth { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.KeyFile",
            "displayName": "KeyFile",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.keyFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
            },
            "usage": "public string KeyFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.Lock",
            "displayName": "Lock",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) false to disable locking.",
              "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking."
            },
            "usage": "public bool Lock { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsulConfig.property.Scheme",
            "displayName": "Scheme",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.scheme",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https.",
              "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true."
            },
            "usage": "public string Scheme { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateConsulConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string AccessToken,\n    string Path,\n    string Address = null,\n    string CaFile = null,\n    string CertFile = null,\n    string Datacenter = null,\n    bool Gzip = null,\n    string HttpAuth = null,\n    string KeyFile = null,\n    bool Lock = null,\n    string Scheme = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig",
        "displayName": "DataTerraformRemoteStateCosConfig",
        "id": "cdktf.DataTerraformRemoteStateCosConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.Bucket",
            "displayName": "Bucket",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the COS bucket.",
              "remarks": "You shall manually create it first."
            },
            "usage": "public string Bucket { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.Acl",
            "displayName": "Acl",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read.",
              "remarks": "Defaults to private."
            },
            "usage": "public string Acl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.Encrypt",
            "displayName": "Encrypt",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to enable server side encryption of the state file.",
              "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file."
            },
            "usage": "public bool Encrypt { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.Key",
            "displayName": "Key",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path for saving the state file in bucket.",
              "remarks": "Defaults to terraform.tfstate."
            },
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The directory for saving the state file in bucket.",
              "remarks": "Default to \"env:\"."
            },
            "usage": "public string Prefix { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.Region",
            "displayName": "Region",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The region of the COS bucket.",
              "remarks": "It supports environment variables TENCENTCLOUD_REGION."
            },
            "usage": "public string Region { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.SecretId",
            "displayName": "SecretId",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.secretId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Secret id of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID."
            },
            "usage": "public string SecretId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCosConfig.property.SecretKey",
            "displayName": "SecretKey",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Secret key of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY."
            },
            "usage": "public string SecretKey { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateCosConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Bucket,\n    string Acl = null,\n    bool Encrypt = null,\n    string Key = null,\n    string Prefix = null,\n    string Region = null,\n    string SecretId = null,\n    string SecretKey = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdConfig",
        "displayName": "DataTerraformRemoteStateEtcdConfig",
        "id": "cdktf.DataTerraformRemoteStateEtcdConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdConfig.property.Endpoints",
            "displayName": "Endpoints",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.endpoints",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) A space-separated list of the etcd endpoints."
            },
            "usage": "public string Endpoints { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdConfig.property.Path",
            "displayName": "Path",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The path where to store the state."
            },
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdConfig.property.Password",
            "displayName": "Password",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdConfig.property.Username",
            "displayName": "Username",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The username."
            },
            "usage": "public string Username { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateEtcdConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Endpoints,\n    string Path,\n    string Password = null,\n    string Username = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config",
        "displayName": "DataTerraformRemoteStateEtcdV3Config",
        "id": "cdktf.DataTerraformRemoteStateEtcdV3Config",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.Endpoints",
            "displayName": "Endpoints",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.endpoints",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Required) The list of 'etcd' endpoints which to connect to."
            },
            "usage": "public string[] Endpoints { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.CacertPath",
            "displayName": "CacertPath",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.cacertPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
            },
            "usage": "public string CacertPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.CertPath",
            "displayName": "CertPath",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.certPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
            },
            "usage": "public string CertPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.KeyPath",
            "displayName": "KeyPath",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.keyPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
            },
            "usage": "public string KeyPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.Lock",
            "displayName": "Lock",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to lock state access.",
              "remarks": "Defaults to true."
            },
            "usage": "public bool Lock { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.Password",
            "displayName": "Password",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Password used to connect to the etcd cluster."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd.",
              "remarks": "Defaults to \"\"."
            },
            "usage": "public string Prefix { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3Config.property.Username",
            "displayName": "Username",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Username used to connect to the etcd cluster."
            },
            "usage": "public string Username { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateEtcdV3Config {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string[] Endpoints,\n    string CacertPath = null,\n    string CertPath = null,\n    string KeyPath = null,\n    bool Lock = null,\n    string Password = null,\n    string Prefix = null,\n    string Username = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig",
        "displayName": "DataTerraformRemoteStateGcsConfig",
        "id": "cdktf.DataTerraformRemoteStateGcsConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.Bucket",
            "displayName": "Bucket",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the GCS bucket.",
              "remarks": "This name must be globally unique."
            },
            "usage": "public string Bucket { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.AccessToken",
            "displayName": "AccessToken",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.accessToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
            },
            "usage": "public string AccessToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.Credentials",
            "displayName": "Credentials",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.credentials",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format.",
              "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable."
            },
            "usage": "public string Credentials { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.EncryptionKey",
            "displayName": "EncryptionKey",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.encryptionKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
            },
            "usage": "public string EncryptionKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.ImpersonateServiceAccount",
            "displayName": "ImpersonateServiceAccount",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonateServiceAccount",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The service account to impersonate for accessing the State Bucket.",
              "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable."
            },
            "usage": "public string ImpersonateServiceAccount { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.ImpersonateServiceAccountDelegates",
            "displayName": "ImpersonateServiceAccountDelegates",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonateServiceAccountDelegates",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) The delegation chain for an impersonating a service account."
            },
            "usage": "public string[] ImpersonateServiceAccountDelegates { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcsConfig.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) GCS prefix inside the bucket.",
              "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate."
            },
            "usage": "public string Prefix { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateGcsConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Bucket,\n    string AccessToken = null,\n    string Credentials = null,\n    string EncryptionKey = null,\n    string ImpersonateServiceAccount = null,\n    string[] ImpersonateServiceAccountDelegates = null,\n    string Prefix = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig",
        "displayName": "DataTerraformRemoteStateHttpConfig",
        "id": "cdktf.DataTerraformRemoteStateHttpConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.Address",
            "displayName": "Address",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.address",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The address of the REST endpoint."
            },
            "usage": "public string Address { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.LockAddress",
            "displayName": "LockAddress",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.lockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The address of the lock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "public string LockAddress { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.LockMethod",
            "displayName": "LockMethod",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.lockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when locking.",
              "remarks": "Defaults to LOCK."
            },
            "usage": "public string LockMethod { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.Password",
            "displayName": "Password",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password for HTTP basic authentication."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.RetryMax",
            "displayName": "RetryMax",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryMax",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "(Optional) The number of HTTP request retries.",
              "remarks": "Defaults to 2."
            },
            "usage": "public double RetryMax { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.RetryWaitMax",
            "displayName": "RetryWaitMax",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryWaitMax",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 30."
            },
            "usage": "public double RetryWaitMax { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.RetryWaitMin",
            "displayName": "RetryWaitMin",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryWaitMin",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 1."
            },
            "usage": "public double RetryWaitMin { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.SkipCertVerification",
            "displayName": "SkipCertVerification",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.skipCertVerification",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to skip TLS verification.",
              "remarks": "Defaults to false."
            },
            "usage": "public bool SkipCertVerification { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.UnlockAddress",
            "displayName": "UnlockAddress",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The address of the unlock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "public string UnlockAddress { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.UnlockMethod",
            "displayName": "UnlockMethod",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when unlocking.",
              "remarks": "Defaults to UNLOCK."
            },
            "usage": "public string UnlockMethod { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.UpdateMethod",
            "displayName": "UpdateMethod",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.updateMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) HTTP method to use when updating state.",
              "remarks": "Defaults to POST."
            },
            "usage": "public string UpdateMethod { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttpConfig.property.Username",
            "displayName": "Username",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The username for HTTP basic authentication."
            },
            "usage": "public string Username { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateHttpConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Address,\n    string LockAddress = null,\n    string LockMethod = null,\n    string Password = null,\n    double RetryMax = null,\n    double RetryWaitMax = null,\n    double RetryWaitMin = null,\n    bool SkipCertVerification = null,\n    string UnlockAddress = null,\n    string UnlockMethod = null,\n    string UpdateMethod = null,\n    string Username = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocalConfig",
        "displayName": "DataTerraformRemoteStateLocalConfig",
        "id": "cdktf.DataTerraformRemoteStateLocalConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocalConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocalConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocalConfig.property.Path",
            "displayName": "Path",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.path",
            "optional": true,
            "default": "- defaults to terraform.${stackId}.tfstate",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Path where the state file is stored."
            },
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocalConfig.property.WorkspaceDir",
            "displayName": "WorkspaceDir",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspaceDir",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to non-default workspaces."
            },
            "usage": "public string WorkspaceDir { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateLocalConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Path = null,\n    string WorkspaceDir = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig",
        "displayName": "DataTerraformRemoteStateMantaConfig",
        "id": "cdktf.DataTerraformRemoteStateMantaConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.Account",
            "displayName": "Account",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.account",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Account { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.KeyId",
            "displayName": "KeyId",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.keyId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string KeyId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.Path",
            "displayName": "Path",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.InsecureSkipTlsVerify",
            "displayName": "InsecureSkipTlsVerify",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.insecureSkipTlsVerify",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool InsecureSkipTlsVerify { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.KeyMaterial",
            "displayName": "KeyMaterial",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.keyMaterial",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string KeyMaterial { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.ObjectName",
            "displayName": "ObjectName",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.objectName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ObjectName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.Url",
            "displayName": "Url",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.url",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Url { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateMantaConfig.property.User",
            "displayName": "User",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.user",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string User { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateMantaConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Account,\n    string KeyId,\n    string Path,\n    bool InsecureSkipTlsVerify = null,\n    string KeyMaterial = null,\n    string ObjectName = null,\n    string Url = null,\n    string User = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig",
        "displayName": "DataTerraformRemoteStateOssConfig",
        "id": "cdktf.DataTerraformRemoteStateOssConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Bucket",
            "displayName": "Bucket",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Bucket { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.AccessKey",
            "displayName": "AccessKey",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string AccessKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Acl",
            "displayName": "Acl",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Acl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.AssumeRole",
            "displayName": "AssumeRole",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.assumeRole",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.OssAssumeRole",
                  "displayName": "OssAssumeRole",
                  "fqn": "HashiCorp.Cdktf.OssAssumeRole",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public OssAssumeRole AssumeRole { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.EcsRoleName",
            "displayName": "EcsRoleName",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.ecsRoleName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string EcsRoleName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Encrypt",
            "displayName": "Encrypt",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Encrypt { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Endpoint",
            "displayName": "Endpoint",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Endpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Key",
            "displayName": "Key",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Prefix { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Profile",
            "displayName": "Profile",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Profile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.Region",
            "displayName": "Region",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Region { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.SecretKey",
            "displayName": "SecretKey",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SecretKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.SecurityToken",
            "displayName": "SecurityToken",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.securityToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SecurityToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.SharedCredentialsFile",
            "displayName": "SharedCredentialsFile",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SharedCredentialsFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.TablestoreEndpoint",
            "displayName": "TablestoreEndpoint",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestoreEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TablestoreEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOssConfig.property.TablestoreTable",
            "displayName": "TablestoreTable",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestoreTable",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TablestoreTable { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateOssConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Bucket,\n    string AccessKey = null,\n    string Acl = null,\n    OssAssumeRole AssumeRole = null,\n    string EcsRoleName = null,\n    bool Encrypt = null,\n    string Endpoint = null,\n    string Key = null,\n    string Prefix = null,\n    string Profile = null,\n    string Region = null,\n    string SecretKey = null,\n    string SecurityToken = null,\n    string SharedCredentialsFile = null,\n    string TablestoreEndpoint = null,\n    string TablestoreTable = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePgConfig",
        "displayName": "DataTerraformRemoteStatePgConfig",
        "id": "cdktf.DataTerraformRemoteStatePgConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePgConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePgConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePgConfig.property.ConnStr",
            "displayName": "ConnStr",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.connStr",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ConnStr { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePgConfig.property.SchemaName",
            "displayName": "SchemaName",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.schemaName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SchemaName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePgConfig.property.SkipSchemaCreation",
            "displayName": "SkipSchemaCreation",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.skipSchemaCreation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool SkipSchemaCreation { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStatePgConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string ConnStr,\n    string SchemaName = null,\n    bool SkipSchemaCreation = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateRemoteConfig",
        "displayName": "DataTerraformRemoteStateRemoteConfig",
        "id": "cdktf.DataTerraformRemoteStateRemoteConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateRemoteConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateRemoteConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateRemoteConfig.property.Organization",
            "displayName": "Organization",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.organization",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Organization { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateRemoteConfig.property.Workspaces",
            "displayName": "Workspaces",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspaces",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IRemoteWorkspace",
                  "displayName": "IRemoteWorkspace",
                  "fqn": "HashiCorp.Cdktf.IRemoteWorkspace",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public IRemoteWorkspace Workspaces { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateRemoteConfig.property.Hostname",
            "displayName": "Hostname",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.hostname",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Hostname { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateRemoteConfig.property.Token",
            "displayName": "Token",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Token { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateRemoteConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Organization,\n    IRemoteWorkspace Workspaces,\n    string Hostname = null,\n    string Token = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config",
        "displayName": "DataTerraformRemoteStateS3Config",
        "id": "cdktf.DataTerraformRemoteStateS3Config",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Bucket",
            "displayName": "Bucket",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Name of the S3 Bucket."
            },
            "usage": "public string Bucket { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Key",
            "displayName": "Key",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Path to the state file inside the S3 Bucket.",
              "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key"
            },
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.AccessKey",
            "displayName": "AccessKey",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) AWS access key.",
              "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)."
            },
            "usage": "public string AccessKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Acl",
            "displayName": "Acl",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Canned ACL to be applied to the state file."
            },
            "usage": "public string Acl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.AssumeRolePolicy",
            "displayName": "AssumeRolePolicy",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRolePolicy",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "public string AssumeRolePolicy { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.AssumeRolePolicyArns",
            "displayName": "AssumeRolePolicyArns",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRolePolicyArns",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "public string[] AssumeRolePolicyArns { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.AssumeRoleTags",
            "displayName": "AssumeRoleTags",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRoleTags",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Map of assume role session tags."
            },
            "usage": "public System.Collections.Generic.IDictionary<string, string> AssumeRoleTags { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.AssumeRoleTransitiveTagKeys",
            "displayName": "AssumeRoleTransitiveTagKeys",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRoleTransitiveTagKeys",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
            },
            "usage": "public string[] AssumeRoleTransitiveTagKeys { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.DynamodbEndpoint",
            "displayName": "DynamodbEndpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodbEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS DynamoDB API.",
              "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable."
            },
            "usage": "public string DynamodbEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.DynamodbTable",
            "displayName": "DynamodbTable",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodbTable",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency.",
              "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled."
            },
            "usage": "public string DynamodbTable { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Encrypt",
            "displayName": "Encrypt",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Enable server side encryption of the state file."
            },
            "usage": "public bool Encrypt { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Endpoint",
            "displayName": "Endpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS S3 API.",
              "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable."
            },
            "usage": "public string Endpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.ExternalId",
            "displayName": "ExternalId",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.externalId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) External identifier to use when assuming the role."
            },
            "usage": "public string ExternalId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.ForcePathStyle",
            "displayName": "ForcePathStyle",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.forcePathStyle",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
            },
            "usage": "public bool ForcePathStyle { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.IamEndpoint",
            "displayName": "IamEndpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.iamEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API.",
              "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable."
            },
            "usage": "public string IamEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.KmsKeyId",
            "displayName": "KmsKeyId",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.kmsKeyId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state.",
              "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key."
            },
            "usage": "public string KmsKeyId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.MaxRetries",
            "displayName": "MaxRetries",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.maxRetries",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure.",
              "remarks": "Defaults to 5."
            },
            "usage": "public double MaxRetries { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Profile",
            "displayName": "Profile",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
            },
            "usage": "public string Profile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Region",
            "displayName": "Region",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used).",
              "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables."
            },
            "usage": "public string Region { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.RoleArn",
            "displayName": "RoleArn",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.roleArn",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
            },
            "usage": "public string RoleArn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.SecretKey",
            "displayName": "SecretKey",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) AWS secret access key.",
              "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)"
            },
            "usage": "public string SecretKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.SessionName",
            "displayName": "SessionName",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Session name to use when assuming the role."
            },
            "usage": "public string SessionName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.SharedCredentialsFile",
            "displayName": "SharedCredentialsFile",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Path to the AWS shared credentials file.",
              "remarks": "Defaults to ~/.aws/credentials."
            },
            "usage": "public string SharedCredentialsFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.SkipCredentialsValidation",
            "displayName": "SkipCredentialsValidation",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipCredentialsValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip credentials validation via the STS API."
            },
            "usage": "public bool SkipCredentialsValidation { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.SkipMetadataApiCheck",
            "displayName": "SkipMetadataApiCheck",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipMetadataApiCheck",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip usage of EC2 Metadata API."
            },
            "usage": "public bool SkipMetadataApiCheck { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.SkipRegionValidation",
            "displayName": "SkipRegionValidation",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipRegionValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip validation of provided region name."
            },
            "usage": "public bool SkipRegionValidation { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.SseCustomerKey",
            "displayName": "SseCustomerKey",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sseCustomerKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C).",
              "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate."
            },
            "usage": "public string SseCustomerKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.StsEndpoint",
            "displayName": "StsEndpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.stsEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API.",
              "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable."
            },
            "usage": "public string StsEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.Token",
            "displayName": "Token",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Multi-Factor Authentication (MFA) token.",
              "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable."
            },
            "usage": "public string Token { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3Config.property.WorkspaceKeyPrefix",
            "displayName": "WorkspaceKeyPrefix",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.workspaceKeyPrefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Prefix applied to the state path inside the bucket.",
              "remarks": "This is only relevant when using a non-default workspace. Defaults to env:"
            },
            "usage": "public string WorkspaceKeyPrefix { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateS3Config {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Bucket,\n    string Key,\n    string AccessKey = null,\n    string Acl = null,\n    string AssumeRolePolicy = null,\n    string[] AssumeRolePolicyArns = null,\n    System.Collections.Generic.IDictionary<string, string> AssumeRoleTags = null,\n    string[] AssumeRoleTransitiveTagKeys = null,\n    string DynamodbEndpoint = null,\n    string DynamodbTable = null,\n    bool Encrypt = null,\n    string Endpoint = null,\n    string ExternalId = null,\n    bool ForcePathStyle = null,\n    string IamEndpoint = null,\n    string KmsKeyId = null,\n    double MaxRetries = null,\n    string Profile = null,\n    string Region = null,\n    string RoleArn = null,\n    string SecretKey = null,\n    string SessionName = null,\n    string SharedCredentialsFile = null,\n    bool SkipCredentialsValidation = null,\n    bool SkipMetadataApiCheck = null,\n    bool SkipRegionValidation = null,\n    string SseCustomerKey = null,\n    string StsEndpoint = null,\n    string Token = null,\n    string WorkspaceKeyPrefix = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig",
        "displayName": "DataTerraformRemoteStateSwiftConfig",
        "id": "cdktf.DataTerraformRemoteStateSwiftConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Defaults",
            "displayName": "Defaults",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Defaults { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Workspace",
            "displayName": "Workspace",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Workspace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Container",
            "displayName": "Container",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.container",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Container { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.ApplicationCredentialId",
            "displayName": "ApplicationCredentialId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ApplicationCredentialId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.ApplicationCredentialName",
            "displayName": "ApplicationCredentialName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ApplicationCredentialName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.ApplicationCredentialSecret",
            "displayName": "ApplicationCredentialSecret",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialSecret",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ApplicationCredentialSecret { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.ArchiveContainer",
            "displayName": "ArchiveContainer",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.archiveContainer",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ArchiveContainer { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.AuthUrl",
            "displayName": "AuthUrl",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.authUrl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string AuthUrl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.CacertFile",
            "displayName": "CacertFile",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cacertFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string CacertFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Cert",
            "displayName": "Cert",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cert",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Cert { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Cloud",
            "displayName": "Cloud",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cloud",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Cloud { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.DefaultDomain",
            "displayName": "DefaultDomain",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaultDomain",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string DefaultDomain { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.DomainId",
            "displayName": "DomainId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string DomainId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.DomainName",
            "displayName": "DomainName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string DomainName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.ExpireAfter",
            "displayName": "ExpireAfter",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.expireAfter",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ExpireAfter { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Insecure",
            "displayName": "Insecure",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Insecure { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Key",
            "displayName": "Key",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Password",
            "displayName": "Password",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.ProjectDomainId",
            "displayName": "ProjectDomainId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.projectDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ProjectDomainId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.ProjectDomainName",
            "displayName": "ProjectDomainName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.projectDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ProjectDomainName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.RegionName",
            "displayName": "RegionName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.regionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string RegionName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.StateName",
            "displayName": "StateName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.stateName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string StateName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.TenantId",
            "displayName": "TenantId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TenantId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.TenantName",
            "displayName": "TenantName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenantName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TenantName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.Token",
            "displayName": "Token",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Token { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.UserDomainId",
            "displayName": "UserDomainId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UserDomainId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.UserDomainName",
            "displayName": "UserDomainName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UserDomainName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.UserId",
            "displayName": "UserId",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UserId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwiftConfig.property.UserName",
            "displayName": "UserName",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UserName { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew DataTerraformRemoteStateSwiftConfig {\n    System.Collections.Generic.IDictionary<string, object> Defaults = null,\n    string Workspace = null,\n    string Container,\n    string ApplicationCredentialId = null,\n    string ApplicationCredentialName = null,\n    string ApplicationCredentialSecret = null,\n    string ArchiveContainer = null,\n    string AuthUrl = null,\n    string CacertFile = null,\n    string Cert = null,\n    string Cloud = null,\n    string DefaultDomain = null,\n    string DomainId = null,\n    string DomainName = null,\n    string ExpireAfter = null,\n    bool Insecure = null,\n    string Key = null,\n    string Password = null,\n    string ProjectDomainId = null,\n    string ProjectDomainName = null,\n    string RegionName = null,\n    string StateName = null,\n    string TenantId = null,\n    string TenantName = null,\n    string Token = null,\n    string UserDomainId = null,\n    string UserDomainName = null,\n    string UserId = null,\n    string UserName = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.EncodingOptions",
        "displayName": "EncodingOptions",
        "id": "cdktf.EncodingOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.EncodingOptions.property.DisplayHint",
            "displayName": "DisplayHint",
            "id": "cdktf.EncodingOptions.property.displayHint",
            "optional": true,
            "default": "- no display hint",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "A hint for the Token's purpose when stringifying it."
            },
            "usage": "public string DisplayHint { get; set; }"
          }
        ],
        "docs": {
          "summary": "Properties to string encodings."
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew EncodingOptions {\n    string DisplayHint = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.EtcdBackendProps",
        "displayName": "EtcdBackendProps",
        "id": "cdktf.EtcdBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackendProps.property.Endpoints",
            "displayName": "Endpoints",
            "id": "cdktf.EtcdBackendProps.property.endpoints",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) A space-separated list of the etcd endpoints."
            },
            "usage": "public string Endpoints { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackendProps.property.Path",
            "displayName": "Path",
            "id": "cdktf.EtcdBackendProps.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The path where to store the state."
            },
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackendProps.property.Password",
            "displayName": "Password",
            "id": "cdktf.EtcdBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdBackendProps.property.Username",
            "displayName": "Username",
            "id": "cdktf.EtcdBackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The username."
            },
            "usage": "public string Username { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state in etcd 2.x at a given path.",
          "remarks": "This backend does not support state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/etcd"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew EtcdBackendProps {\n    string Endpoints,\n    string Path,\n    string Password = null,\n    string Username = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps",
        "displayName": "EtcdV3BackendProps",
        "id": "cdktf.EtcdV3BackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps.property.Endpoints",
            "displayName": "Endpoints",
            "id": "cdktf.EtcdV3BackendProps.property.endpoints",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Required) The list of 'etcd' endpoints which to connect to."
            },
            "usage": "public string[] Endpoints { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps.property.CacertPath",
            "displayName": "CacertPath",
            "id": "cdktf.EtcdV3BackendProps.property.cacertPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
            },
            "usage": "public string CacertPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps.property.CertPath",
            "displayName": "CertPath",
            "id": "cdktf.EtcdV3BackendProps.property.certPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
            },
            "usage": "public string CertPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps.property.KeyPath",
            "displayName": "KeyPath",
            "id": "cdktf.EtcdV3BackendProps.property.keyPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
            },
            "usage": "public string KeyPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps.property.Lock",
            "displayName": "Lock",
            "id": "cdktf.EtcdV3BackendProps.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to lock state access.",
              "remarks": "Defaults to true."
            },
            "usage": "public bool Lock { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps.property.Password",
            "displayName": "Password",
            "id": "cdktf.EtcdV3BackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Password used to connect to the etcd cluster."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.EtcdV3BackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd.",
              "remarks": "Defaults to \"\"."
            },
            "usage": "public string Prefix { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.EtcdV3BackendProps.property.Username",
            "displayName": "Username",
            "id": "cdktf.EtcdV3BackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Username used to connect to the etcd cluster."
            },
            "usage": "public string Username { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state in the etcd KV store with a given prefix.",
          "remarks": "This backend supports state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/etcdv3"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew EtcdV3BackendProps {\n    string[] Endpoints,\n    string CacertPath = null,\n    string CertPath = null,\n    string KeyPath = null,\n    bool Lock = null,\n    string Password = null,\n    string Prefix = null,\n    string Username = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.FileProvisioner",
        "displayName": "FileProvisioner",
        "id": "cdktf.FileProvisioner",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.FileProvisioner.property.Destination",
            "displayName": "Destination",
            "id": "cdktf.FileProvisioner.property.destination",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The source file or directory.",
              "remarks": "Specify it either relative to the current working directory or as an absolute path.\nThis argument cannot be combined with content."
            },
            "usage": "public string Destination { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.FileProvisioner.property.Type",
            "displayName": "Type",
            "id": "cdktf.FileProvisioner.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Type { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.FileProvisioner.property.Connection",
            "displayName": "Connection",
            "id": "cdktf.FileProvisioner.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "object",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect."
            },
            "usage": "public object Connection { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.FileProvisioner.property.Content",
            "displayName": "Content",
            "id": "cdktf.FileProvisioner.property.content",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The destination path to write to on the remote system.",
              "remarks": "See Destination Paths below for more information."
            },
            "usage": "public string Content { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.FileProvisioner.property.Source",
            "displayName": "Source",
            "id": "cdktf.FileProvisioner.property.source",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The direct content to copy on the destination.",
              "remarks": "If destination is a file, the content will be written on that file.\nIn case of a directory, a file named tf-file-content is created inside that directory.\nWe recommend using a file as the destination when using content.\nThis argument cannot be combined with source."
            },
            "usage": "public string Source { get; set; }"
          }
        ],
        "docs": {
          "summary": "The file provisioner copies files or directories from the machine running Terraform to the newly created resource.",
          "remarks": "The file provisioner supports both ssh and winrm type connections.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/file file}"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew FileProvisioner {\n    string Destination,\n    string Type,\n    object Connection = null,\n    string Content = null,\n    string Source = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.GcsBackendProps",
        "displayName": "GcsBackendProps",
        "id": "cdktf.GcsBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.GcsBackendProps.property.Bucket",
            "displayName": "Bucket",
            "id": "cdktf.GcsBackendProps.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The name of the GCS bucket.",
              "remarks": "This name must be globally unique."
            },
            "usage": "public string Bucket { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackendProps.property.AccessToken",
            "displayName": "AccessToken",
            "id": "cdktf.GcsBackendProps.property.accessToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
            },
            "usage": "public string AccessToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackendProps.property.Credentials",
            "displayName": "Credentials",
            "id": "cdktf.GcsBackendProps.property.credentials",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format.",
              "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable."
            },
            "usage": "public string Credentials { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackendProps.property.EncryptionKey",
            "displayName": "EncryptionKey",
            "id": "cdktf.GcsBackendProps.property.encryptionKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
            },
            "usage": "public string EncryptionKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackendProps.property.ImpersonateServiceAccount",
            "displayName": "ImpersonateServiceAccount",
            "id": "cdktf.GcsBackendProps.property.impersonateServiceAccount",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The service account to impersonate for accessing the State Bucket.",
              "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable."
            },
            "usage": "public string ImpersonateServiceAccount { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackendProps.property.ImpersonateServiceAccountDelegates",
            "displayName": "ImpersonateServiceAccountDelegates",
            "id": "cdktf.GcsBackendProps.property.impersonateServiceAccountDelegates",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) The delegation chain for an impersonating a service account."
            },
            "usage": "public string[] ImpersonateServiceAccountDelegates { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.GcsBackendProps.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.GcsBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) GCS prefix inside the bucket.",
              "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate."
            },
            "usage": "public string Prefix { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state as an object in a configurable prefix in a pre-existing bucket on Google Cloud Storage (GCS).",
          "remarks": "The bucket must exist prior to configuring the backend.\n\nThis backend supports state locking.\n\nWarning! It is highly recommended that you enable Object Versioning on the GCS bucket\nto allow for state recovery in the case of accidental deletions and human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/gcs"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew GcsBackendProps {\n    string Bucket,\n    string AccessToken = null,\n    string Credentials = null,\n    string EncryptionKey = null,\n    string ImpersonateServiceAccount = null,\n    string[] ImpersonateServiceAccountDelegates = null,\n    string Prefix = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.HttpBackendProps",
        "displayName": "HttpBackendProps",
        "id": "cdktf.HttpBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.Address",
            "displayName": "Address",
            "id": "cdktf.HttpBackendProps.property.address",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Required) The address of the REST endpoint."
            },
            "usage": "public string Address { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.LockAddress",
            "displayName": "LockAddress",
            "id": "cdktf.HttpBackendProps.property.lockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The address of the lock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "public string LockAddress { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.LockMethod",
            "displayName": "LockMethod",
            "id": "cdktf.HttpBackendProps.property.lockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when locking.",
              "remarks": "Defaults to LOCK."
            },
            "usage": "public string LockMethod { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.Password",
            "displayName": "Password",
            "id": "cdktf.HttpBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The password for HTTP basic authentication."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.RetryMax",
            "displayName": "RetryMax",
            "id": "cdktf.HttpBackendProps.property.retryMax",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "(Optional) The number of HTTP request retries.",
              "remarks": "Defaults to 2."
            },
            "usage": "public double RetryMax { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.RetryWaitMax",
            "displayName": "RetryWaitMax",
            "id": "cdktf.HttpBackendProps.property.retryWaitMax",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 30."
            },
            "usage": "public double RetryWaitMax { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.RetryWaitMin",
            "displayName": "RetryWaitMin",
            "id": "cdktf.HttpBackendProps.property.retryWaitMin",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 1."
            },
            "usage": "public double RetryWaitMin { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.SkipCertVerification",
            "displayName": "SkipCertVerification",
            "id": "cdktf.HttpBackendProps.property.skipCertVerification",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to skip TLS verification.",
              "remarks": "Defaults to false."
            },
            "usage": "public bool SkipCertVerification { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.UnlockAddress",
            "displayName": "UnlockAddress",
            "id": "cdktf.HttpBackendProps.property.unlockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The address of the unlock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "public string UnlockAddress { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.UnlockMethod",
            "displayName": "UnlockMethod",
            "id": "cdktf.HttpBackendProps.property.unlockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when unlocking.",
              "remarks": "Defaults to UNLOCK."
            },
            "usage": "public string UnlockMethod { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.UpdateMethod",
            "displayName": "UpdateMethod",
            "id": "cdktf.HttpBackendProps.property.updateMethod",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) HTTP method to use when updating state.",
              "remarks": "Defaults to POST."
            },
            "usage": "public string UpdateMethod { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.HttpBackendProps.property.Username",
            "displayName": "Username",
            "id": "cdktf.HttpBackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The username for HTTP basic authentication."
            },
            "usage": "public string Username { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state using a simple REST client.",
          "remarks": "State will be fetched via GET, updated via POST, and purged with DELETE.\nThe method used for updating is configurable.\n\nThis backend optionally supports state locking.\nWhen locking support is enabled it will use LOCK and UNLOCK requests providing the lock info in the body.\nThe endpoint should return a 423: Locked or 409: Conflict with the holding lock info when\nit's already taken, 200: OK for success. Any other status will be considered an error.\nThe ID of the holding lock info will be added as a query parameter to state updates requests.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/http"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew HttpBackendProps {\n    string Address,\n    string LockAddress = null,\n    string LockMethod = null,\n    string Password = null,\n    double RetryMax = null,\n    double RetryWaitMax = null,\n    double RetryWaitMin = null,\n    bool SkipCertVerification = null,\n    string UnlockAddress = null,\n    string UnlockMethod = null,\n    string UpdateMethod = null,\n    string Username = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.LazyAnyValueOptions",
        "displayName": "LazyAnyValueOptions",
        "id": "cdktf.LazyAnyValueOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.LazyAnyValueOptions.property.DisplayHint",
            "displayName": "DisplayHint",
            "id": "cdktf.LazyAnyValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "public string DisplayHint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LazyAnyValueOptions.property.OmitEmptyArray",
            "displayName": "OmitEmptyArray",
            "id": "cdktf.LazyAnyValueOptions.property.omitEmptyArray",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "If the produced value is an array and it is empty, return 'undefined' instead."
            },
            "usage": "public bool OmitEmptyArray { get; set; }"
          }
        ],
        "docs": {
          "summary": "Options for creating lazy untyped tokens."
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew LazyAnyValueOptions {\n    string DisplayHint = null,\n    bool OmitEmptyArray = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.LazyListValueOptions",
        "displayName": "LazyListValueOptions",
        "id": "cdktf.LazyListValueOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.LazyListValueOptions.property.DisplayHint",
            "displayName": "DisplayHint",
            "id": "cdktf.LazyListValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "public string DisplayHint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LazyListValueOptions.property.OmitEmpty",
            "displayName": "OmitEmpty",
            "id": "cdktf.LazyListValueOptions.property.omitEmpty",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "If the produced list is empty, return 'undefined' instead."
            },
            "usage": "public bool OmitEmpty { get; set; }"
          }
        ],
        "docs": {
          "summary": "Options for creating a lazy list token."
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew LazyListValueOptions {\n    string DisplayHint = null,\n    bool OmitEmpty = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.LazyStringValueOptions",
        "displayName": "LazyStringValueOptions",
        "id": "cdktf.LazyStringValueOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.LazyStringValueOptions.property.DisplayHint",
            "displayName": "DisplayHint",
            "id": "cdktf.LazyStringValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "public string DisplayHint { get; set; }"
          }
        ],
        "docs": {
          "summary": "Options for creating a lazy string token."
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew LazyStringValueOptions {\n    string DisplayHint = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.LocalBackendProps",
        "displayName": "LocalBackendProps",
        "id": "cdktf.LocalBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.LocalBackendProps.property.Path",
            "displayName": "Path",
            "id": "cdktf.LocalBackendProps.property.path",
            "optional": true,
            "default": "- defaults to terraform.${stackId}.tfstate",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Path where the state file is stored."
            },
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalBackendProps.property.WorkspaceDir",
            "displayName": "WorkspaceDir",
            "id": "cdktf.LocalBackendProps.property.workspaceDir",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The path to non-default workspaces."
            },
            "usage": "public string WorkspaceDir { get; set; }"
          }
        ],
        "docs": {
          "summary": "The local backend stores state on the local filesystem, locks that state using system APIs, and performs operations locally.",
          "remarks": "Read more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/local"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew LocalBackendProps {\n    string Path = null,\n    string WorkspaceDir = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.LocalExecProvisioner",
        "displayName": "LocalExecProvisioner",
        "id": "cdktf.LocalExecProvisioner",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.LocalExecProvisioner.property.Command",
            "displayName": "Command",
            "id": "cdktf.LocalExecProvisioner.property.command",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "This is the command to execute.",
              "remarks": "It can be provided as a relative path to the current working directory or as an absolute path.\nIt is evaluated in a shell, and can use environment variables or Terraform variables."
            },
            "usage": "public string Command { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalExecProvisioner.property.Type",
            "displayName": "Type",
            "id": "cdktf.LocalExecProvisioner.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Type { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalExecProvisioner.property.Environment",
            "displayName": "Environment",
            "id": "cdktf.LocalExecProvisioner.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "A record of key value pairs representing the environment of the executed command.",
              "remarks": "It inherits the current process environment."
            },
            "usage": "public System.Collections.Generic.IDictionary<string, string> Environment { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalExecProvisioner.property.Interpreter",
            "displayName": "Interpreter",
            "id": "cdktf.LocalExecProvisioner.property.interpreter",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "If provided, this is a list of interpreter arguments used to execute the command.",
              "remarks": "The first argument is the interpreter itself.\nIt can be provided as a relative path to the current working directory or as an absolute path\nThe remaining arguments are appended prior to the command.\nThis allows building command lines of the form \"/bin/bash\", \"-c\", \"echo foo\".\nIf interpreter is unspecified, sensible defaults will be chosen based on the system OS."
            },
            "usage": "public string[] Interpreter { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalExecProvisioner.property.When",
            "displayName": "When",
            "id": "cdktf.LocalExecProvisioner.property.when",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "If provided, specifies when Terraform will execute the command.",
              "remarks": "For example, when = destroy specifies that the provisioner will run when the associated resource is destroyed"
            },
            "usage": "public string When { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.LocalExecProvisioner.property.WorkingDir",
            "displayName": "WorkingDir",
            "id": "cdktf.LocalExecProvisioner.property.workingDir",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "If provided, specifies the working directory where command will be executed.",
              "remarks": "It can be provided as a relative path to the current working directory or as an absolute path.\nThe directory must exist."
            },
            "usage": "public string WorkingDir { get; set; }"
          }
        ],
        "docs": {
          "summary": "The local-exec provisioner invokes a local executable after a resource is created.",
          "remarks": "This invokes a process on the machine running Terraform, not on the resource.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/local-exec local-exec}"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew LocalExecProvisioner {\n    string Command,\n    string Type,\n    System.Collections.Generic.IDictionary<string, string> Environment = null,\n    string[] Interpreter = null,\n    string When = null,\n    string WorkingDir = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.MantaBackendProps",
        "displayName": "MantaBackendProps",
        "id": "cdktf.MantaBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.MantaBackendProps.property.Account",
            "displayName": "Account",
            "id": "cdktf.MantaBackendProps.property.account",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Account { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackendProps.property.KeyId",
            "displayName": "KeyId",
            "id": "cdktf.MantaBackendProps.property.keyId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string KeyId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackendProps.property.Path",
            "displayName": "Path",
            "id": "cdktf.MantaBackendProps.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackendProps.property.InsecureSkipTlsVerify",
            "displayName": "InsecureSkipTlsVerify",
            "id": "cdktf.MantaBackendProps.property.insecureSkipTlsVerify",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool InsecureSkipTlsVerify { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackendProps.property.KeyMaterial",
            "displayName": "KeyMaterial",
            "id": "cdktf.MantaBackendProps.property.keyMaterial",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string KeyMaterial { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackendProps.property.ObjectName",
            "displayName": "ObjectName",
            "id": "cdktf.MantaBackendProps.property.objectName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ObjectName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackendProps.property.Url",
            "displayName": "Url",
            "id": "cdktf.MantaBackendProps.property.url",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Url { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.MantaBackendProps.property.User",
            "displayName": "User",
            "id": "cdktf.MantaBackendProps.property.user",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string User { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew MantaBackendProps {\n    string Account,\n    string KeyId,\n    string Path,\n    bool InsecureSkipTlsVerify = null,\n    string KeyMaterial = null,\n    string ObjectName = null,\n    string Url = null,\n    string User = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.OssAssumeRole",
        "displayName": "OssAssumeRole",
        "id": "cdktf.OssAssumeRole",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.OssAssumeRole.property.RoleArn",
            "displayName": "RoleArn",
            "id": "cdktf.OssAssumeRole.property.roleArn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string RoleArn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssAssumeRole.property.Policy",
            "displayName": "Policy",
            "id": "cdktf.OssAssumeRole.property.policy",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Policy { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssAssumeRole.property.SessionExpiration",
            "displayName": "SessionExpiration",
            "id": "cdktf.OssAssumeRole.property.sessionExpiration",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {},
            "usage": "public double SessionExpiration { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssAssumeRole.property.SessionName",
            "displayName": "SessionName",
            "id": "cdktf.OssAssumeRole.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SessionName { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew OssAssumeRole {\n    string RoleArn,\n    string Policy = null,\n    double SessionExpiration = null,\n    string SessionName = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.OssBackendProps",
        "displayName": "OssBackendProps",
        "id": "cdktf.OssBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.Bucket",
            "displayName": "Bucket",
            "id": "cdktf.OssBackendProps.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Bucket { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.AccessKey",
            "displayName": "AccessKey",
            "id": "cdktf.OssBackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string AccessKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.Acl",
            "displayName": "Acl",
            "id": "cdktf.OssBackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Acl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.AssumeRole",
            "displayName": "AssumeRole",
            "id": "cdktf.OssBackendProps.property.assumeRole",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.OssAssumeRole",
                  "displayName": "OssAssumeRole",
                  "fqn": "HashiCorp.Cdktf.OssAssumeRole",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public OssAssumeRole AssumeRole { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.EcsRoleName",
            "displayName": "EcsRoleName",
            "id": "cdktf.OssBackendProps.property.ecsRoleName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string EcsRoleName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.Encrypt",
            "displayName": "Encrypt",
            "id": "cdktf.OssBackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Encrypt { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.Endpoint",
            "displayName": "Endpoint",
            "id": "cdktf.OssBackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Endpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.Key",
            "displayName": "Key",
            "id": "cdktf.OssBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.Prefix",
            "displayName": "Prefix",
            "id": "cdktf.OssBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Prefix { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.Profile",
            "displayName": "Profile",
            "id": "cdktf.OssBackendProps.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Profile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.Region",
            "displayName": "Region",
            "id": "cdktf.OssBackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Region { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.SecretKey",
            "displayName": "SecretKey",
            "id": "cdktf.OssBackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SecretKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.SecurityToken",
            "displayName": "SecurityToken",
            "id": "cdktf.OssBackendProps.property.securityToken",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SecurityToken { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.SharedCredentialsFile",
            "displayName": "SharedCredentialsFile",
            "id": "cdktf.OssBackendProps.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SharedCredentialsFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.TablestoreEndpoint",
            "displayName": "TablestoreEndpoint",
            "id": "cdktf.OssBackendProps.property.tablestoreEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TablestoreEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.OssBackendProps.property.TablestoreTable",
            "displayName": "TablestoreTable",
            "id": "cdktf.OssBackendProps.property.tablestoreTable",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TablestoreTable { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew OssBackendProps {\n    string Bucket,\n    string AccessKey = null,\n    string Acl = null,\n    OssAssumeRole AssumeRole = null,\n    string EcsRoleName = null,\n    bool Encrypt = null,\n    string Endpoint = null,\n    string Key = null,\n    string Prefix = null,\n    string Profile = null,\n    string Region = null,\n    string SecretKey = null,\n    string SecurityToken = null,\n    string SharedCredentialsFile = null,\n    string TablestoreEndpoint = null,\n    string TablestoreTable = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.PgBackendProps",
        "displayName": "PgBackendProps",
        "id": "cdktf.PgBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.PgBackendProps.property.ConnStr",
            "displayName": "ConnStr",
            "id": "cdktf.PgBackendProps.property.connStr",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ConnStr { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackendProps.property.SchemaName",
            "displayName": "SchemaName",
            "id": "cdktf.PgBackendProps.property.schemaName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SchemaName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.PgBackendProps.property.SkipSchemaCreation",
            "displayName": "SkipSchemaCreation",
            "id": "cdktf.PgBackendProps.property.skipSchemaCreation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool SkipSchemaCreation { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew PgBackendProps {\n    string ConnStr,\n    string SchemaName = null,\n    bool SkipSchemaCreation = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.RemoteBackendProps",
        "displayName": "RemoteBackendProps",
        "id": "cdktf.RemoteBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackendProps.property.Organization",
            "displayName": "Organization",
            "id": "cdktf.RemoteBackendProps.property.organization",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Organization { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackendProps.property.Workspaces",
            "displayName": "Workspaces",
            "id": "cdktf.RemoteBackendProps.property.workspaces",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IRemoteWorkspace",
                  "displayName": "IRemoteWorkspace",
                  "fqn": "HashiCorp.Cdktf.IRemoteWorkspace",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public IRemoteWorkspace Workspaces { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackendProps.property.Hostname",
            "displayName": "Hostname",
            "id": "cdktf.RemoteBackendProps.property.hostname",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Hostname { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteBackendProps.property.Token",
            "displayName": "Token",
            "id": "cdktf.RemoteBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Token { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew RemoteBackendProps {\n    string Organization,\n    IRemoteWorkspace Workspaces,\n    string Hostname = null,\n    string Token = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner",
        "displayName": "RemoteExecProvisioner",
        "id": "cdktf.RemoteExecProvisioner",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner.property.Type",
            "displayName": "Type",
            "id": "cdktf.RemoteExecProvisioner.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Type { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner.property.Connection",
            "displayName": "Connection",
            "id": "cdktf.RemoteExecProvisioner.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "object",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
              "remarks": "A connection must be provided here or in the parent resource."
            },
            "usage": "public object Connection { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner.property.Inline",
            "displayName": "Inline",
            "id": "cdktf.RemoteExecProvisioner.property.inline",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "This is a list of command strings.",
              "remarks": "They are executed in the order they are provided.\nThis cannot be provided with script or scripts."
            },
            "usage": "public string[] Inline { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner.property.Script",
            "displayName": "Script",
            "id": "cdktf.RemoteExecProvisioner.property.script",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "This is a path (relative or absolute) to a local script that will be copied to the remote resource and then executed.",
              "remarks": "This cannot be provided with inline or scripts."
            },
            "usage": "public string Script { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner.property.Scripts",
            "displayName": "Scripts",
            "id": "cdktf.RemoteExecProvisioner.property.scripts",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "This is a list of paths (relative or absolute) to local scripts that will be copied to the remote resource and then executed.",
              "remarks": "They are executed in the order they are provided.\nThis cannot be provided with inline or script."
            },
            "usage": "public string[] Scripts { get; set; }"
          }
        ],
        "docs": {
          "summary": "The remote-exec provisioner invokes a script on a remote resource after it is created.",
          "remarks": "This can be used to run a configuration management tool, bootstrap into a cluster, etc\nThe remote-exec provisioner requires a connection and supports both ssh and winrm.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/remote-exec remote-exec}"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew RemoteExecProvisioner {\n    string Type,\n    object Connection = null,\n    string[] Inline = null,\n    string Script = null,\n    string[] Scripts = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.ResolveOptions",
        "displayName": "ResolveOptions",
        "id": "cdktf.ResolveOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ResolveOptions.property.Resolver",
            "displayName": "Resolver",
            "id": "cdktf.ResolveOptions.property.resolver",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITokenResolver",
                  "displayName": "ITokenResolver",
                  "fqn": "HashiCorp.Cdktf.ITokenResolver",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The resolver to apply to any resolvable tokens found."
            },
            "usage": "public ITokenResolver Resolver { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ResolveOptions.property.Scope",
            "displayName": "Scope",
            "id": "cdktf.ResolveOptions.property.scope",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.IConstruct",
                  "displayName": "IConstruct",
                  "fqn": "Constructs.IConstruct",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The scope from which resolution is performed."
            },
            "usage": "public IConstruct Scope { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ResolveOptions.property.Preparing",
            "displayName": "Preparing",
            "id": "cdktf.ResolveOptions.property.preparing",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Whether the resolution is being executed during the prepare phase or not."
            },
            "usage": "public bool Preparing { get; set; }"
          }
        ],
        "docs": {
          "summary": "Options to the resolve() operation.",
          "remarks": "NOT the same as the ResolveContext; ResolveContext is exposed to Token\nimplementors and resolution hooks, whereas this struct is just to bundle\na number of things that would otherwise be arguments to resolve() in a\nreadable way."
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew ResolveOptions {\n    ITokenResolver Resolver,\n    IConstruct Scope,\n    bool Preparing = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.S3BackendProps",
        "displayName": "S3BackendProps",
        "id": "cdktf.S3BackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.Bucket",
            "displayName": "Bucket",
            "id": "cdktf.S3BackendProps.property.bucket",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Name of the S3 Bucket."
            },
            "usage": "public string Bucket { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.Key",
            "displayName": "Key",
            "id": "cdktf.S3BackendProps.property.key",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Path to the state file inside the S3 Bucket.",
              "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key"
            },
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.AccessKey",
            "displayName": "AccessKey",
            "id": "cdktf.S3BackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) AWS access key.",
              "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)."
            },
            "usage": "public string AccessKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.Acl",
            "displayName": "Acl",
            "id": "cdktf.S3BackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Canned ACL to be applied to the state file."
            },
            "usage": "public string Acl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.AssumeRolePolicy",
            "displayName": "AssumeRolePolicy",
            "id": "cdktf.S3BackendProps.property.assumeRolePolicy",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "public string AssumeRolePolicy { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.AssumeRolePolicyArns",
            "displayName": "AssumeRolePolicyArns",
            "id": "cdktf.S3BackendProps.property.assumeRolePolicyArns",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "public string[] AssumeRolePolicyArns { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.AssumeRoleTags",
            "displayName": "AssumeRoleTags",
            "id": "cdktf.S3BackendProps.property.assumeRoleTags",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Map of assume role session tags."
            },
            "usage": "public System.Collections.Generic.IDictionary<string, string> AssumeRoleTags { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.AssumeRoleTransitiveTagKeys",
            "displayName": "AssumeRoleTransitiveTagKeys",
            "id": "cdktf.S3BackendProps.property.assumeRoleTransitiveTagKeys",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
            },
            "usage": "public string[] AssumeRoleTransitiveTagKeys { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.DynamodbEndpoint",
            "displayName": "DynamodbEndpoint",
            "id": "cdktf.S3BackendProps.property.dynamodbEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS DynamoDB API.",
              "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable."
            },
            "usage": "public string DynamodbEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.DynamodbTable",
            "displayName": "DynamodbTable",
            "id": "cdktf.S3BackendProps.property.dynamodbTable",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency.",
              "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled."
            },
            "usage": "public string DynamodbTable { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.Encrypt",
            "displayName": "Encrypt",
            "id": "cdktf.S3BackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Enable server side encryption of the state file."
            },
            "usage": "public bool Encrypt { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.Endpoint",
            "displayName": "Endpoint",
            "id": "cdktf.S3BackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS S3 API.",
              "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable."
            },
            "usage": "public string Endpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.ExternalId",
            "displayName": "ExternalId",
            "id": "cdktf.S3BackendProps.property.externalId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) External identifier to use when assuming the role."
            },
            "usage": "public string ExternalId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.ForcePathStyle",
            "displayName": "ForcePathStyle",
            "id": "cdktf.S3BackendProps.property.forcePathStyle",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
            },
            "usage": "public bool ForcePathStyle { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.IamEndpoint",
            "displayName": "IamEndpoint",
            "id": "cdktf.S3BackendProps.property.iamEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API.",
              "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable."
            },
            "usage": "public string IamEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.KmsKeyId",
            "displayName": "KmsKeyId",
            "id": "cdktf.S3BackendProps.property.kmsKeyId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state.",
              "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key."
            },
            "usage": "public string KmsKeyId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.MaxRetries",
            "displayName": "MaxRetries",
            "id": "cdktf.S3BackendProps.property.maxRetries",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure.",
              "remarks": "Defaults to 5."
            },
            "usage": "public double MaxRetries { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.Profile",
            "displayName": "Profile",
            "id": "cdktf.S3BackendProps.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
            },
            "usage": "public string Profile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.Region",
            "displayName": "Region",
            "id": "cdktf.S3BackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used).",
              "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables."
            },
            "usage": "public string Region { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.RoleArn",
            "displayName": "RoleArn",
            "id": "cdktf.S3BackendProps.property.roleArn",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
            },
            "usage": "public string RoleArn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.SecretKey",
            "displayName": "SecretKey",
            "id": "cdktf.S3BackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) AWS secret access key.",
              "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)"
            },
            "usage": "public string SecretKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.SessionName",
            "displayName": "SessionName",
            "id": "cdktf.S3BackendProps.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Session name to use when assuming the role."
            },
            "usage": "public string SessionName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.SharedCredentialsFile",
            "displayName": "SharedCredentialsFile",
            "id": "cdktf.S3BackendProps.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Path to the AWS shared credentials file.",
              "remarks": "Defaults to ~/.aws/credentials."
            },
            "usage": "public string SharedCredentialsFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.SkipCredentialsValidation",
            "displayName": "SkipCredentialsValidation",
            "id": "cdktf.S3BackendProps.property.skipCredentialsValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip credentials validation via the STS API."
            },
            "usage": "public bool SkipCredentialsValidation { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.SkipMetadataApiCheck",
            "displayName": "SkipMetadataApiCheck",
            "id": "cdktf.S3BackendProps.property.skipMetadataApiCheck",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip usage of EC2 Metadata API."
            },
            "usage": "public bool SkipMetadataApiCheck { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.SkipRegionValidation",
            "displayName": "SkipRegionValidation",
            "id": "cdktf.S3BackendProps.property.skipRegionValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip validation of provided region name."
            },
            "usage": "public bool SkipRegionValidation { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.SseCustomerKey",
            "displayName": "SseCustomerKey",
            "id": "cdktf.S3BackendProps.property.sseCustomerKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C).",
              "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate."
            },
            "usage": "public string SseCustomerKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.StsEndpoint",
            "displayName": "StsEndpoint",
            "id": "cdktf.S3BackendProps.property.stsEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API.",
              "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable."
            },
            "usage": "public string StsEndpoint { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.Token",
            "displayName": "Token",
            "id": "cdktf.S3BackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Multi-Factor Authentication (MFA) token.",
              "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable."
            },
            "usage": "public string Token { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.S3BackendProps.property.WorkspaceKeyPrefix",
            "displayName": "WorkspaceKeyPrefix",
            "id": "cdktf.S3BackendProps.property.workspaceKeyPrefix",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "(Optional) Prefix applied to the state path inside the bucket.",
              "remarks": "This is only relevant when using a non-default workspace. Defaults to env:"
            },
            "usage": "public string WorkspaceKeyPrefix { get; set; }"
          }
        ],
        "docs": {
          "summary": "Stores the state as a given key in a given bucket on Amazon S3.",
          "remarks": "This backend\nalso supports state locking and consistency checking via Dynamo DB, which\ncan be enabled by setting the dynamodb_table field to an existing DynamoDB\ntable name. A single DynamoDB table can be used to lock multiple remote\nstate files. Terraform generates key names that include the values of the\nbucket and key variables.\n\nWarning! It is highly recommended that you enable Bucket Versioning on the\nS3 bucket to allow for state recovery in the case of accidental deletions\nand human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/s3"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew S3BackendProps {\n    string Bucket,\n    string Key,\n    string AccessKey = null,\n    string Acl = null,\n    string AssumeRolePolicy = null,\n    string[] AssumeRolePolicyArns = null,\n    System.Collections.Generic.IDictionary<string, string> AssumeRoleTags = null,\n    string[] AssumeRoleTransitiveTagKeys = null,\n    string DynamodbEndpoint = null,\n    string DynamodbTable = null,\n    bool Encrypt = null,\n    string Endpoint = null,\n    string ExternalId = null,\n    bool ForcePathStyle = null,\n    string IamEndpoint = null,\n    string KmsKeyId = null,\n    double MaxRetries = null,\n    string Profile = null,\n    string Region = null,\n    string RoleArn = null,\n    string SecretKey = null,\n    string SessionName = null,\n    string SharedCredentialsFile = null,\n    bool SkipCredentialsValidation = null,\n    bool SkipMetadataApiCheck = null,\n    bool SkipRegionValidation = null,\n    string SseCustomerKey = null,\n    string StsEndpoint = null,\n    string Token = null,\n    string WorkspaceKeyPrefix = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection",
        "displayName": "SSHProvisionerConnection",
        "id": "cdktf.SSHProvisionerConnection",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.Host",
            "displayName": "Host",
            "id": "cdktf.SSHProvisionerConnection.property.host",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The address of the resource to connect to."
            },
            "usage": "public string Host { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.Type",
            "displayName": "Type",
            "id": "cdktf.SSHProvisionerConnection.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The connection type.",
              "remarks": "Valid values are \"ssh\" and \"winrm\".\nProvisioners typically assume that the remote system runs Microsoft Windows when using WinRM.\nBehaviors based on the SSH target_platform will force Windows-specific behavior for WinRM, unless otherwise specified."
            },
            "usage": "public string Type { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.Agent",
            "displayName": "Agent",
            "id": "cdktf.SSHProvisionerConnection.property.agent",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Set to false to disable using ssh-agent to authenticate.",
              "remarks": "On Windows the only supported SSH authentication agent is Pageant."
            },
            "usage": "public string Agent { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.AgentIdentity",
            "displayName": "AgentIdentity",
            "id": "cdktf.SSHProvisionerConnection.property.agentIdentity",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The preferred identity from the ssh agent for authentication."
            },
            "usage": "public string AgentIdentity { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.BastionCertificate",
            "displayName": "BastionCertificate",
            "id": "cdktf.SSHProvisionerConnection.property.bastionCertificate",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The contents of a signed CA Certificate.",
              "remarks": "The certificate argument must be used in conjunction with a bastion_private_key.\nThese can be loaded from a file on disk using the the file function."
            },
            "usage": "public string BastionCertificate { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.BastionHost",
            "displayName": "BastionHost",
            "id": "cdktf.SSHProvisionerConnection.property.bastionHost",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Setting this enables the bastion Host connection.",
              "remarks": "The provisioner will connect to bastion_host first, and then connect from there to host."
            },
            "usage": "public string BastionHost { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.BastionHostKey",
            "displayName": "BastionHostKey",
            "id": "cdktf.SSHProvisionerConnection.property.bastionHostKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The public key from the remote host or the signing CA, used to verify the host connection."
            },
            "usage": "public string BastionHostKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.BastionPassword",
            "displayName": "BastionPassword",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPassword",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The password to use for the bastion host."
            },
            "usage": "public string BastionPassword { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.BastionPort",
            "displayName": "BastionPort",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPort",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "The port to use connect to the bastion host."
            },
            "usage": "public double BastionPort { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.BastionPrivateKey",
            "displayName": "BastionPrivateKey",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPrivateKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The contents of an SSH key file to use for the bastion host.",
              "remarks": "These can be loaded from a file on disk using the file function."
            },
            "usage": "public string BastionPrivateKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.BastionUser",
            "displayName": "BastionUser",
            "id": "cdktf.SSHProvisionerConnection.property.bastionUser",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The user for the connection to the bastion host."
            },
            "usage": "public string BastionUser { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.Certificate",
            "displayName": "Certificate",
            "id": "cdktf.SSHProvisionerConnection.property.certificate",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The contents of a signed CA Certificate.",
              "remarks": "The certificate argument must be used in conjunction with a private_key.\nThese can be loaded from a file on disk using the the file function."
            },
            "usage": "public string Certificate { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.HostKey",
            "displayName": "HostKey",
            "id": "cdktf.SSHProvisionerConnection.property.hostKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The public key from the remote host or the signing CA, used to verify the connection."
            },
            "usage": "public string HostKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.Password",
            "displayName": "Password",
            "id": "cdktf.SSHProvisionerConnection.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The password to use for the connection."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.Port",
            "displayName": "Port",
            "id": "cdktf.SSHProvisionerConnection.property.port",
            "optional": true,
            "default": "22",
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "The port to connect to."
            },
            "usage": "public double Port { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.PrivateKey",
            "displayName": "PrivateKey",
            "id": "cdktf.SSHProvisionerConnection.property.privateKey",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The contents of an SSH key to use for the connection.",
              "remarks": "These can be loaded from a file on disk using the file function.\nThis takes preference over password if provided."
            },
            "usage": "public string PrivateKey { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.ProxyHost",
            "displayName": "ProxyHost",
            "id": "cdktf.SSHProvisionerConnection.property.proxyHost",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "Setting this enables the SSH over HTTP connection.",
              "remarks": "This host will be connected to first, and then the host or bastion_host connection will be made from there."
            },
            "usage": "public string ProxyHost { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.ProxyPort",
            "displayName": "ProxyPort",
            "id": "cdktf.SSHProvisionerConnection.property.proxyPort",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "The port to use connect to the proxy host."
            },
            "usage": "public double ProxyPort { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.ProxyScheme",
            "displayName": "ProxyScheme",
            "id": "cdktf.SSHProvisionerConnection.property.proxyScheme",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The ssh connection also supports the following fields to facilitate connections by SSH over HTTP proxy."
            },
            "usage": "public string ProxyScheme { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.ProxyUserName",
            "displayName": "ProxyUserName",
            "id": "cdktf.SSHProvisionerConnection.property.proxyUserName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The username to use connect to the private proxy host.",
              "remarks": "This argument should be specified only if authentication is required for the HTTP Proxy server."
            },
            "usage": "public string ProxyUserName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.ProxyUserPassword",
            "displayName": "ProxyUserPassword",
            "id": "cdktf.SSHProvisionerConnection.property.proxyUserPassword",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The password to use connect to the private proxy host.",
              "remarks": "This argument should be specified only if authentication is required for the HTTP Proxy server."
            },
            "usage": "public string ProxyUserPassword { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.ScriptPath",
            "displayName": "ScriptPath",
            "id": "cdktf.SSHProvisionerConnection.property.scriptPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The path used to copy scripts meant for remote execution.",
              "remarks": "Refer to {@link https://www.terraform.io/language/resources/provisioners/connection#how-provisioners-execute-remote-scripts How Provisioners Execute Remote Scripts below for more details}"
            },
            "usage": "public string ScriptPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.TargetPlatform",
            "displayName": "TargetPlatform",
            "id": "cdktf.SSHProvisionerConnection.property.targetPlatform",
            "optional": true,
            "default": "unix",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The target platform to connect to.",
              "remarks": "Valid values are \"windows\" and \"unix\".\nIf the platform is set to windows, the default script_path is c:\\windows\\temp\\terraform_%RAND%.cmd, assuming the SSH default shell is cmd.exe.\nIf the SSH default shell is PowerShell, set script_path to \"c:/windows/temp/terraform_%RAND%.ps1\""
            },
            "usage": "public string TargetPlatform { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.Timeout",
            "displayName": "Timeout",
            "id": "cdktf.SSHProvisionerConnection.property.timeout",
            "optional": true,
            "default": "5m",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The timeout to wait for the connection to become available.",
              "remarks": "Should be provided as a string (e.g., \"30s\" or \"5m\".)"
            },
            "usage": "public string Timeout { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection.property.User",
            "displayName": "User",
            "id": "cdktf.SSHProvisionerConnection.property.user",
            "optional": true,
            "default": "root",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The user to use for the connection."
            },
            "usage": "public string User { get; set; }"
          }
        ],
        "docs": {
          "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
          "remarks": "See {@link https://www.terraform.io/language/resources/provisioners/connection connection}"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew SSHProvisionerConnection {\n    string Host,\n    string Type,\n    string Agent = null,\n    string AgentIdentity = null,\n    string BastionCertificate = null,\n    string BastionHost = null,\n    string BastionHostKey = null,\n    string BastionPassword = null,\n    double BastionPort = null,\n    string BastionPrivateKey = null,\n    string BastionUser = null,\n    string Certificate = null,\n    string HostKey = null,\n    string Password = null,\n    double Port = null,\n    string PrivateKey = null,\n    string ProxyHost = null,\n    double ProxyPort = null,\n    string ProxyScheme = null,\n    string ProxyUserName = null,\n    string ProxyUserPassword = null,\n    string ScriptPath = null,\n    string TargetPlatform = null,\n    string Timeout = null,\n    string User = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.StackAnnotation",
        "displayName": "StackAnnotation",
        "id": "cdktf.StackAnnotation",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.StackAnnotation.property.ConstructPath",
            "displayName": "ConstructPath",
            "id": "cdktf.StackAnnotation.property.constructPath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ConstructPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StackAnnotation.property.Level",
            "displayName": "Level",
            "id": "cdktf.StackAnnotation.property.level",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AnnotationMetadataEntryType",
                  "displayName": "AnnotationMetadataEntryType",
                  "fqn": "HashiCorp.Cdktf.AnnotationMetadataEntryType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public AnnotationMetadataEntryType Level { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StackAnnotation.property.Message",
            "displayName": "Message",
            "id": "cdktf.StackAnnotation.property.message",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Message { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StackAnnotation.property.Stacktrace",
            "displayName": "Stacktrace",
            "id": "cdktf.StackAnnotation.property.stacktrace",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] Stacktrace { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew StackAnnotation {\n    string ConstructPath,\n    AnnotationMetadataEntryType Level,\n    string Message,\n    string[] Stacktrace = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.StackManifest",
        "displayName": "StackManifest",
        "id": "cdktf.StackManifest",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.StackManifest.property.Annotations",
            "displayName": "Annotations",
            "id": "cdktf.StackManifest.property.annotations",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackAnnotation",
                      "displayName": "StackAnnotation",
                      "fqn": "HashiCorp.Cdktf.StackAnnotation",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public StackAnnotation[] Annotations { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StackManifest.property.ConstructPath",
            "displayName": "ConstructPath",
            "id": "cdktf.StackManifest.property.constructPath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ConstructPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StackManifest.property.Dependencies",
            "displayName": "Dependencies",
            "id": "cdktf.StackManifest.property.dependencies",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] Dependencies { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StackManifest.property.Name",
            "displayName": "Name",
            "id": "cdktf.StackManifest.property.name",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Name { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StackManifest.property.SynthesizedStackPath",
            "displayName": "SynthesizedStackPath",
            "id": "cdktf.StackManifest.property.synthesizedStackPath",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string SynthesizedStackPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.StackManifest.property.WorkingDirectory",
            "displayName": "WorkingDirectory",
            "id": "cdktf.StackManifest.property.workingDirectory",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string WorkingDirectory { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew StackManifest {\n    StackAnnotation[] Annotations,\n    string ConstructPath,\n    string[] Dependencies,\n    string Name,\n    string SynthesizedStackPath,\n    string WorkingDirectory\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.SwiftBackendProps",
        "displayName": "SwiftBackendProps",
        "id": "cdktf.SwiftBackendProps",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.Container",
            "displayName": "Container",
            "id": "cdktf.SwiftBackendProps.property.container",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Container { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.ApplicationCredentialId",
            "displayName": "ApplicationCredentialId",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ApplicationCredentialId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.ApplicationCredentialName",
            "displayName": "ApplicationCredentialName",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ApplicationCredentialName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.ApplicationCredentialSecret",
            "displayName": "ApplicationCredentialSecret",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialSecret",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ApplicationCredentialSecret { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.ArchiveContainer",
            "displayName": "ArchiveContainer",
            "id": "cdktf.SwiftBackendProps.property.archiveContainer",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ArchiveContainer { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.AuthUrl",
            "displayName": "AuthUrl",
            "id": "cdktf.SwiftBackendProps.property.authUrl",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string AuthUrl { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.CacertFile",
            "displayName": "CacertFile",
            "id": "cdktf.SwiftBackendProps.property.cacertFile",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string CacertFile { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.Cert",
            "displayName": "Cert",
            "id": "cdktf.SwiftBackendProps.property.cert",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Cert { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.Cloud",
            "displayName": "Cloud",
            "id": "cdktf.SwiftBackendProps.property.cloud",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Cloud { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.DefaultDomain",
            "displayName": "DefaultDomain",
            "id": "cdktf.SwiftBackendProps.property.defaultDomain",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string DefaultDomain { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.DomainId",
            "displayName": "DomainId",
            "id": "cdktf.SwiftBackendProps.property.domainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string DomainId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.DomainName",
            "displayName": "DomainName",
            "id": "cdktf.SwiftBackendProps.property.domainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string DomainName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.ExpireAfter",
            "displayName": "ExpireAfter",
            "id": "cdktf.SwiftBackendProps.property.expireAfter",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ExpireAfter { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.Insecure",
            "displayName": "Insecure",
            "id": "cdktf.SwiftBackendProps.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Insecure { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.Key",
            "displayName": "Key",
            "id": "cdktf.SwiftBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Key { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.Password",
            "displayName": "Password",
            "id": "cdktf.SwiftBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.ProjectDomainId",
            "displayName": "ProjectDomainId",
            "id": "cdktf.SwiftBackendProps.property.projectDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ProjectDomainId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.ProjectDomainName",
            "displayName": "ProjectDomainName",
            "id": "cdktf.SwiftBackendProps.property.projectDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ProjectDomainName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.RegionName",
            "displayName": "RegionName",
            "id": "cdktf.SwiftBackendProps.property.regionName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string RegionName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.StateName",
            "displayName": "StateName",
            "id": "cdktf.SwiftBackendProps.property.stateName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string StateName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.TenantId",
            "displayName": "TenantId",
            "id": "cdktf.SwiftBackendProps.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TenantId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.TenantName",
            "displayName": "TenantName",
            "id": "cdktf.SwiftBackendProps.property.tenantName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TenantName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.Token",
            "displayName": "Token",
            "id": "cdktf.SwiftBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Token { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.UserDomainId",
            "displayName": "UserDomainId",
            "id": "cdktf.SwiftBackendProps.property.userDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UserDomainId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.UserDomainName",
            "displayName": "UserDomainName",
            "id": "cdktf.SwiftBackendProps.property.userDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UserDomainName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.UserId",
            "displayName": "UserId",
            "id": "cdktf.SwiftBackendProps.property.userId",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UserId { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.SwiftBackendProps.property.UserName",
            "displayName": "UserName",
            "id": "cdktf.SwiftBackendProps.property.userName",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UserName { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew SwiftBackendProps {\n    string Container,\n    string ApplicationCredentialId = null,\n    string ApplicationCredentialName = null,\n    string ApplicationCredentialSecret = null,\n    string ArchiveContainer = null,\n    string AuthUrl = null,\n    string CacertFile = null,\n    string Cert = null,\n    string Cloud = null,\n    string DefaultDomain = null,\n    string DomainId = null,\n    string DomainName = null,\n    string ExpireAfter = null,\n    bool Insecure = null,\n    string Key = null,\n    string Password = null,\n    string ProjectDomainId = null,\n    string ProjectDomainName = null,\n    string RegionName = null,\n    string StateName = null,\n    string TenantId = null,\n    string TenantName = null,\n    string Token = null,\n    string UserDomainId = null,\n    string UserDomainName = null,\n    string UserId = null,\n    string UserName = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformAssetConfig",
        "displayName": "TerraformAssetConfig",
        "id": "cdktf.TerraformAssetConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformAssetConfig.property.Path",
            "displayName": "Path",
            "id": "cdktf.TerraformAssetConfig.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformAssetConfig.property.AssetHash",
            "displayName": "AssetHash",
            "id": "cdktf.TerraformAssetConfig.property.assetHash",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string AssetHash { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformAssetConfig.property.Type",
            "displayName": "Type",
            "id": "cdktf.TerraformAssetConfig.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AssetType",
                  "displayName": "AssetType",
                  "fqn": "HashiCorp.Cdktf.AssetType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public AssetType Type { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformAssetConfig {\n    string Path,\n    string AssetHash = null,\n    AssetType Type = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.testingMatchers.TerraformConstructor",
        "displayName": "TerraformConstructor",
        "id": "cdktf.testingMatchers.TerraformConstructor",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.testingMatchers.TerraformConstructor.property.TfResourceType",
            "displayName": "TfResourceType",
            "id": "cdktf.testingMatchers.TerraformConstructor.property.tfResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TfResourceType { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformConstructor {\n    string TfResourceType\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformElementMetadata",
        "displayName": "TerraformElementMetadata",
        "id": "cdktf.TerraformElementMetadata",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformElementMetadata.property.Path",
            "displayName": "Path",
            "id": "cdktf.TerraformElementMetadata.property.path",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Path { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElementMetadata.property.StackTrace",
            "displayName": "StackTrace",
            "id": "cdktf.TerraformElementMetadata.property.stackTrace",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] StackTrace { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformElementMetadata.property.UniqueId",
            "displayName": "UniqueId",
            "id": "cdktf.TerraformElementMetadata.property.uniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string UniqueId { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformElementMetadata {\n    string Path,\n    string[] StackTrace,\n    string UniqueId\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions",
        "displayName": "TerraformHclModuleOptions",
        "id": "cdktf.TerraformHclModuleOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformHclModuleOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "HashiCorp.Cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformDependable[] DependsOn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformHclModuleOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions.property.Providers",
            "displayName": "Providers",
            "id": "cdktf.TerraformHclModuleOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object[] Providers { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions.property.SkipAssetCreationFromLocalModules",
            "displayName": "SkipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformHclModuleOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool SkipAssetCreationFromLocalModules { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions.property.Source",
            "displayName": "Source",
            "id": "cdktf.TerraformHclModuleOptions.property.source",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Source { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions.property.Version",
            "displayName": "Version",
            "id": "cdktf.TerraformHclModuleOptions.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Version { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModuleOptions.property.Variables",
            "displayName": "Variables",
            "id": "cdktf.TerraformHclModuleOptions.property.variables",
            "optional": true,
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "object"
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, object> Variables { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformHclModuleOptions {\n    ITerraformDependable[] DependsOn = null,\n    ITerraformIterator ForEach = null,\n    object[] Providers = null,\n    bool SkipAssetCreationFromLocalModules = null,\n    string Source,\n    string Version = null,\n    System.Collections.Generic.IDictionary<string, object> Variables = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformMetaArguments",
        "displayName": "TerraformMetaArguments",
        "id": "cdktf.TerraformMetaArguments",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformMetaArguments.property.Connection",
            "displayName": "Connection",
            "id": "cdktf.TerraformMetaArguments.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "object",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object Connection { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformMetaArguments.property.Count",
            "displayName": "Count",
            "id": "cdktf.TerraformMetaArguments.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {},
            "usage": "public double Count { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformMetaArguments.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformMetaArguments.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "HashiCorp.Cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformDependable[] DependsOn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformMetaArguments.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformMetaArguments.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformMetaArguments.property.Lifecycle",
            "displayName": "Lifecycle",
            "id": "cdktf.TerraformMetaArguments.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformResourceLifecycle Lifecycle { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformMetaArguments.property.Provider",
            "displayName": "Provider",
            "id": "cdktf.TerraformMetaArguments.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "HashiCorp.Cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProvider Provider { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformMetaArguments.property.Provisioners",
            "displayName": "Provisioners",
            "id": "cdktf.TerraformMetaArguments.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "HashiCorp.Cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "HashiCorp.Cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object[] Provisioners { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformMetaArguments {\n    object Connection = null,\n    double Count = null,\n    ITerraformDependable[] DependsOn = null,\n    ITerraformIterator ForEach = null,\n    TerraformResourceLifecycle Lifecycle = null,\n    TerraformProvider Provider = null,\n    object[] Provisioners = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformModuleOptions",
        "displayName": "TerraformModuleOptions",
        "id": "cdktf.TerraformModuleOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleOptions.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformModuleOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "HashiCorp.Cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformDependable[] DependsOn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleOptions.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformModuleOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleOptions.property.Providers",
            "displayName": "Providers",
            "id": "cdktf.TerraformModuleOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object[] Providers { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleOptions.property.SkipAssetCreationFromLocalModules",
            "displayName": "SkipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformModuleOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool SkipAssetCreationFromLocalModules { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleOptions.property.Source",
            "displayName": "Source",
            "id": "cdktf.TerraformModuleOptions.property.source",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Source { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleOptions.property.Version",
            "displayName": "Version",
            "id": "cdktf.TerraformModuleOptions.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Version { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformModuleOptions {\n    ITerraformDependable[] DependsOn = null,\n    ITerraformIterator ForEach = null,\n    object[] Providers = null,\n    bool SkipAssetCreationFromLocalModules = null,\n    string Source,\n    string Version = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformModuleProvider",
        "displayName": "TerraformModuleProvider",
        "id": "cdktf.TerraformModuleProvider",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleProvider.property.ModuleAlias",
            "displayName": "ModuleAlias",
            "id": "cdktf.TerraformModuleProvider.property.moduleAlias",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ModuleAlias { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleProvider.property.Provider",
            "displayName": "Provider",
            "id": "cdktf.TerraformModuleProvider.property.provider",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "HashiCorp.Cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProvider Provider { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformModuleProvider {\n    string ModuleAlias,\n    TerraformProvider Provider\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformModuleUserOptions",
        "displayName": "TerraformModuleUserOptions",
        "id": "cdktf.TerraformModuleUserOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleUserOptions.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformModuleUserOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "HashiCorp.Cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformDependable[] DependsOn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleUserOptions.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformModuleUserOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleUserOptions.property.Providers",
            "displayName": "Providers",
            "id": "cdktf.TerraformModuleUserOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "HashiCorp.Cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object[] Providers { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModuleUserOptions.property.SkipAssetCreationFromLocalModules",
            "displayName": "SkipAssetCreationFromLocalModules",
            "id": "cdktf.TerraformModuleUserOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool SkipAssetCreationFromLocalModules { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformModuleUserOptions {\n    ITerraformDependable[] DependsOn = null,\n    ITerraformIterator ForEach = null,\n    object[] Providers = null,\n    bool SkipAssetCreationFromLocalModules = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformOutputConfig",
        "displayName": "TerraformOutputConfig",
        "id": "cdktf.TerraformOutputConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutputConfig.property.Value",
            "displayName": "Value",
            "id": "cdktf.TerraformOutputConfig.property.value",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {},
            "usage": "public object Value { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutputConfig.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformOutputConfig.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "HashiCorp.Cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformDependable[] DependsOn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutputConfig.property.Description",
            "displayName": "Description",
            "id": "cdktf.TerraformOutputConfig.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Description { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutputConfig.property.Sensitive",
            "displayName": "Sensitive",
            "id": "cdktf.TerraformOutputConfig.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Sensitive { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformOutputConfig.property.StaticId",
            "displayName": "StaticId",
            "id": "cdktf.TerraformOutputConfig.property.staticId",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "If set to true the synthesized Terraform Output will be named after the `id` passed to the constructor instead of the default (TerraformOutput.friendlyUniqueId)."
            },
            "usage": "public bool StaticId { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformOutputConfig {\n    object Value,\n    ITerraformDependable[] DependsOn = null,\n    string Description = null,\n    bool Sensitive = null,\n    bool StaticId = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformProviderConfig",
        "displayName": "TerraformProviderConfig",
        "id": "cdktf.TerraformProviderConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformProviderConfig.property.TerraformResourceType",
            "displayName": "TerraformResourceType",
            "id": "cdktf.TerraformProviderConfig.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TerraformResourceType { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProviderConfig.property.TerraformGeneratorMetadata",
            "displayName": "TerraformGeneratorMetadata",
            "id": "cdktf.TerraformProviderConfig.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProviderGeneratorMetadata TerraformGeneratorMetadata { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProviderConfig.property.TerraformProviderSource",
            "displayName": "TerraformProviderSource",
            "id": "cdktf.TerraformProviderConfig.property.terraformProviderSource",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TerraformProviderSource { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformProviderConfig {\n    string TerraformResourceType,\n    TerraformProviderGeneratorMetadata TerraformGeneratorMetadata = null,\n    string TerraformProviderSource = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata",
        "displayName": "TerraformProviderGeneratorMetadata",
        "id": "cdktf.TerraformProviderGeneratorMetadata",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata.property.ProviderName",
            "displayName": "ProviderName",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ProviderName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata.property.ProviderVersion",
            "displayName": "ProviderVersion",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerVersion",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ProviderVersion { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata.property.ProviderVersionConstraint",
            "displayName": "ProviderVersionConstraint",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerVersionConstraint",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ProviderVersionConstraint { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformProviderGeneratorMetadata {\n    string ProviderName,\n    string ProviderVersion = null,\n    string ProviderVersionConstraint = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformResourceConfig",
        "displayName": "TerraformResourceConfig",
        "id": "cdktf.TerraformResourceConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.Connection",
            "displayName": "Connection",
            "id": "cdktf.TerraformResourceConfig.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "object",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object Connection { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.Count",
            "displayName": "Count",
            "id": "cdktf.TerraformResourceConfig.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {},
            "usage": "public double Count { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.TerraformResourceConfig.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "HashiCorp.Cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformDependable[] DependsOn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.TerraformResourceConfig.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.Lifecycle",
            "displayName": "Lifecycle",
            "id": "cdktf.TerraformResourceConfig.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformResourceLifecycle Lifecycle { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.Provider",
            "displayName": "Provider",
            "id": "cdktf.TerraformResourceConfig.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "HashiCorp.Cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProvider Provider { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.Provisioners",
            "displayName": "Provisioners",
            "id": "cdktf.TerraformResourceConfig.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "object",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "HashiCorp.Cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "HashiCorp.Cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "HashiCorp.Cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public object[] Provisioners { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.TerraformResourceType",
            "displayName": "TerraformResourceType",
            "id": "cdktf.TerraformResourceConfig.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TerraformResourceType { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceConfig.property.TerraformGeneratorMetadata",
            "displayName": "TerraformGeneratorMetadata",
            "id": "cdktf.TerraformResourceConfig.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "HashiCorp.Cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProviderGeneratorMetadata TerraformGeneratorMetadata { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformResourceConfig {\n    object Connection = null,\n    double Count = null,\n    ITerraformDependable[] DependsOn = null,\n    ITerraformIterator ForEach = null,\n    TerraformResourceLifecycle Lifecycle = null,\n    TerraformProvider Provider = null,\n    object[] Provisioners = null,\n    string TerraformResourceType,\n    TerraformProviderGeneratorMetadata TerraformGeneratorMetadata = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle",
        "displayName": "TerraformResourceLifecycle",
        "id": "cdktf.TerraformResourceLifecycle",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle.property.CreateBeforeDestroy",
            "displayName": "CreateBeforeDestroy",
            "id": "cdktf.TerraformResourceLifecycle.property.createBeforeDestroy",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool CreateBeforeDestroy { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle.property.IgnoreChanges",
            "displayName": "IgnoreChanges",
            "id": "cdktf.TerraformResourceLifecycle.property.ignoreChanges",
            "optional": true,
            "type": {
              "formattingPattern": "object",
              "types": [
                {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public object IgnoreChanges { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle.property.PreventDestroy",
            "displayName": "PreventDestroy",
            "id": "cdktf.TerraformResourceLifecycle.property.preventDestroy",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool PreventDestroy { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformResourceLifecycle {\n    bool CreateBeforeDestroy = null,\n    object IgnoreChanges = null,\n    bool PreventDestroy = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformStackMetadata",
        "displayName": "TerraformStackMetadata",
        "id": "cdktf.TerraformStackMetadata",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformStackMetadata.property.Backend",
            "displayName": "Backend",
            "id": "cdktf.TerraformStackMetadata.property.backend",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Backend { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStackMetadata.property.StackName",
            "displayName": "StackName",
            "id": "cdktf.TerraformStackMetadata.property.stackName",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string StackName { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformStackMetadata.property.Version",
            "displayName": "Version",
            "id": "cdktf.TerraformStackMetadata.property.version",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Version { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformStackMetadata {\n    string Backend,\n    string StackName,\n    string Version\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformVariableConfig",
        "displayName": "TerraformVariableConfig",
        "id": "cdktf.TerraformVariableConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariableConfig.property.Default",
            "displayName": "Default",
            "id": "cdktf.TerraformVariableConfig.property.default",
            "optional": true,
            "type": {
              "formattingPattern": "object"
            },
            "docs": {},
            "usage": "public object Default { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariableConfig.property.Description",
            "displayName": "Description",
            "id": "cdktf.TerraformVariableConfig.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Description { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariableConfig.property.Nullable",
            "displayName": "Nullable",
            "id": "cdktf.TerraformVariableConfig.property.nullable",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Nullable { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariableConfig.property.Sensitive",
            "displayName": "Sensitive",
            "id": "cdktf.TerraformVariableConfig.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool Sensitive { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariableConfig.property.Type",
            "displayName": "Type",
            "id": "cdktf.TerraformVariableConfig.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The type argument in a variable block allows you to restrict the type of value that will be accepted as the value for a variable.",
              "remarks": "If no type constraint is set then a value of any type is accepted.\n\nWhile type constraints are optional, we recommend specifying them; they serve as easy reminders for users of the module, and allow Terraform to return a helpful error message if the wrong type is used.\n\nType constraints are created from a mixture of type keywords and type constructors. The supported type keywords are:\n\n* string\n* number\n* bool\n\nThe type constructors allow you to specify complex types such as collections:\n\n* list(<TYPE>)\n* set(<TYPE>)\n* map(<TYPE>)\n* object({<ATTR NAME> = <TYPE>, ... })\n* tuple([<TYPE>, ...])\n\nThe keyword any may be used to indicate that any type is acceptable. For more information on the meaning and behavior of these different types, as well as detailed information about automatic conversion of complex types, see {@link https://www.terraform.io/docs/configuration/types.html|Type Constraints}.\n\nIf both the type and default arguments are specified, the given default value must be convertible to the specified type."
            },
            "usage": "public string Type { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariableConfig.property.Validation",
            "displayName": "Validation",
            "id": "cdktf.TerraformVariableConfig.property.validation",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformVariableValidationConfig",
                      "displayName": "TerraformVariableValidationConfig",
                      "fqn": "HashiCorp.Cdktf.TerraformVariableValidationConfig",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Specify arbitrary custom validation rules for a particular variable using a validation block nested within the corresponding variable block."
            },
            "usage": "public TerraformVariableValidationConfig[] Validation { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformVariableConfig {\n    object Default = null,\n    string Description = null,\n    bool Nullable = null,\n    bool Sensitive = null,\n    string Type = null,\n    TerraformVariableValidationConfig[] Validation = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TerraformVariableValidationConfig",
        "displayName": "TerraformVariableValidationConfig",
        "id": "cdktf.TerraformVariableValidationConfig",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariableValidationConfig.property.Condition",
            "displayName": "Condition",
            "id": "cdktf.TerraformVariableValidationConfig.property.condition",
            "type": {
              "formattingPattern": "object"
            },
            "docs": {},
            "usage": "public object Condition { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariableValidationConfig.property.ErrorMessage",
            "displayName": "ErrorMessage",
            "id": "cdktf.TerraformVariableValidationConfig.property.errorMessage",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string ErrorMessage { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TerraformVariableValidationConfig {\n    object Condition,\n    string ErrorMessage\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.TestingAppOptions",
        "displayName": "TestingAppOptions",
        "id": "cdktf.TestingAppOptions",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.TestingAppOptions.property.EnableFutureFlags",
            "displayName": "EnableFutureFlags",
            "id": "cdktf.TestingAppOptions.property.enableFutureFlags",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool EnableFutureFlags { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TestingAppOptions.property.FakeCdktfJsonPath",
            "displayName": "FakeCdktfJsonPath",
            "id": "cdktf.TestingAppOptions.property.fakeCdktfJsonPath",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool FakeCdktfJsonPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TestingAppOptions.property.Outdir",
            "displayName": "Outdir",
            "id": "cdktf.TestingAppOptions.property.outdir",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Outdir { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TestingAppOptions.property.StackTraces",
            "displayName": "StackTraces",
            "id": "cdktf.TestingAppOptions.property.stackTraces",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool StackTraces { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.TestingAppOptions.property.StubVersion",
            "displayName": "StubVersion",
            "id": "cdktf.TestingAppOptions.property.stubVersion",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool StubVersion { get; set; }"
          }
        ],
        "docs": {},
        "usage": "using HashiCorp.Cdktf;\n\nnew TestingAppOptions {\n    bool EnableFutureFlags = null,\n    bool FakeCdktfJsonPath = null,\n    string Outdir = null,\n    bool StackTraces = null,\n    bool StubVersion = null\n};"
      },
      {
        "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection",
        "displayName": "WinrmProvisionerConnection",
        "id": "cdktf.WinrmProvisionerConnection",
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.Host",
            "displayName": "Host",
            "id": "cdktf.WinrmProvisionerConnection.property.host",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The address of the resource to connect to."
            },
            "usage": "public string Host { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.Type",
            "displayName": "Type",
            "id": "cdktf.WinrmProvisionerConnection.property.type",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The connection type.",
              "remarks": "Valid values are \"ssh\" and \"winrm\".\nProvisioners typically assume that the remote system runs Microsoft Windows when using WinRM.\nBehaviors based on the SSH target_platform will force Windows-specific behavior for WinRM, unless otherwise specified."
            },
            "usage": "public string Type { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.Cacert",
            "displayName": "Cacert",
            "id": "cdktf.WinrmProvisionerConnection.property.cacert",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The CA certificate to validate against."
            },
            "usage": "public string Cacert { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.Https",
            "displayName": "Https",
            "id": "cdktf.WinrmProvisionerConnection.property.https",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Set to true to connect using HTTPS instead of HTTP."
            },
            "usage": "public bool Https { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.Insecure",
            "displayName": "Insecure",
            "id": "cdktf.WinrmProvisionerConnection.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Set to true to skip validating the HTTPS certificate chain."
            },
            "usage": "public bool Insecure { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.Password",
            "displayName": "Password",
            "id": "cdktf.WinrmProvisionerConnection.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The password to use for the connection."
            },
            "usage": "public string Password { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.Port",
            "displayName": "Port",
            "id": "cdktf.WinrmProvisionerConnection.property.port",
            "optional": true,
            "default": "22",
            "type": {
              "formattingPattern": "double"
            },
            "docs": {
              "summary": "The port to connect to."
            },
            "usage": "public double Port { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.ScriptPath",
            "displayName": "ScriptPath",
            "id": "cdktf.WinrmProvisionerConnection.property.scriptPath",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The path used to copy scripts meant for remote execution.",
              "remarks": "Refer to {@link https://www.terraform.io/language/resources/provisioners/connection#how-provisioners-execute-remote-scripts How Provisioners Execute Remote Scripts below for more details}"
            },
            "usage": "public string ScriptPath { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.Timeout",
            "displayName": "Timeout",
            "id": "cdktf.WinrmProvisionerConnection.property.timeout",
            "optional": true,
            "default": "5m",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The timeout to wait for the connection to become available.",
              "remarks": "Should be provided as a string (e.g., \"30s\" or \"5m\".)"
            },
            "usage": "public string Timeout { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.UseNtlm",
            "displayName": "UseNtlm",
            "id": "cdktf.WinrmProvisionerConnection.property.useNtlm",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Set to true to use NTLM authentication rather than default (basic authentication), removing the requirement for basic authentication to be enabled within the target guest.",
              "remarks": "Refer to Authentication for Remote Connections in the Windows App Development documentation for more details."
            },
            "usage": "public bool UseNtlm { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.WinrmProvisionerConnection.property.User",
            "displayName": "User",
            "id": "cdktf.WinrmProvisionerConnection.property.user",
            "optional": true,
            "default": "root",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The user to use for the connection."
            },
            "usage": "public string User { get; set; }"
          }
        ],
        "docs": {
          "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
          "remarks": "See {@link https://www.terraform.io/language/resources/provisioners/connection connection}"
        },
        "usage": "using HashiCorp.Cdktf;\n\nnew WinrmProvisionerConnection {\n    string Host,\n    string Type,\n    string Cacert = null,\n    bool Https = null,\n    bool Insecure = null,\n    string Password = null,\n    double Port = null,\n    string ScriptPath = null,\n    string Timeout = null,\n    bool UseNtlm = null,\n    string User = null\n};"
      }
    ],
    "interfaces": [
      {
        "fqn": "HashiCorp.Cdktf.IAnyProducer",
        "displayName": "IAnyProducer",
        "id": "cdktf.IAnyProducer",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IAnyProducer",
            "displayName": "IAnyProducer",
            "id": "cdktf.IAnyProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IAnyProducer.Produce",
            "displayName": "Produce",
            "id": "cdktf.IAnyProducer.produce",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IAnyProducer.Produce.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.IAnyProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the value."
            },
            "usage": "private object Produce(IResolveContext Context)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy untyped value producers."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IAspect",
        "displayName": "IAspect",
        "id": "cdktf.IAspect",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IAspect",
            "displayName": "IAspect",
            "id": "cdktf.IAspect",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IAspect.Visit",
            "displayName": "Visit",
            "id": "cdktf.IAspect.visit",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IAspect.Visit.parameter.Node",
                "displayName": "Node",
                "id": "cdktf.IAspect.visit.parameter.node",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "Constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "All aspects can visit an IConstruct."
            },
            "usage": "private void Visit(IConstruct Node)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Represents an Aspect."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IFragmentConcatenator",
        "displayName": "IFragmentConcatenator",
        "id": "cdktf.IFragmentConcatenator",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.StringConcat",
            "displayName": "StringConcat",
            "id": "cdktf.StringConcat",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IFragmentConcatenator",
            "displayName": "IFragmentConcatenator",
            "id": "cdktf.IFragmentConcatenator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IFragmentConcatenator.Join",
            "displayName": "Join",
            "id": "cdktf.IFragmentConcatenator.join",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IFragmentConcatenator.Join.parameter.Left",
                "displayName": "Left",
                "id": "cdktf.IFragmentConcatenator.join.parameter.left",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.IFragmentConcatenator.Join.parameter.Right",
                "displayName": "Right",
                "id": "cdktf.IFragmentConcatenator.join.parameter.right",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Join the fragment on the left and on the right."
            },
            "usage": "private object Join(object Left, object Right)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Function used to concatenate symbols in the target document language.",
          "remarks": "Interface so it could potentially be exposed over jsii."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
        "displayName": "IInterpolatingParent",
        "id": "cdktf.IInterpolatingParent",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IInterpolatingParent.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.IInterpolatingParent.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IInterpolatingParent.InterpolationForAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.IInterpolatingParent.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string TerraformAttribute)"
          }
        ],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.IListProducer",
        "displayName": "IListProducer",
        "id": "cdktf.IListProducer",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IListProducer",
            "displayName": "IListProducer",
            "id": "cdktf.IListProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IListProducer.Produce",
            "displayName": "Produce",
            "id": "cdktf.IListProducer.produce",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IListProducer.Produce.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.IListProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the list value."
            },
            "usage": "private string[] Produce(IResolveContext Context)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy list producers."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IManifest",
        "displayName": "IManifest",
        "id": "cdktf.IManifest",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.Manifest",
            "displayName": "Manifest",
            "id": "cdktf.Manifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IManifest",
            "displayName": "IManifest",
            "id": "cdktf.IManifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.IManifest.property.Stacks",
            "displayName": "Stacks",
            "id": "cdktf.IManifest.property.stacks",
            "type": {
              "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackManifest",
                      "displayName": "StackManifest",
                      "fqn": "HashiCorp.Cdktf.StackManifest",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "public System.Collections.Generic.IDictionary<string, StackManifest> Stacks { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.IManifest.property.Version",
            "displayName": "Version",
            "id": "cdktf.IManifest.property.version",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Version { get; }"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.INumberProducer",
        "displayName": "INumberProducer",
        "id": "cdktf.INumberProducer",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.INumberProducer",
            "displayName": "INumberProducer",
            "id": "cdktf.INumberProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.INumberProducer.Produce",
            "displayName": "Produce",
            "id": "cdktf.INumberProducer.produce",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.INumberProducer.Produce.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.INumberProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the number value."
            },
            "usage": "private double Produce(IResolveContext Context)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy number producers."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IPostProcessor",
        "displayName": "IPostProcessor",
        "id": "cdktf.IPostProcessor",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IPostProcessor",
            "displayName": "IPostProcessor",
            "id": "cdktf.IPostProcessor",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IPostProcessor.PostProcess",
            "displayName": "PostProcess",
            "id": "cdktf.IPostProcessor.postProcess",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IPostProcessor.PostProcess.parameter.Input",
                "displayName": "Input",
                "id": "cdktf.IPostProcessor.postProcess.parameter.input",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.IPostProcessor.PostProcess.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.IPostProcessor.postProcess.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Process the completely resolved value, after full recursion/resolution has happened."
            },
            "usage": "private object PostProcess(object Input, IResolveContext Context)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "A Token that can post-process the complete resolved value, after resolve() has recursed over it."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IRemoteWorkspace",
        "displayName": "IRemoteWorkspace",
        "id": "cdktf.IRemoteWorkspace",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.NamedRemoteWorkspace",
            "displayName": "NamedRemoteWorkspace",
            "id": "cdktf.NamedRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.PrefixedRemoteWorkspaces",
            "displayName": "PrefixedRemoteWorkspaces",
            "id": "cdktf.PrefixedRemoteWorkspaces",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.IResolvable",
        "displayName": "IResolvable",
        "id": "cdktf.IResolvable",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.AnyMap",
            "displayName": "AnyMap",
            "id": "cdktf.AnyMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMap",
            "displayName": "BooleanMap",
            "id": "cdktf.BooleanMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexList",
            "displayName": "ComplexList",
            "id": "cdktf.ComplexList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexMap",
            "displayName": "ComplexMap",
            "id": "cdktf.ComplexMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.LazyBase",
            "displayName": "LazyBase",
            "id": "cdktf.LazyBase",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMap",
            "displayName": "NumberMap",
            "id": "cdktf.NumberMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMap",
            "displayName": "StringMap",
            "id": "cdktf.StringMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IResolvable.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.IResolvable.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IResolvable.Resolve.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.IResolvable.resolve.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "private object Resolve(IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolvable.ToString",
            "displayName": "ToString",
            "id": "cdktf.IResolvable.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "private string ToString()"
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.IResolvable.property.CreationStack",
            "displayName": "CreationStack",
            "id": "cdktf.IResolvable.property.creationStack",
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "public string[] CreationStack { get; }"
          }
        ],
        "docs": {
          "summary": "Interface for values that can be resolvable later.",
          "remarks": "Tokens are special objects that participate in synthesis."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IResolveContext",
        "displayName": "IResolveContext",
        "id": "cdktf.IResolveContext",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IResolveContext",
            "displayName": "IResolveContext",
            "id": "cdktf.IResolveContext",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IResolveContext.RegisterPostProcessor",
            "displayName": "RegisterPostProcessor",
            "id": "cdktf.IResolveContext.registerPostProcessor",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IResolveContext.RegisterPostProcessor.parameter.PostProcessor",
                "displayName": "PostProcessor",
                "id": "cdktf.IResolveContext.registerPostProcessor.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "HashiCorp.Cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Use this postprocessor after the entire token structure has been resolved."
            },
            "usage": "private void RegisterPostProcessor(IPostProcessor PostProcessor)"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolveContext.Resolve",
            "displayName": "Resolve",
            "id": "cdktf.IResolveContext.resolve",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IResolveContext.Resolve.parameter.X",
                "displayName": "X",
                "id": "cdktf.IResolveContext.resolve.parameter.x",
                "type": {
                  "formattingPattern": "object"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve an inner object."
            },
            "usage": "private object Resolve(object X)"
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.IResolveContext.property.Preparing",
            "displayName": "Preparing",
            "id": "cdktf.IResolveContext.property.preparing",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "True when we are still preparing, false if we're rendering the final output."
            },
            "usage": "public bool Preparing { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolveContext.property.Scope",
            "displayName": "Scope",
            "id": "cdktf.IResolveContext.property.scope",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.IConstruct",
                  "displayName": "IConstruct",
                  "fqn": "Constructs.IConstruct",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The scope from which resolution has been initiated."
            },
            "usage": "public IConstruct Scope { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolveContext.property.IteratorContext",
            "displayName": "IteratorContext",
            "id": "cdktf.IResolveContext.property.iteratorContext",
            "optional": true,
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "TerraformIterators can be passed for block attributes and normal list attributes both require different handling when the iterable variable is accessed e.g. a dynamic block needs each.key while a for expression just needs key."
            },
            "usage": "public string IteratorContext { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResolveContext.property.SuppressBraces",
            "displayName": "SuppressBraces",
            "id": "cdktf.IResolveContext.property.suppressBraces",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "True when ${} should be ommitted (because already inside them), false otherwise."
            },
            "usage": "public bool SuppressBraces { get; set; }"
          }
        ],
        "docs": {
          "summary": "Current resolution context for tokens."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IResource",
        "displayName": "IResource",
        "id": "cdktf.IResource",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.Resource",
            "displayName": "Resource",
            "id": "cdktf.Resource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResource",
            "displayName": "IResource",
            "id": "cdktf.IResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [
          {
            "fqn": "Constructs.IConstruct",
            "displayName": "IConstruct",
            "id": "constructs.IConstruct",
            "packageName": "constructs",
            "packageVersion": "10.1.45"
          }
        ],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.IResource.property.Node",
            "displayName": "Node",
            "id": "cdktf.IResource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "Constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "public Node Node { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.IResource.property.Stack",
            "displayName": "Stack",
            "id": "cdktf.IResource.property.stack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "HashiCorp.Cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The stack in which this resource is defined."
            },
            "usage": "public TerraformStack Stack { get; }"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.IResourceConstructor",
        "displayName": "IResourceConstructor",
        "id": "cdktf.IResourceConstructor",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IResourceConstructor",
            "displayName": "IResourceConstructor",
            "id": "cdktf.IResourceConstructor",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.IScopeCallback",
        "displayName": "IScopeCallback",
        "id": "cdktf.IScopeCallback",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IScopeCallback",
            "displayName": "IScopeCallback",
            "id": "cdktf.IScopeCallback",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.IStackSynthesizer",
        "displayName": "IStackSynthesizer",
        "id": "cdktf.IStackSynthesizer",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IStackSynthesizer",
            "displayName": "IStackSynthesizer",
            "id": "cdktf.IStackSynthesizer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IStackSynthesizer.Synthesize",
            "displayName": "Synthesize",
            "id": "cdktf.IStackSynthesizer.synthesize",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IStackSynthesizer.Synthesize.parameter.Session",
                "displayName": "Session",
                "id": "cdktf.IStackSynthesizer.synthesize.parameter.session",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ISynthesisSession",
                      "displayName": "ISynthesisSession",
                      "fqn": "HashiCorp.Cdktf.ISynthesisSession",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Synthesize the associated stack to the session."
            },
            "usage": "private void Synthesize(ISynthesisSession Session)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Encodes information how a certain Stack should be deployed inspired by AWS CDK v2 implementation (synth functionality was removed in constructs v10)."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.IStringProducer",
        "displayName": "IStringProducer",
        "id": "cdktf.IStringProducer",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.IStringProducer",
            "displayName": "IStringProducer",
            "id": "cdktf.IStringProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.IStringProducer.Produce",
            "displayName": "Produce",
            "id": "cdktf.IStringProducer.produce",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.IStringProducer.Produce.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.IStringProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the string value."
            },
            "usage": "private string Produce(IResolveContext Context)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy string producers."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.ISynthesisSession",
        "displayName": "ISynthesisSession",
        "id": "cdktf.ISynthesisSession",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.ISynthesisSession",
            "displayName": "ISynthesisSession",
            "id": "cdktf.ISynthesisSession",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ISynthesisSession.property.Manifest",
            "displayName": "Manifest",
            "id": "cdktf.ISynthesisSession.property.manifest",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.Manifest",
                  "displayName": "Manifest",
                  "fqn": "HashiCorp.Cdktf.Manifest",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public Manifest Manifest { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ISynthesisSession.property.Outdir",
            "displayName": "Outdir",
            "id": "cdktf.ISynthesisSession.property.outdir",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {
              "summary": "The output directory for this synthesis session."
            },
            "usage": "public string Outdir { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ISynthesisSession.property.SkipValidation",
            "displayName": "SkipValidation",
            "id": "cdktf.ISynthesisSession.property.skipValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "public bool SkipValidation { get; }"
          }
        ],
        "docs": {
          "summary": "Represents a single session of synthesis.",
          "remarks": "Passed into `TerraformStack.onSynthesize()` methods.\noriginally from aws/constructs lib v3.3.126 (synth functionality was removed in constructs v10)"
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
        "displayName": "ITerraformAddressable",
        "id": "cdktf.ITerraformAddressable",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.AnyMap",
            "displayName": "AnyMap",
            "id": "cdktf.AnyMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMap",
            "displayName": "BooleanMap",
            "id": "cdktf.BooleanMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexList",
            "displayName": "ComplexList",
            "id": "cdktf.ComplexList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexMap",
            "displayName": "ComplexMap",
            "id": "cdktf.ComplexMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteState",
            "displayName": "DataTerraformRemoteState",
            "id": "cdktf.DataTerraformRemoteState",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateArtifactory",
            "displayName": "DataTerraformRemoteStateArtifactory",
            "id": "cdktf.DataTerraformRemoteStateArtifactory",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateAzurerm",
            "displayName": "DataTerraformRemoteStateAzurerm",
            "id": "cdktf.DataTerraformRemoteStateAzurerm",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateConsul",
            "displayName": "DataTerraformRemoteStateConsul",
            "id": "cdktf.DataTerraformRemoteStateConsul",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateCos",
            "displayName": "DataTerraformRemoteStateCos",
            "id": "cdktf.DataTerraformRemoteStateCos",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcd",
            "displayName": "DataTerraformRemoteStateEtcd",
            "id": "cdktf.DataTerraformRemoteStateEtcd",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateEtcdV3",
            "displayName": "DataTerraformRemoteStateEtcdV3",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateGcs",
            "displayName": "DataTerraformRemoteStateGcs",
            "id": "cdktf.DataTerraformRemoteStateGcs",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateHttp",
            "displayName": "DataTerraformRemoteStateHttp",
            "id": "cdktf.DataTerraformRemoteStateHttp",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateLocal",
            "displayName": "DataTerraformRemoteStateLocal",
            "id": "cdktf.DataTerraformRemoteStateLocal",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateManta",
            "displayName": "DataTerraformRemoteStateManta",
            "id": "cdktf.DataTerraformRemoteStateManta",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateOss",
            "displayName": "DataTerraformRemoteStateOss",
            "id": "cdktf.DataTerraformRemoteStateOss",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStatePg",
            "displayName": "DataTerraformRemoteStatePg",
            "id": "cdktf.DataTerraformRemoteStatePg",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateS3",
            "displayName": "DataTerraformRemoteStateS3",
            "id": "cdktf.DataTerraformRemoteStateS3",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.DataTerraformRemoteStateSwift",
            "displayName": "DataTerraformRemoteStateSwift",
            "id": "cdktf.DataTerraformRemoteStateSwift",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMap",
            "displayName": "NumberMap",
            "id": "cdktf.NumberMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMap",
            "displayName": "StringMap",
            "id": "cdktf.StringMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule",
            "displayName": "TerraformHclModule",
            "id": "cdktf.TerraformHclModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformLocal",
            "displayName": "TerraformLocal",
            "id": "cdktf.TerraformLocal",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule",
            "displayName": "TerraformModule",
            "id": "cdktf.TerraformModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformRemoteState",
            "displayName": "TerraformRemoteState",
            "id": "cdktf.TerraformRemoteState",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformVariable",
            "displayName": "TerraformVariable",
            "id": "cdktf.TerraformVariable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ITerraformAddressable.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.ITerraformDependable",
        "displayName": "ITerraformDependable",
        "id": "cdktf.ITerraformDependable",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformHclModule",
            "displayName": "TerraformHclModule",
            "id": "cdktf.TerraformHclModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformModule",
            "displayName": "TerraformModule",
            "id": "cdktf.TerraformModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformDependable.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ITerraformDependable.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.ITerraformIterator",
        "displayName": "ITerraformIterator",
        "id": "cdktf.ITerraformIterator",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.ListTerraformIterator",
            "displayName": "ListTerraformIterator",
            "id": "cdktf.ListTerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.MapTerraformIterator",
            "displayName": "MapTerraformIterator",
            "id": "cdktf.MapTerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformIterator",
            "displayName": "TerraformIterator",
            "id": "cdktf.TerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformIterator",
            "displayName": "ITerraformIterator",
            "id": "cdktf.ITerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.ITerraformResource",
        "displayName": "ITerraformResource",
        "id": "cdktf.ITerraformResource",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.InterpolationForAttribute",
            "displayName": "InterpolationForAttribute",
            "id": "cdktf.ITerraformResource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ITerraformResource.InterpolationForAttribute.parameter.TerraformAttribute",
                "displayName": "TerraformAttribute",
                "id": "cdktf.ITerraformResource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "string"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "private IResolvable InterpolationForAttribute(string TerraformAttribute)"
          }
        ],
        "properties": [
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.property.Fqn",
            "displayName": "Fqn",
            "id": "cdktf.ITerraformResource.property.fqn",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string Fqn { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.property.FriendlyUniqueId",
            "displayName": "FriendlyUniqueId",
            "id": "cdktf.ITerraformResource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string FriendlyUniqueId { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.property.TerraformResourceType",
            "displayName": "TerraformResourceType",
            "id": "cdktf.ITerraformResource.property.terraformResourceType",
            "type": {
              "formattingPattern": "string"
            },
            "docs": {},
            "usage": "public string TerraformResourceType { get; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.property.Count",
            "displayName": "Count",
            "id": "cdktf.ITerraformResource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "double"
            },
            "docs": {},
            "usage": "public double Count { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.property.DependsOn",
            "displayName": "DependsOn",
            "id": "cdktf.ITerraformResource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "%[]",
              "types": [
                {
                  "formattingPattern": "string"
                }
              ]
            },
            "docs": {},
            "usage": "public string[] DependsOn { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.property.ForEach",
            "displayName": "ForEach",
            "id": "cdktf.ITerraformResource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "HashiCorp.Cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public ITerraformIterator ForEach { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.property.Lifecycle",
            "displayName": "Lifecycle",
            "id": "cdktf.ITerraformResource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "HashiCorp.Cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformResourceLifecycle Lifecycle { get; set; }"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITerraformResource.property.Provider",
            "displayName": "Provider",
            "id": "cdktf.ITerraformResource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "HashiCorp.Cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "public TerraformProvider Provider { get; set; }"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.ITokenMapper",
        "displayName": "ITokenMapper",
        "id": "cdktf.ITokenMapper",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.ITokenMapper",
            "displayName": "ITokenMapper",
            "id": "cdktf.ITokenMapper",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ITokenMapper.MapToken",
            "displayName": "MapToken",
            "id": "cdktf.ITokenMapper.mapToken",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ITokenMapper.MapToken.parameter.T",
                "displayName": "T",
                "id": "cdktf.ITokenMapper.mapToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "HashiCorp.Cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Replace a single token."
            },
            "usage": "private object MapToken(IResolvable T)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface to apply operation to tokens in a string.",
          "remarks": "Interface so it can be exported via jsii."
        }
      },
      {
        "fqn": "HashiCorp.Cdktf.ITokenResolver",
        "displayName": "ITokenResolver",
        "id": "cdktf.ITokenResolver",
        "implementations": [
          {
            "fqn": "HashiCorp.Cdktf.DefaultTokenResolver",
            "displayName": "DefaultTokenResolver",
            "id": "cdktf.DefaultTokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITokenResolver",
            "displayName": "ITokenResolver",
            "id": "cdktf.ITokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveList",
            "displayName": "ResolveList",
            "id": "cdktf.ITokenResolver.resolveList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveList.parameter.L",
                "displayName": "L",
                "id": "cdktf.ITokenResolver.resolveList.parameter.l",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "string"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveList.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ITokenResolver.resolveList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized list."
            },
            "usage": "private object ResolveList(string[] L, IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveMap",
            "displayName": "ResolveMap",
            "id": "cdktf.ITokenResolver.resolveMap",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveMap.parameter.M",
                "displayName": "M",
                "id": "cdktf.ITokenResolver.resolveMap.parameter.m",
                "type": {
                  "formattingPattern": "System.Collections.Generic.IDictionary<string, %>",
                  "types": [
                    {
                      "formattingPattern": "object"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveMap.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ITokenResolver.resolveMap.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized map."
            },
            "usage": "private object ResolveMap(System.Collections.Generic.IDictionary<string, object> M, IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveNumberList",
            "displayName": "ResolveNumberList",
            "id": "cdktf.ITokenResolver.resolveNumberList",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveNumberList.parameter.L",
                "displayName": "L",
                "id": "cdktf.ITokenResolver.resolveNumberList.parameter.l",
                "type": {
                  "formattingPattern": "%[]",
                  "types": [
                    {
                      "formattingPattern": "double"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveNumberList.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ITokenResolver.resolveNumberList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized number list."
            },
            "usage": "private object ResolveNumberList(double[] L, IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveString",
            "displayName": "ResolveString",
            "id": "cdktf.ITokenResolver.resolveString",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveString.parameter.S",
                "displayName": "S",
                "id": "cdktf.ITokenResolver.resolveString.parameter.s",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TokenizedStringFragments",
                      "displayName": "TokenizedStringFragments",
                      "fqn": "HashiCorp.Cdktf.TokenizedStringFragments",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveString.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ITokenResolver.resolveString.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a string with at least one stringified token in it.",
              "remarks": "(May use concatenation)"
            },
            "usage": "private object ResolveString(TokenizedStringFragments S, IResolveContext Context)"
          },
          {
            "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveToken",
            "displayName": "ResolveToken",
            "id": "cdktf.ITokenResolver.resolveToken",
            "parameters": [
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveToken.parameter.T",
                "displayName": "T",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "HashiCorp.Cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveToken.parameter.Context",
                "displayName": "Context",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "HashiCorp.Cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "HashiCorp.Cdktf.ITokenResolver.ResolveToken.parameter.PostProcessor",
                "displayName": "PostProcessor",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "HashiCorp.Cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a single token."
            },
            "usage": "private object ResolveToken(IResolvable T, IResolveContext Context, IPostProcessor PostProcessor)"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "How to resolve tokens."
        }
      }
    ],
    "enums": [
      {
        "fqn": "HashiCorp.Cdktf.AnnotationMetadataEntryType",
        "displayName": "AnnotationMetadataEntryType",
        "id": "cdktf.AnnotationMetadataEntryType",
        "members": [
          {
            "id": "cdktf.AnnotationMetadataEntryType.INFO",
            "displayName": "INFO",
            "fqn": "HashiCorp.Cdktf.AnnotationMetadataEntryType.INFO",
            "docs": {}
          },
          {
            "id": "cdktf.AnnotationMetadataEntryType.WARN",
            "displayName": "WARN",
            "fqn": "HashiCorp.Cdktf.AnnotationMetadataEntryType.WARN",
            "docs": {}
          },
          {
            "id": "cdktf.AnnotationMetadataEntryType.ERROR",
            "displayName": "ERROR",
            "fqn": "HashiCorp.Cdktf.AnnotationMetadataEntryType.ERROR",
            "docs": {}
          }
        ],
        "docs": {}
      },
      {
        "fqn": "HashiCorp.Cdktf.AssetType",
        "displayName": "AssetType",
        "id": "cdktf.AssetType",
        "members": [
          {
            "id": "cdktf.AssetType.FILE",
            "displayName": "FILE",
            "fqn": "HashiCorp.Cdktf.AssetType.FILE",
            "docs": {}
          },
          {
            "id": "cdktf.AssetType.DIRECTORY",
            "displayName": "DIRECTORY",
            "fqn": "HashiCorp.Cdktf.AssetType.DIRECTORY",
            "docs": {}
          },
          {
            "id": "cdktf.AssetType.ARCHIVE",
            "displayName": "ARCHIVE",
            "fqn": "HashiCorp.Cdktf.AssetType.ARCHIVE",
            "docs": {}
          }
        ],
        "docs": {}
      }
    ]
  }
}