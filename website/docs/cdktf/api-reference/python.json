{
  "version": "0.1",
  "language": "python",
  "metadata": {
    "packageName": "cdktf",
    "packageVersion": "0.0.0"
  },
  "apiReference": {
    "constructs": [
      {
        "initializer": {
          "fqn": "cdktf.App.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.App.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.App.Initializer.parameter.context",
              "displayName": "context",
              "id": "cdktf.App.Initializer.parameter.context",
              "optional": true,
              "default": "- no additional context",
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {
                "summary": "Additional context values for the application.",
                "remarks": "Context set by the CLI or the `context` key in `cdktf.json` has precedence.\n\nContext can be read from any construct using `node.getContext(key)`."
              }
            },
            {
              "fqn": "cdktf.App.Initializer.parameter.outdir",
              "displayName": "outdir",
              "id": "cdktf.App.Initializer.parameter.outdir",
              "optional": true,
              "default": "- CDKTF_OUTDIR if defined, otherwise \"cdktf.out\"",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "The directory to output Terraform resources."
              }
            },
            {
              "fqn": "cdktf.App.Initializer.parameter.skip_validation",
              "displayName": "skip_validation",
              "id": "cdktf.App.Initializer.parameter.skipValidation",
              "optional": true,
              "default": "- false",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "Whether to skip the validation during synthesis of the app."
              }
            },
            {
              "fqn": "cdktf.App.Initializer.parameter.stack_traces",
              "displayName": "stack_traces",
              "id": "cdktf.App.Initializer.parameter.stackTraces",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.App(\n  context: typing.Mapping[typing.Any] = None,\n  outdir: str = None,\n  skip_validation: bool = None,\n  stack_traces: bool = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.App.to_string",
            "displayName": "to_string",
            "id": "cdktf.App.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.App.cross_stack_reference",
            "displayName": "cross_stack_reference",
            "id": "cdktf.App.crossStackReference",
            "parameters": [
              {
                "fqn": "cdktf.App.cross_stack_reference.parameter.from_stack",
                "displayName": "from_stack",
                "id": "cdktf.App.crossStackReference.parameter.fromStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.App.cross_stack_reference.parameter.to_stack",
                "displayName": "to_stack",
                "id": "cdktf.App.crossStackReference.parameter.toStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.App.cross_stack_reference.parameter.identifier",
                "displayName": "identifier",
                "id": "cdktf.App.crossStackReference.parameter.identifier",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a reference from one stack to another, invoked on prepareStack since it creates extra resources."
            },
            "usage": "def cross_stack_reference(\n  from_stack: TerraformStack,\n  to_stack: TerraformStack,\n  identifier: str\n) -> str"
          },
          {
            "fqn": "cdktf.App.synth",
            "displayName": "synth",
            "id": "cdktf.App.synth",
            "parameters": [],
            "docs": {
              "summary": "Synthesizes all resources to the output directory."
            },
            "usage": "def synth() -> None"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.App.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.App.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.App.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.App.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.App.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.App.is_app",
            "displayName": "is_app",
            "id": "cdktf.App.isApp",
            "parameters": [
              {
                "fqn": "cdktf.App.is_app.parameter.x",
                "displayName": "x",
                "id": "cdktf.App.isApp.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.App.is_app(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.App.of",
            "displayName": "of",
            "id": "cdktf.App.of",
            "parameters": [
              {
                "fqn": "cdktf.App.of.parameter.construct",
                "displayName": "construct",
                "id": "cdktf.App.of.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.App.of(\n  construct: IConstruct\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.App.property.node",
            "displayName": "node",
            "id": "cdktf.App.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.App.property.manifest",
            "displayName": "manifest",
            "id": "cdktf.App.property.manifest",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.Manifest",
                  "displayName": "Manifest",
                  "fqn": "cdktf.Manifest",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "manifest: Manifest"
          },
          {
            "fqn": "cdktf.App.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.App.property.outdir",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The output directory into which resources will be synthesized."
            },
            "usage": "outdir: str"
          },
          {
            "fqn": "cdktf.App.property.skip_validation",
            "displayName": "skip_validation",
            "id": "cdktf.App.property.skipValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Whether to skip the validation during synthesis of the app."
            },
            "usage": "skip_validation: bool"
          },
          {
            "fqn": "cdktf.App.property.target_stack_id",
            "displayName": "target_stack_id",
            "id": "cdktf.App.property.targetStackId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The stack which will be synthesized.",
              "remarks": "If not set, all stacks will be synthesized."
            },
            "usage": "target_stack_id: str"
          }
        ],
        "fqn": "cdktf.App",
        "displayName": "App",
        "id": "cdktf.App",
        "docs": {
          "summary": "Represents a cdktf application."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.ArtifactoryBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ArtifactoryBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ArtifactoryBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ArtifactoryBackend.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.password",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - The password."
              }
            },
            {
              "fqn": "cdktf.ArtifactoryBackend.Initializer.parameter.repo",
              "displayName": "repo",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.repo",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - The repository name."
              }
            },
            {
              "fqn": "cdktf.ArtifactoryBackend.Initializer.parameter.subpath",
              "displayName": "subpath",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.subpath",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - Path within the repository."
              }
            },
            {
              "fqn": "cdktf.ArtifactoryBackend.Initializer.parameter.url",
              "displayName": "url",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.url",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - The URL.",
                "remarks": "Note that this is the base url to artifactory not the full repo and subpath."
              }
            },
            {
              "fqn": "cdktf.ArtifactoryBackend.Initializer.parameter.username",
              "displayName": "username",
              "id": "cdktf.ArtifactoryBackend.Initializer.parameter.username",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - The username."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.ArtifactoryBackend(\n  scope: Construct,\n  password: str,\n  repo: str,\n  subpath: str,\n  url: str,\n  username: str\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ArtifactoryBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.ArtifactoryBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.ArtifactoryBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.ArtifactoryBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ArtifactoryBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.ArtifactoryBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.ArtifactoryBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.ArtifactoryBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.ArtifactoryBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.ArtifactoryBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.ArtifactoryBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ArtifactoryBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ArtifactoryBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.ArtifactoryBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.ArtifactoryBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.ArtifactoryBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.ArtifactoryBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.ArtifactoryBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.ArtifactoryBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.ArtifactoryBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.ArtifactoryBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.ArtifactoryBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ArtifactoryBackend.property.node",
            "displayName": "node",
            "id": "cdktf.ArtifactoryBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.ArtifactoryBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ArtifactoryBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.ArtifactoryBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.ArtifactoryBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.ArtifactoryBackend",
        "displayName": "ArtifactoryBackend",
        "id": "cdktf.ArtifactoryBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.AzurermBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AzurermBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.AzurermBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.container_name",
              "displayName": "container_name",
              "id": "cdktf.AzurermBackend.Initializer.parameter.containerName",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The Name of the Storage Container within the Storage Account."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.AzurermBackend.Initializer.parameter.key",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.storage_account_name",
              "displayName": "storage_account_name",
              "id": "cdktf.AzurermBackend.Initializer.parameter.storageAccountName",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The Name of the Storage Account."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.access_key",
              "displayName": "access_key",
              "id": "cdktf.AzurermBackend.Initializer.parameter.accessKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account.",
                "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.client_certificate_password",
              "displayName": "client_certificate_password",
              "id": "cdktf.AzurermBackend.Initializer.parameter.clientCertificatePassword",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path.",
                "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.client_certificate_path",
              "displayName": "client_certificate_path",
              "id": "cdktf.AzurermBackend.Initializer.parameter.clientCertificatePath",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal.",
                "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.client_id",
              "displayName": "client_id",
              "id": "cdktf.AzurermBackend.Initializer.parameter.clientId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Client ID of the Service Principal.",
                "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.client_secret",
              "displayName": "client_secret",
              "id": "cdktf.AzurermBackend.Initializer.parameter.clientSecret",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Client Secret of the Service Principal.",
                "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.endpoint",
              "displayName": "endpoint",
              "id": "cdktf.AzurermBackend.Initializer.parameter.endpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable.",
                "remarks": "NOTE: An endpoint should only be configured when using Azure Stack."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.environment",
              "displayName": "environment",
              "id": "cdktf.AzurermBackend.Initializer.parameter.environment",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Azure Environment which should be used.",
                "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\nPossible values are public, china, german, stack and usgovernment. Defaults to public."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.msi_endpoint",
              "displayName": "msi_endpoint",
              "id": "cdktf.AzurermBackend.Initializer.parameter.msiEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified.",
                "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.oidc_request_token",
              "displayName": "oidc_request_token",
              "id": "cdktf.AzurermBackend.Initializer.parameter.oidcRequestToken",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The bearer token for the request to the OIDC provider.",
                "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.oidc_request_url",
              "displayName": "oidc_request_url",
              "id": "cdktf.AzurermBackend.Initializer.parameter.oidcRequestUrl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The URL for the OIDC provider from which to request an ID token.",
                "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.resource_group_name",
              "displayName": "resource_group_name",
              "id": "cdktf.AzurermBackend.Initializer.parameter.resourceGroupName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.sas_token",
              "displayName": "sas_token",
              "id": "cdktf.AzurermBackend.Initializer.parameter.sasToken",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The SAS Token used to access the Blob Storage Account.",
                "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.snapshot",
              "displayName": "snapshot",
              "id": "cdktf.AzurermBackend.Initializer.parameter.snapshot",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?",
                "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.subscription_id",
              "displayName": "subscription_id",
              "id": "cdktf.AzurermBackend.Initializer.parameter.subscriptionId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Subscription ID in which the Storage Account exists.",
                "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.tenant_id",
              "displayName": "tenant_id",
              "id": "cdktf.AzurermBackend.Initializer.parameter.tenantId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Tenant ID in which the Subscription exists.",
                "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.use_azuread_auth",
              "displayName": "use_azuread_auth",
              "id": "cdktf.AzurermBackend.Initializer.parameter.useAzureadAuth",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account.",
                "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.use_microsoft_graph",
              "displayName": "use_microsoft_graph",
              "id": "cdktf.AzurermBackend.Initializer.parameter.useMicrosoftGraph",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?",
                "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.use_msi",
              "displayName": "use_msi",
              "id": "cdktf.AzurermBackend.Initializer.parameter.useMsi",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should Managed Service Identity authentication be used?",
                "remarks": "This can also be sourced from the ARM_USE_MSI environment variable."
              }
            },
            {
              "fqn": "cdktf.AzurermBackend.Initializer.parameter.use_oidc",
              "displayName": "use_oidc",
              "id": "cdktf.AzurermBackend.Initializer.parameter.useOidc",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable.",
                "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default)."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.AzurermBackend(\n  scope: Construct,\n  container_name: str,\n  key: str,\n  storage_account_name: str,\n  access_key: str = None,\n  client_certificate_password: str = None,\n  client_certificate_path: str = None,\n  client_id: str = None,\n  client_secret: str = None,\n  endpoint: str = None,\n  environment: str = None,\n  msi_endpoint: str = None,\n  oidc_request_token: str = None,\n  oidc_request_url: str = None,\n  resource_group_name: str = None,\n  sas_token: str = None,\n  snapshot: bool = None,\n  subscription_id: str = None,\n  tenant_id: str = None,\n  use_azuread_auth: bool = None,\n  use_microsoft_graph: bool = None,\n  use_msi: bool = None,\n  use_oidc: bool = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.AzurermBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.AzurermBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.AzurermBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.AzurermBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.AzurermBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.AzurermBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.AzurermBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.AzurermBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.AzurermBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.AzurermBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.AzurermBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.AzurermBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.AzurermBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.AzurermBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.AzurermBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.AzurermBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.AzurermBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.AzurermBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.AzurermBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.AzurermBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.AzurermBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.AzurermBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.AzurermBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.AzurermBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.AzurermBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.AzurermBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.AzurermBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.AzurermBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.AzurermBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.AzurermBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.AzurermBackend.property.node",
            "displayName": "node",
            "id": "cdktf.AzurermBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.AzurermBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.AzurermBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.AzurermBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.AzurermBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.AzurermBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.AzurermBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.AzurermBackend",
        "displayName": "AzurermBackend",
        "id": "cdktf.AzurermBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.CloudBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CloudBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.CloudBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.CloudBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.CloudBackend.Initializer.parameter.organization",
              "displayName": "organization",
              "id": "cdktf.CloudBackend.Initializer.parameter.organization",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "The name of the organization containing the workspace(s) the current configuration should use."
              }
            },
            {
              "fqn": "cdktf.CloudBackend.Initializer.parameter.workspaces",
              "displayName": "workspaces",
              "id": "cdktf.CloudBackend.Initializer.parameter.workspaces",
              "type": {
                "formattingPattern": "typing.Union[%, %]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.NamedCloudWorkspace",
                        "displayName": "NamedCloudWorkspace",
                        "fqn": "cdktf.NamedCloudWorkspace",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.TaggedCloudWorkspaces",
                        "displayName": "TaggedCloudWorkspaces",
                        "fqn": "cdktf.TaggedCloudWorkspaces",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {
                "summary": "A nested block that specifies which remote Terraform Cloud workspaces to use for the current configuration.",
                "remarks": "The workspaces block must contain exactly one of the following arguments, each denoting a strategy for how workspaces should be mapped:"
              }
            },
            {
              "fqn": "cdktf.CloudBackend.Initializer.parameter.hostname",
              "displayName": "hostname",
              "id": "cdktf.CloudBackend.Initializer.parameter.hostname",
              "optional": true,
              "default": "app.terraform.io",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "The hostname of a Terraform Enterprise installation, if using Terraform Enterprise."
              }
            },
            {
              "fqn": "cdktf.CloudBackend.Initializer.parameter.token",
              "displayName": "token",
              "id": "cdktf.CloudBackend.Initializer.parameter.token",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "The token used to authenticate with Terraform Cloud.",
                "remarks": "We recommend omitting the token from the configuration, and instead using terraform login or manually configuring credentials in the CLI config file."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.CloudBackend(\n  scope: Construct,\n  organization: str,\n  workspaces: typing.Union[NamedCloudWorkspace, TaggedCloudWorkspaces],\n  hostname: str = None,\n  token: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.CloudBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.CloudBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.CloudBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.CloudBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.CloudBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CloudBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.CloudBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.CloudBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.CloudBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.CloudBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.CloudBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.CloudBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.CloudBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.CloudBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.CloudBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.CloudBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.CloudBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.CloudBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CloudBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CloudBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.CloudBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.CloudBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.CloudBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.CloudBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.CloudBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.CloudBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.CloudBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.CloudBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.CloudBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.CloudBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.CloudBackend.property.node",
            "displayName": "node",
            "id": "cdktf.CloudBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.CloudBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.CloudBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.CloudBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.CloudBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.CloudBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.CloudBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.CloudBackend",
        "displayName": "CloudBackend",
        "id": "cdktf.CloudBackend",
        "docs": {
          "summary": "The Cloud Backend synthesizes a {@link https://www.terraform.io/cli/cloud/settings#the-cloud-block cloud block}. The cloud block is a nested block within the top-level terraform settings block. It specifies which Terraform Cloud workspaces to use for the current working directory. The cloud block only affects Terraform CLI's behavior. When Terraform Cloud uses a configuration that contains a cloud block - for example, when a workspace is configured to use a VCS provider directly - it ignores the block and behaves according to its own workspace settings."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.ConsulBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ConsulBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.ConsulBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.access_token",
              "displayName": "access_token",
              "id": "cdktf.ConsulBackend.Initializer.parameter.accessToken",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) Access token."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.ConsulBackend.Initializer.parameter.path",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) Path in the Consul KV store."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.address",
              "displayName": "address",
              "id": "cdktf.ConsulBackend.Initializer.parameter.address",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port.",
                "remarks": "Defaults to the local agent HTTP listener."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.ca_file",
              "displayName": "ca_file",
              "id": "cdktf.ConsulBackend.Initializer.parameter.caFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.cert_file",
              "displayName": "cert_file",
              "id": "cdktf.ConsulBackend.Initializer.parameter.certFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;",
                "remarks": "requires use of key_file."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.datacenter",
              "displayName": "datacenter",
              "id": "cdktf.ConsulBackend.Initializer.parameter.datacenter",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The datacenter to use.",
                "remarks": "Defaults to that of the agent."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.gzip",
              "displayName": "gzip",
              "id": "cdktf.ConsulBackend.Initializer.parameter.gzip",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.http_auth",
              "displayName": "http_auth",
              "id": "cdktf.ConsulBackend.Initializer.parameter.httpAuth",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.key_file",
              "displayName": "key_file",
              "id": "cdktf.ConsulBackend.Initializer.parameter.keyFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.lock",
              "displayName": "lock",
              "id": "cdktf.ConsulBackend.Initializer.parameter.lock",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) false to disable locking.",
                "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking."
              }
            },
            {
              "fqn": "cdktf.ConsulBackend.Initializer.parameter.scheme",
              "displayName": "scheme",
              "id": "cdktf.ConsulBackend.Initializer.parameter.scheme",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https.",
                "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.ConsulBackend(\n  scope: Construct,\n  access_token: str,\n  path: str,\n  address: str = None,\n  ca_file: str = None,\n  cert_file: str = None,\n  datacenter: str = None,\n  gzip: bool = None,\n  http_auth: str = None,\n  key_file: str = None,\n  lock: bool = None,\n  scheme: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ConsulBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.ConsulBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.ConsulBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.ConsulBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.ConsulBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ConsulBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.ConsulBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.ConsulBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.ConsulBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.ConsulBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.ConsulBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.ConsulBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.ConsulBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.ConsulBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.ConsulBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.ConsulBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.ConsulBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.ConsulBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ConsulBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ConsulBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.ConsulBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.ConsulBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.ConsulBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.ConsulBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.ConsulBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.ConsulBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.ConsulBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.ConsulBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.ConsulBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.ConsulBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ConsulBackend.property.node",
            "displayName": "node",
            "id": "cdktf.ConsulBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.ConsulBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.ConsulBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.ConsulBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ConsulBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.ConsulBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.ConsulBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.ConsulBackend",
        "displayName": "ConsulBackend",
        "id": "cdktf.ConsulBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.CosBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CosBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.CosBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.bucket",
              "displayName": "bucket",
              "id": "cdktf.CosBackend.Initializer.parameter.bucket",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The name of the COS bucket.",
                "remarks": "You shall manually create it first."
              }
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.acl",
              "displayName": "acl",
              "id": "cdktf.CosBackend.Initializer.parameter.acl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read.",
                "remarks": "Defaults to private."
              }
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.encrypt",
              "displayName": "encrypt",
              "id": "cdktf.CosBackend.Initializer.parameter.encrypt",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Whether to enable server side encryption of the state file.",
                "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file."
              }
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.CosBackend.Initializer.parameter.key",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path for saving the state file in bucket.",
                "remarks": "Defaults to terraform.tfstate."
              }
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.CosBackend.Initializer.parameter.prefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The directory for saving the state file in bucket.",
                "remarks": "Default to \"env:\"."
              }
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.region",
              "displayName": "region",
              "id": "cdktf.CosBackend.Initializer.parameter.region",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The region of the COS bucket.",
                "remarks": "It supports environment variables TENCENTCLOUD_REGION."
              }
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.secret_id",
              "displayName": "secret_id",
              "id": "cdktf.CosBackend.Initializer.parameter.secretId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Secret id of Tencent Cloud.",
                "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID."
              }
            },
            {
              "fqn": "cdktf.CosBackend.Initializer.parameter.secret_key",
              "displayName": "secret_key",
              "id": "cdktf.CosBackend.Initializer.parameter.secretKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Secret key of Tencent Cloud.",
                "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.CosBackend(\n  scope: Construct,\n  bucket: str,\n  acl: str = None,\n  encrypt: bool = None,\n  key: str = None,\n  prefix: str = None,\n  region: str = None,\n  secret_id: str = None,\n  secret_key: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.CosBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.CosBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.CosBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.CosBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.CosBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CosBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.CosBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.CosBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.CosBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.CosBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.CosBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.CosBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.CosBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.CosBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.CosBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.CosBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.CosBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.CosBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CosBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.CosBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.CosBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.CosBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.CosBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.CosBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.CosBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.CosBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.CosBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.CosBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.CosBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.CosBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.CosBackend.property.node",
            "displayName": "node",
            "id": "cdktf.CosBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.CosBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.CosBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.CosBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.CosBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.CosBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.CosBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.CosBackend",
        "displayName": "CosBackend",
        "id": "cdktf.CosBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteState.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteState.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.organization",
              "displayName": "organization",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.organization",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.workspaces",
              "displayName": "workspaces",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.workspaces",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IRemoteWorkspace",
                    "displayName": "IRemoteWorkspace",
                    "fqn": "cdktf.IRemoteWorkspace",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.hostname",
              "displayName": "hostname",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.hostname",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteState.Initializer.parameter.token",
              "displayName": "token",
              "id": "cdktf.DataTerraformRemoteState.Initializer.parameter.token",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteState(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  organization: str,\n  workspaces: IRemoteWorkspace,\n  hostname: str = None,\n  token: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteState.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteState.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteState.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteState.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteState.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteState.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteState.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteState.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteState.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteState.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteState.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteState.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteState.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteState.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteState.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteState.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteState.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteState.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteState.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteState.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteState.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteState.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteState.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteState.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteState.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteState.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteState.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteState",
        "displayName": "DataTerraformRemoteState",
        "id": "cdktf.DataTerraformRemoteState",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.password",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - The password."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.repo",
              "displayName": "repo",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.repo",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - The repository name."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.subpath",
              "displayName": "subpath",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.subpath",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - Path within the repository."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.url",
              "displayName": "url",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.url",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - The URL.",
                "remarks": "Note that this is the base url to artifactory not the full repo and subpath."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.username",
              "displayName": "username",
              "id": "cdktf.DataTerraformRemoteStateArtifactory.Initializer.parameter.username",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) - The username."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateArtifactory(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  password: str,\n  repo: str,\n  subpath: str,\n  url: str,\n  username: str\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateArtifactory.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateArtifactory.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateArtifactory.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateArtifactory.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateArtifactory",
        "displayName": "DataTerraformRemoteStateArtifactory",
        "id": "cdktf.DataTerraformRemoteStateArtifactory",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.container_name",
              "displayName": "container_name",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.containerName",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The Name of the Storage Container within the Storage Account."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.key",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.storage_account_name",
              "displayName": "storage_account_name",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.storageAccountName",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The Name of the Storage Account."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.access_key",
              "displayName": "access_key",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.accessKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account.",
                "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.client_certificate_password",
              "displayName": "client_certificate_password",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.clientCertificatePassword",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path.",
                "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.client_certificate_path",
              "displayName": "client_certificate_path",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.clientCertificatePath",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal.",
                "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.client_id",
              "displayName": "client_id",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.clientId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Client ID of the Service Principal.",
                "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.client_secret",
              "displayName": "client_secret",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.clientSecret",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Client Secret of the Service Principal.",
                "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.endpoint",
              "displayName": "endpoint",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.endpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable.",
                "remarks": "NOTE: An endpoint should only be configured when using Azure Stack."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.environment",
              "displayName": "environment",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.environment",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Azure Environment which should be used.",
                "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\nPossible values are public, china, german, stack and usgovernment. Defaults to public."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.msi_endpoint",
              "displayName": "msi_endpoint",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.msiEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified.",
                "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.oidc_request_token",
              "displayName": "oidc_request_token",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.oidcRequestToken",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The bearer token for the request to the OIDC provider.",
                "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.oidc_request_url",
              "displayName": "oidc_request_url",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.oidcRequestUrl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The URL for the OIDC provider from which to request an ID token.",
                "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.resource_group_name",
              "displayName": "resource_group_name",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.resourceGroupName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.sas_token",
              "displayName": "sas_token",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.sasToken",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The SAS Token used to access the Blob Storage Account.",
                "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.snapshot",
              "displayName": "snapshot",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.snapshot",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?",
                "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.subscription_id",
              "displayName": "subscription_id",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.subscriptionId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Subscription ID in which the Storage Account exists.",
                "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.tenant_id",
              "displayName": "tenant_id",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.tenantId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The Tenant ID in which the Subscription exists.",
                "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.use_azuread_auth",
              "displayName": "use_azuread_auth",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.useAzureadAuth",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account.",
                "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.use_microsoft_graph",
              "displayName": "use_microsoft_graph",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.useMicrosoftGraph",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?",
                "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.use_msi",
              "displayName": "use_msi",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.useMsi",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should Managed Service Identity authentication be used?",
                "remarks": "This can also be sourced from the ARM_USE_MSI environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.use_oidc",
              "displayName": "use_oidc",
              "id": "cdktf.DataTerraformRemoteStateAzurerm.Initializer.parameter.useOidc",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable.",
                "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default)."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateAzurerm(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  container_name: str,\n  key: str,\n  storage_account_name: str,\n  access_key: str = None,\n  client_certificate_password: str = None,\n  client_certificate_path: str = None,\n  client_id: str = None,\n  client_secret: str = None,\n  endpoint: str = None,\n  environment: str = None,\n  msi_endpoint: str = None,\n  oidc_request_token: str = None,\n  oidc_request_url: str = None,\n  resource_group_name: str = None,\n  sas_token: str = None,\n  snapshot: bool = None,\n  subscription_id: str = None,\n  tenant_id: str = None,\n  use_azuread_auth: bool = None,\n  use_microsoft_graph: bool = None,\n  use_msi: bool = None,\n  use_oidc: bool = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateAzurerm.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateAzurerm.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateAzurerm.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateAzurerm.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateAzurerm",
        "displayName": "DataTerraformRemoteStateAzurerm",
        "id": "cdktf.DataTerraformRemoteStateAzurerm",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateConsul.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.access_token",
              "displayName": "access_token",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.accessToken",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) Access token."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.path",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) Path in the Consul KV store."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.address",
              "displayName": "address",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.address",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port.",
                "remarks": "Defaults to the local agent HTTP listener."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.ca_file",
              "displayName": "ca_file",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.caFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.cert_file",
              "displayName": "cert_file",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.certFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;",
                "remarks": "requires use of key_file."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.datacenter",
              "displayName": "datacenter",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.datacenter",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The datacenter to use.",
                "remarks": "Defaults to that of the agent."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.gzip",
              "displayName": "gzip",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.gzip",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.http_auth",
              "displayName": "http_auth",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.httpAuth",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.key_file",
              "displayName": "key_file",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.keyFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.lock",
              "displayName": "lock",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.lock",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) false to disable locking.",
                "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.scheme",
              "displayName": "scheme",
              "id": "cdktf.DataTerraformRemoteStateConsul.Initializer.parameter.scheme",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https.",
                "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateConsul(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  access_token: str,\n  path: str,\n  address: str = None,\n  ca_file: str = None,\n  cert_file: str = None,\n  datacenter: str = None,\n  gzip: bool = None,\n  http_auth: str = None,\n  key_file: str = None,\n  lock: bool = None,\n  scheme: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateConsul.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateConsul.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateConsul.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateConsul.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateConsul.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateConsul.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateConsul.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateConsul.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateConsul.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateConsul.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateConsul.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateConsul.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateConsul.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateConsul.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateConsul.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateConsul.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateConsul.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateConsul.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateConsul.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateConsul.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateConsul",
        "displayName": "DataTerraformRemoteStateConsul",
        "id": "cdktf.DataTerraformRemoteStateConsul",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateCos.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.bucket",
              "displayName": "bucket",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.bucket",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The name of the COS bucket.",
                "remarks": "You shall manually create it first."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.acl",
              "displayName": "acl",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.acl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read.",
                "remarks": "Defaults to private."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.encrypt",
              "displayName": "encrypt",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.encrypt",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Whether to enable server side encryption of the state file.",
                "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.key",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path for saving the state file in bucket.",
                "remarks": "Defaults to terraform.tfstate."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.prefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The directory for saving the state file in bucket.",
                "remarks": "Default to \"env:\"."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.region",
              "displayName": "region",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.region",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The region of the COS bucket.",
                "remarks": "It supports environment variables TENCENTCLOUD_REGION."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.secret_id",
              "displayName": "secret_id",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.secretId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Secret id of Tencent Cloud.",
                "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.secret_key",
              "displayName": "secret_key",
              "id": "cdktf.DataTerraformRemoteStateCos.Initializer.parameter.secretKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Secret key of Tencent Cloud.",
                "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateCos(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  bucket: str,\n  acl: str = None,\n  encrypt: bool = None,\n  key: str = None,\n  prefix: str = None,\n  region: str = None,\n  secret_id: str = None,\n  secret_key: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateCos.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateCos.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateCos.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateCos.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateCos.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateCos.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateCos.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateCos.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateCos.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateCos.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateCos.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateCos.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateCos.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateCos.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateCos.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateCos.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateCos.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateCos.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateCos.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateCos.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateCos.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateCos.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateCos.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateCos.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateCos",
        "displayName": "DataTerraformRemoteStateCos",
        "id": "cdktf.DataTerraformRemoteStateCos",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.endpoints",
              "displayName": "endpoints",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.endpoints",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) A space-separated list of the etcd endpoints."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.path",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The path where to store the state."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.password",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The password."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.username",
              "displayName": "username",
              "id": "cdktf.DataTerraformRemoteStateEtcd.Initializer.parameter.username",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The username."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateEtcd(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  endpoints: str,\n  path: str,\n  password: str = None,\n  username: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateEtcd.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateEtcd.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateEtcd.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateEtcd.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateEtcd.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateEtcd.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateEtcd.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcd.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateEtcd.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcd.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateEtcd.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateEtcd.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateEtcd.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateEtcd",
        "displayName": "DataTerraformRemoteStateEtcd",
        "id": "cdktf.DataTerraformRemoteStateEtcd",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.endpoints",
              "displayName": "endpoints",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.endpoints",
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Required) The list of 'etcd' endpoints which to connect to."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.cacert_path",
              "displayName": "cacert_path",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.cacertPath",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.cert_path",
              "displayName": "cert_path",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.certPath",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.key_path",
              "displayName": "key_path",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.keyPath",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.lock",
              "displayName": "lock",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.lock",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Whether to lock state access.",
                "remarks": "Defaults to true."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.password",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Password used to connect to the etcd cluster."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.prefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd.",
                "remarks": "Defaults to \"\"."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.username",
              "displayName": "username",
              "id": "cdktf.DataTerraformRemoteStateEtcdV3.Initializer.parameter.username",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Username used to connect to the etcd cluster."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateEtcdV3(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  endpoints: typing.List[str],\n  cacert_path: str = None,\n  cert_path: str = None,\n  key_path: str = None,\n  lock: bool = None,\n  password: str = None,\n  prefix: str = None,\n  username: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateEtcdV3.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateEtcdV3.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateEtcdV3",
        "displayName": "DataTerraformRemoteStateEtcdV3",
        "id": "cdktf.DataTerraformRemoteStateEtcdV3",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateGcs.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.bucket",
              "displayName": "bucket",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.bucket",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The name of the GCS bucket.",
                "remarks": "This name must be globally unique."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.access_token",
              "displayName": "access_token",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.accessToken",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.credentials",
              "displayName": "credentials",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.credentials",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format.",
                "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.encryption_key",
              "displayName": "encryption_key",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.encryptionKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.impersonate_service_account",
              "displayName": "impersonate_service_account",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.impersonateServiceAccount",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The service account to impersonate for accessing the State Bucket.",
                "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.impersonate_service_account_delegates",
              "displayName": "impersonate_service_account_delegates",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.impersonateServiceAccountDelegates",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Optional) The delegation chain for an impersonating a service account."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.DataTerraformRemoteStateGcs.Initializer.parameter.prefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) GCS prefix inside the bucket.",
                "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateGcs(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  bucket: str,\n  access_token: str = None,\n  credentials: str = None,\n  encryption_key: str = None,\n  impersonate_service_account: str = None,\n  impersonate_service_account_delegates: typing.List[str] = None,\n  prefix: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateGcs.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateGcs.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateGcs.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateGcs.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateGcs.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateGcs.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateGcs.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateGcs.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateGcs.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateGcs.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateGcs.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateGcs.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateGcs.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateGcs.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateGcs.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateGcs.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateGcs.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateGcs.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateGcs.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateGcs.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateGcs",
        "displayName": "DataTerraformRemoteStateGcs",
        "id": "cdktf.DataTerraformRemoteStateGcs",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateHttp.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.address",
              "displayName": "address",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.address",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The address of the REST endpoint."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.lock_address",
              "displayName": "lock_address",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.lockAddress",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The address of the lock REST endpoint.",
                "remarks": "Defaults to disabled."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.lock_method",
              "displayName": "lock_method",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.lockMethod",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The HTTP method to use when locking.",
                "remarks": "Defaults to LOCK."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.password",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The password for HTTP basic authentication."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.retry_max",
              "displayName": "retry_max",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.retryMax",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {
                "summary": "(Optional) The number of HTTP request retries.",
                "remarks": "Defaults to 2."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.retry_wait_max",
              "displayName": "retry_wait_max",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.retryWaitMax",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {
                "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts.",
                "remarks": "Defaults to 30."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.retry_wait_min",
              "displayName": "retry_wait_min",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.retryWaitMin",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {
                "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts.",
                "remarks": "Defaults to 1."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.skip_cert_verification",
              "displayName": "skip_cert_verification",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.skipCertVerification",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Whether to skip TLS verification.",
                "remarks": "Defaults to false."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.unlock_address",
              "displayName": "unlock_address",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.unlockAddress",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The address of the unlock REST endpoint.",
                "remarks": "Defaults to disabled."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.unlock_method",
              "displayName": "unlock_method",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.unlockMethod",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The HTTP method to use when unlocking.",
                "remarks": "Defaults to UNLOCK."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.update_method",
              "displayName": "update_method",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.updateMethod",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) HTTP method to use when updating state.",
                "remarks": "Defaults to POST."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.username",
              "displayName": "username",
              "id": "cdktf.DataTerraformRemoteStateHttp.Initializer.parameter.username",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The username for HTTP basic authentication."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateHttp(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  address: str,\n  lock_address: str = None,\n  lock_method: str = None,\n  password: str = None,\n  retry_max: typing.Union[int, float] = None,\n  retry_wait_max: typing.Union[int, float] = None,\n  retry_wait_min: typing.Union[int, float] = None,\n  skip_cert_verification: bool = None,\n  unlock_address: str = None,\n  unlock_method: str = None,\n  update_method: str = None,\n  username: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateHttp.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateHttp.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateHttp.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateHttp.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateHttp.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateHttp.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateHttp.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateHttp.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateHttp.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateHttp.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateHttp.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateHttp.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateHttp.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateHttp.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateHttp.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateHttp.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateHttp.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateHttp.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateHttp.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateHttp.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateHttp",
        "displayName": "DataTerraformRemoteStateHttp",
        "id": "cdktf.DataTerraformRemoteStateHttp",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateLocal.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.path",
              "optional": true,
              "default": "- defaults to terraform.${stackId}.tfstate",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "Path where the state file is stored."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.workspace_dir",
              "displayName": "workspace_dir",
              "id": "cdktf.DataTerraformRemoteStateLocal.Initializer.parameter.workspaceDir",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to non-default workspaces."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateLocal(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  path: str = None,\n  workspace_dir: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateLocal.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateLocal.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateLocal.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateLocal.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateLocal.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateLocal.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateLocal.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateLocal.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateLocal.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateLocal.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateLocal.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateLocal.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateLocal.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateLocal.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateLocal.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateLocal.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateLocal.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateLocal.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateLocal.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateLocal.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateLocal",
        "displayName": "DataTerraformRemoteStateLocal",
        "id": "cdktf.DataTerraformRemoteStateLocal",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateManta.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.account",
              "displayName": "account",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.account",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.key_id",
              "displayName": "key_id",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.keyId",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.path",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.insecure_skip_tls_verify",
              "displayName": "insecure_skip_tls_verify",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.insecureSkipTlsVerify",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.key_material",
              "displayName": "key_material",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.keyMaterial",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.object_name",
              "displayName": "object_name",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.objectName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.url",
              "displayName": "url",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.url",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.user",
              "displayName": "user",
              "id": "cdktf.DataTerraformRemoteStateManta.Initializer.parameter.user",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateManta(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  account: str,\n  key_id: str,\n  path: str,\n  insecure_skip_tls_verify: bool = None,\n  key_material: str = None,\n  object_name: str = None,\n  url: str = None,\n  user: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateManta.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateManta.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateManta.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateManta.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateManta.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateManta.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateManta.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateManta.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateManta.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateManta.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateManta.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateManta.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateManta.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateManta.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateManta.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateManta.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateManta.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateManta.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateManta.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateManta.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateManta.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateManta.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateManta.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateManta.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateManta",
        "displayName": "DataTerraformRemoteStateManta",
        "id": "cdktf.DataTerraformRemoteStateManta",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateOss.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.bucket",
              "displayName": "bucket",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.bucket",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.access_key",
              "displayName": "access_key",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.accessKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.acl",
              "displayName": "acl",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.acl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.assume_role",
              "displayName": "assume_role",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.assumeRole",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.OssAssumeRole",
                    "displayName": "OssAssumeRole",
                    "fqn": "cdktf.OssAssumeRole",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.ecs_role_name",
              "displayName": "ecs_role_name",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.ecsRoleName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.encrypt",
              "displayName": "encrypt",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.encrypt",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.endpoint",
              "displayName": "endpoint",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.endpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.key",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.prefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.profile",
              "displayName": "profile",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.profile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.region",
              "displayName": "region",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.region",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.secret_key",
              "displayName": "secret_key",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.secretKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.security_token",
              "displayName": "security_token",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.securityToken",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.shared_credentials_file",
              "displayName": "shared_credentials_file",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.sharedCredentialsFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.tablestore_endpoint",
              "displayName": "tablestore_endpoint",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.tablestoreEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.tablestore_table",
              "displayName": "tablestore_table",
              "id": "cdktf.DataTerraformRemoteStateOss.Initializer.parameter.tablestoreTable",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateOss(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  bucket: str,\n  access_key: str = None,\n  acl: str = None,\n  assume_role: OssAssumeRole = None,\n  ecs_role_name: str = None,\n  encrypt: bool = None,\n  endpoint: str = None,\n  key: str = None,\n  prefix: str = None,\n  profile: str = None,\n  region: str = None,\n  secret_key: str = None,\n  security_token: str = None,\n  shared_credentials_file: str = None,\n  tablestore_endpoint: str = None,\n  tablestore_table: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateOss.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateOss.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateOss.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateOss.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateOss.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateOss.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateOss.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateOss.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateOss.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateOss.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateOss.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateOss.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateOss.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateOss.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateOss.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateOss.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateOss.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateOss.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateOss.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateOss.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateOss.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateOss.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateOss.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateOss.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateOss",
        "displayName": "DataTerraformRemoteStateOss",
        "id": "cdktf.DataTerraformRemoteStateOss",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStatePg.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.conn_str",
              "displayName": "conn_str",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.connStr",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.schema_name",
              "displayName": "schema_name",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.schemaName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.skip_schema_creation",
              "displayName": "skip_schema_creation",
              "id": "cdktf.DataTerraformRemoteStatePg.Initializer.parameter.skipSchemaCreation",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStatePg(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  conn_str: str,\n  schema_name: str = None,\n  skip_schema_creation: bool = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStatePg.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStatePg.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStatePg.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStatePg.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStatePg.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStatePg.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStatePg.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStatePg.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStatePg.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStatePg.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStatePg.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStatePg.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStatePg.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStatePg.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStatePg.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStatePg.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStatePg.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStatePg.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStatePg.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStatePg.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStatePg.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStatePg.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStatePg.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStatePg.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStatePg",
        "displayName": "DataTerraformRemoteStatePg",
        "id": "cdktf.DataTerraformRemoteStatePg",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateS3.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.bucket",
              "displayName": "bucket",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.bucket",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "Name of the S3 Bucket."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.key",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "Path to the state file inside the S3 Bucket.",
                "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key"
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.access_key",
              "displayName": "access_key",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.accessKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) AWS access key.",
                "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.acl",
              "displayName": "acl",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.acl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Canned ACL to be applied to the state file."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.assume_role_policy",
              "displayName": "assume_role_policy",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.assumeRolePolicy",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.assume_role_policy_arns",
              "displayName": "assume_role_policy_arns",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.assumeRolePolicyArns",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.assume_role_tags",
              "displayName": "assume_role_tags",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.assumeRoleTags",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Optional) Map of assume role session tags."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.assume_role_transitive_tag_keys",
              "displayName": "assume_role_transitive_tag_keys",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.assumeRoleTransitiveTagKeys",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.dynamodb_endpoint",
              "displayName": "dynamodb_endpoint",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.dynamodbEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Custom endpoint for the AWS DynamoDB API.",
                "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.dynamodb_table",
              "displayName": "dynamodb_table",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.dynamodbTable",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency.",
                "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.encrypt",
              "displayName": "encrypt",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.encrypt",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Enable server side encryption of the state file."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.endpoint",
              "displayName": "endpoint",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.endpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Custom endpoint for the AWS S3 API.",
                "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.external_id",
              "displayName": "external_id",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.externalId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) External identifier to use when assuming the role."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.force_path_style",
              "displayName": "force_path_style",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.forcePathStyle",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.iam_endpoint",
              "displayName": "iam_endpoint",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.iamEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API.",
                "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.kms_key_id",
              "displayName": "kms_key_id",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.kmsKeyId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state.",
                "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.max_retries",
              "displayName": "max_retries",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.maxRetries",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {
                "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure.",
                "remarks": "Defaults to 5."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.profile",
              "displayName": "profile",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.profile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.region",
              "displayName": "region",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.region",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used).",
                "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.role_arn",
              "displayName": "role_arn",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.roleArn",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.secret_key",
              "displayName": "secret_key",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.secretKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) AWS secret access key.",
                "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)"
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.session_name",
              "displayName": "session_name",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.sessionName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Session name to use when assuming the role."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.shared_credentials_file",
              "displayName": "shared_credentials_file",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.sharedCredentialsFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Path to the AWS shared credentials file.",
                "remarks": "Defaults to ~/.aws/credentials."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.skip_credentials_validation",
              "displayName": "skip_credentials_validation",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.skipCredentialsValidation",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Skip credentials validation via the STS API."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.skip_metadata_api_check",
              "displayName": "skip_metadata_api_check",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.skipMetadataApiCheck",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Skip usage of EC2 Metadata API."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.skip_region_validation",
              "displayName": "skip_region_validation",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.skipRegionValidation",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Skip validation of provided region name."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.sse_customer_key",
              "displayName": "sse_customer_key",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.sseCustomerKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C).",
                "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.sts_endpoint",
              "displayName": "sts_endpoint",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.stsEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API.",
                "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.token",
              "displayName": "token",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.token",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Multi-Factor Authentication (MFA) token.",
                "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable."
              }
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.workspace_key_prefix",
              "displayName": "workspace_key_prefix",
              "id": "cdktf.DataTerraformRemoteStateS3.Initializer.parameter.workspaceKeyPrefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Prefix applied to the state path inside the bucket.",
                "remarks": "This is only relevant when using a non-default workspace. Defaults to env:"
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateS3(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  bucket: str,\n  key: str,\n  access_key: str = None,\n  acl: str = None,\n  assume_role_policy: str = None,\n  assume_role_policy_arns: typing.List[str] = None,\n  assume_role_tags: typing.Mapping[str] = None,\n  assume_role_transitive_tag_keys: typing.List[str] = None,\n  dynamodb_endpoint: str = None,\n  dynamodb_table: str = None,\n  encrypt: bool = None,\n  endpoint: str = None,\n  external_id: str = None,\n  force_path_style: bool = None,\n  iam_endpoint: str = None,\n  kms_key_id: str = None,\n  max_retries: typing.Union[int, float] = None,\n  profile: str = None,\n  region: str = None,\n  role_arn: str = None,\n  secret_key: str = None,\n  session_name: str = None,\n  shared_credentials_file: str = None,\n  skip_credentials_validation: bool = None,\n  skip_metadata_api_check: bool = None,\n  skip_region_validation: bool = None,\n  sse_customer_key: str = None,\n  sts_endpoint: str = None,\n  token: str = None,\n  workspace_key_prefix: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateS3.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateS3.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateS3.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateS3.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateS3.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateS3.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateS3.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateS3.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateS3.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateS3.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateS3.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateS3.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateS3.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateS3.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateS3.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateS3.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateS3.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateS3.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateS3.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateS3.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateS3.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateS3.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateS3.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateS3.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateS3",
        "displayName": "DataTerraformRemoteStateS3",
        "id": "cdktf.DataTerraformRemoteStateS3",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DataTerraformRemoteStateSwift.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.container",
              "displayName": "container",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.container",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.application_credential_id",
              "displayName": "application_credential_id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.applicationCredentialId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.application_credential_name",
              "displayName": "application_credential_name",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.applicationCredentialName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.application_credential_secret",
              "displayName": "application_credential_secret",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.applicationCredentialSecret",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.archive_container",
              "displayName": "archive_container",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.archiveContainer",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.auth_url",
              "displayName": "auth_url",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.authUrl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.cacert_file",
              "displayName": "cacert_file",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.cacertFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.cert",
              "displayName": "cert",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.cert",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.cloud",
              "displayName": "cloud",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.cloud",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.default_domain",
              "displayName": "default_domain",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.defaultDomain",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.domain_id",
              "displayName": "domain_id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.domainId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.domain_name",
              "displayName": "domain_name",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.domainName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.expire_after",
              "displayName": "expire_after",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.expireAfter",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.insecure",
              "displayName": "insecure",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.insecure",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.key",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.password",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.project_domain_id",
              "displayName": "project_domain_id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.projectDomainId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.project_domain_name",
              "displayName": "project_domain_name",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.projectDomainName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.region_name",
              "displayName": "region_name",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.regionName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.state_name",
              "displayName": "state_name",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.stateName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.tenant_id",
              "displayName": "tenant_id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.tenantId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.tenant_name",
              "displayName": "tenant_name",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.tenantName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.token",
              "displayName": "token",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.token",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.user_domain_id",
              "displayName": "user_domain_id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.userDomainId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.user_domain_name",
              "displayName": "user_domain_name",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.userDomainName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.user_id",
              "displayName": "user_id",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.userId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.user_name",
              "displayName": "user_name",
              "id": "cdktf.DataTerraformRemoteStateSwift.Initializer.parameter.userName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateSwift(\n  scope: Construct,\n  id: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  container: str,\n  application_credential_id: str = None,\n  application_credential_name: str = None,\n  application_credential_secret: str = None,\n  archive_container: str = None,\n  auth_url: str = None,\n  cacert_file: str = None,\n  cert: str = None,\n  cloud: str = None,\n  default_domain: str = None,\n  domain_id: str = None,\n  domain_name: str = None,\n  expire_after: str = None,\n  insecure: bool = None,\n  key: str = None,\n  password: str = None,\n  project_domain_id: str = None,\n  project_domain_name: str = None,\n  region_name: str = None,\n  state_name: str = None,\n  tenant_id: str = None,\n  tenant_name: str = None,\n  token: str = None,\n  user_domain_id: str = None,\n  user_domain_name: str = None,\n  user_id: str = None,\n  user_name: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.to_string",
            "displayName": "to_string",
            "id": "cdktf.DataTerraformRemoteStateSwift.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.add_override",
            "displayName": "add_override",
            "id": "cdktf.DataTerraformRemoteStateSwift.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.DataTerraformRemoteStateSwift.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.DataTerraformRemoteStateSwift.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateSwift.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.DataTerraformRemoteStateSwift.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.DataTerraformRemoteStateSwift.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.DataTerraformRemoteStateSwift.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.DataTerraformRemoteStateSwift.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.get",
            "displayName": "get",
            "id": "cdktf.DataTerraformRemoteStateSwift.get",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.DataTerraformRemoteStateSwift.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.get_list",
            "displayName": "get_list",
            "id": "cdktf.DataTerraformRemoteStateSwift.getList",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.get_number",
            "displayName": "get_number",
            "id": "cdktf.DataTerraformRemoteStateSwift.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.get_string",
            "displayName": "get_string",
            "id": "cdktf.DataTerraformRemoteStateSwift.getString",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.DataTerraformRemoteStateSwift.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.DataTerraformRemoteStateSwift.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.DataTerraformRemoteStateSwift.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.DataTerraformRemoteStateSwift.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateSwift.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.node",
            "displayName": "node",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.DataTerraformRemoteStateSwift.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.DataTerraformRemoteStateSwift",
        "displayName": "DataTerraformRemoteStateSwift",
        "id": "cdktf.DataTerraformRemoteStateSwift",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.EtcdBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.EtcdBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.EtcdBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.EtcdBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.EtcdBackend.Initializer.parameter.endpoints",
              "displayName": "endpoints",
              "id": "cdktf.EtcdBackend.Initializer.parameter.endpoints",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) A space-separated list of the etcd endpoints."
              }
            },
            {
              "fqn": "cdktf.EtcdBackend.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.EtcdBackend.Initializer.parameter.path",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The path where to store the state."
              }
            },
            {
              "fqn": "cdktf.EtcdBackend.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.EtcdBackend.Initializer.parameter.password",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The password."
              }
            },
            {
              "fqn": "cdktf.EtcdBackend.Initializer.parameter.username",
              "displayName": "username",
              "id": "cdktf.EtcdBackend.Initializer.parameter.username",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The username."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.EtcdBackend(\n  scope: Construct,\n  endpoints: str,\n  path: str,\n  password: str = None,\n  username: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.EtcdBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.EtcdBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.EtcdBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.EtcdBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.EtcdBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.EtcdBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.EtcdBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.EtcdBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.EtcdBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.EtcdBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.EtcdBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.EtcdBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.EtcdBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.EtcdBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.EtcdBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.EtcdBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.EtcdBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.EtcdBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.EtcdBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.EtcdBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.EtcdBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.EtcdBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.EtcdBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.EtcdBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.EtcdBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.EtcdBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.EtcdBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.EtcdBackend.property.node",
            "displayName": "node",
            "id": "cdktf.EtcdBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.EtcdBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.EtcdBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.EtcdBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.EtcdBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.EtcdBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.EtcdBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.EtcdBackend",
        "displayName": "EtcdBackend",
        "id": "cdktf.EtcdBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.EtcdV3Backend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.EtcdV3Backend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.endpoints",
              "displayName": "endpoints",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.endpoints",
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Required) The list of 'etcd' endpoints which to connect to."
              }
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.cacert_path",
              "displayName": "cacert_path",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.cacertPath",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
              }
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.cert_path",
              "displayName": "cert_path",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.certPath",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
              }
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.key_path",
              "displayName": "key_path",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.keyPath",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
              }
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.lock",
              "displayName": "lock",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.lock",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Whether to lock state access.",
                "remarks": "Defaults to true."
              }
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.password",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Password used to connect to the etcd cluster."
              }
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.prefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd.",
                "remarks": "Defaults to \"\"."
              }
            },
            {
              "fqn": "cdktf.EtcdV3Backend.Initializer.parameter.username",
              "displayName": "username",
              "id": "cdktf.EtcdV3Backend.Initializer.parameter.username",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Username used to connect to the etcd cluster."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.EtcdV3Backend(\n  scope: Construct,\n  endpoints: typing.List[str],\n  cacert_path: str = None,\n  cert_path: str = None,\n  key_path: str = None,\n  lock: bool = None,\n  password: str = None,\n  prefix: str = None,\n  username: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.EtcdV3Backend.to_string",
            "displayName": "to_string",
            "id": "cdktf.EtcdV3Backend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.add_override",
            "displayName": "add_override",
            "id": "cdktf.EtcdV3Backend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.EtcdV3Backend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdV3Backend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.EtcdV3Backend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.EtcdV3Backend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.EtcdV3Backend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.EtcdV3Backend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.EtcdV3Backend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.EtcdV3Backend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdV3Backend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.EtcdV3Backend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.EtcdV3Backend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.EtcdV3Backend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.EtcdV3Backend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.EtcdV3Backend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.EtcdV3Backend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.EtcdV3Backend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.EtcdV3Backend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.EtcdV3Backend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.EtcdV3Backend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.EtcdV3Backend.property.node",
            "displayName": "node",
            "id": "cdktf.EtcdV3Backend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.EtcdV3Backend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.EtcdV3Backend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.EtcdV3Backend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.EtcdV3Backend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.EtcdV3Backend",
        "displayName": "EtcdV3Backend",
        "id": "cdktf.EtcdV3Backend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.GcsBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.GcsBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.GcsBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.bucket",
              "displayName": "bucket",
              "id": "cdktf.GcsBackend.Initializer.parameter.bucket",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The name of the GCS bucket.",
                "remarks": "This name must be globally unique."
              }
            },
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.access_token",
              "displayName": "access_token",
              "id": "cdktf.GcsBackend.Initializer.parameter.accessToken",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
              }
            },
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.credentials",
              "displayName": "credentials",
              "id": "cdktf.GcsBackend.Initializer.parameter.credentials",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format.",
                "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable."
              }
            },
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.encryption_key",
              "displayName": "encryption_key",
              "id": "cdktf.GcsBackend.Initializer.parameter.encryptionKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
              }
            },
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.impersonate_service_account",
              "displayName": "impersonate_service_account",
              "id": "cdktf.GcsBackend.Initializer.parameter.impersonateServiceAccount",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The service account to impersonate for accessing the State Bucket.",
                "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable."
              }
            },
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.impersonate_service_account_delegates",
              "displayName": "impersonate_service_account_delegates",
              "id": "cdktf.GcsBackend.Initializer.parameter.impersonateServiceAccountDelegates",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Optional) The delegation chain for an impersonating a service account."
              }
            },
            {
              "fqn": "cdktf.GcsBackend.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.GcsBackend.Initializer.parameter.prefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) GCS prefix inside the bucket.",
                "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.GcsBackend(\n  scope: Construct,\n  bucket: str,\n  access_token: str = None,\n  credentials: str = None,\n  encryption_key: str = None,\n  impersonate_service_account: str = None,\n  impersonate_service_account_delegates: typing.List[str] = None,\n  prefix: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.GcsBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.GcsBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.GcsBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.GcsBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.GcsBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.GcsBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.GcsBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.GcsBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.GcsBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.GcsBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.GcsBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.GcsBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.GcsBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.GcsBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.GcsBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.GcsBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.GcsBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.GcsBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.GcsBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.GcsBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.GcsBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.GcsBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.GcsBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.GcsBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.GcsBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.GcsBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.GcsBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.GcsBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.GcsBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.GcsBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.GcsBackend.property.node",
            "displayName": "node",
            "id": "cdktf.GcsBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.GcsBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.GcsBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.GcsBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.GcsBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.GcsBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.GcsBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.GcsBackend",
        "displayName": "GcsBackend",
        "id": "cdktf.GcsBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.HttpBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.HttpBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.HttpBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.address",
              "displayName": "address",
              "id": "cdktf.HttpBackend.Initializer.parameter.address",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Required) The address of the REST endpoint."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.lock_address",
              "displayName": "lock_address",
              "id": "cdktf.HttpBackend.Initializer.parameter.lockAddress",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The address of the lock REST endpoint.",
                "remarks": "Defaults to disabled."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.lock_method",
              "displayName": "lock_method",
              "id": "cdktf.HttpBackend.Initializer.parameter.lockMethod",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The HTTP method to use when locking.",
                "remarks": "Defaults to LOCK."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.HttpBackend.Initializer.parameter.password",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The password for HTTP basic authentication."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.retry_max",
              "displayName": "retry_max",
              "id": "cdktf.HttpBackend.Initializer.parameter.retryMax",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {
                "summary": "(Optional) The number of HTTP request retries.",
                "remarks": "Defaults to 2."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.retry_wait_max",
              "displayName": "retry_wait_max",
              "id": "cdktf.HttpBackend.Initializer.parameter.retryWaitMax",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {
                "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts.",
                "remarks": "Defaults to 30."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.retry_wait_min",
              "displayName": "retry_wait_min",
              "id": "cdktf.HttpBackend.Initializer.parameter.retryWaitMin",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {
                "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts.",
                "remarks": "Defaults to 1."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.skip_cert_verification",
              "displayName": "skip_cert_verification",
              "id": "cdktf.HttpBackend.Initializer.parameter.skipCertVerification",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Whether to skip TLS verification.",
                "remarks": "Defaults to false."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.unlock_address",
              "displayName": "unlock_address",
              "id": "cdktf.HttpBackend.Initializer.parameter.unlockAddress",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The address of the unlock REST endpoint.",
                "remarks": "Defaults to disabled."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.unlock_method",
              "displayName": "unlock_method",
              "id": "cdktf.HttpBackend.Initializer.parameter.unlockMethod",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The HTTP method to use when unlocking.",
                "remarks": "Defaults to UNLOCK."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.update_method",
              "displayName": "update_method",
              "id": "cdktf.HttpBackend.Initializer.parameter.updateMethod",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) HTTP method to use when updating state.",
                "remarks": "Defaults to POST."
              }
            },
            {
              "fqn": "cdktf.HttpBackend.Initializer.parameter.username",
              "displayName": "username",
              "id": "cdktf.HttpBackend.Initializer.parameter.username",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The username for HTTP basic authentication."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.HttpBackend(\n  scope: Construct,\n  address: str,\n  lock_address: str = None,\n  lock_method: str = None,\n  password: str = None,\n  retry_max: typing.Union[int, float] = None,\n  retry_wait_max: typing.Union[int, float] = None,\n  retry_wait_min: typing.Union[int, float] = None,\n  skip_cert_verification: bool = None,\n  unlock_address: str = None,\n  unlock_method: str = None,\n  update_method: str = None,\n  username: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.HttpBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.HttpBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.HttpBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.HttpBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.HttpBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.HttpBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.HttpBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.HttpBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.HttpBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.HttpBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.HttpBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.HttpBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.HttpBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.HttpBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.HttpBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.HttpBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.HttpBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.HttpBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.HttpBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.HttpBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.HttpBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.HttpBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.HttpBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.HttpBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.HttpBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.HttpBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.HttpBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.HttpBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.HttpBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.HttpBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.HttpBackend.property.node",
            "displayName": "node",
            "id": "cdktf.HttpBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.HttpBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.HttpBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.HttpBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.HttpBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.HttpBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.HttpBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.HttpBackend",
        "displayName": "HttpBackend",
        "id": "cdktf.HttpBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.LocalBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.LocalBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.LocalBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.LocalBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.LocalBackend.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.LocalBackend.Initializer.parameter.path",
              "optional": true,
              "default": "- defaults to terraform.${stackId}.tfstate",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "Path where the state file is stored."
              }
            },
            {
              "fqn": "cdktf.LocalBackend.Initializer.parameter.workspace_dir",
              "displayName": "workspace_dir",
              "id": "cdktf.LocalBackend.Initializer.parameter.workspaceDir",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The path to non-default workspaces."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.LocalBackend(\n  scope: Construct,\n  path: str = None,\n  workspace_dir: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.LocalBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.LocalBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.LocalBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.LocalBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.LocalBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.LocalBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.LocalBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.LocalBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.LocalBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.LocalBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.LocalBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.LocalBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.LocalBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.LocalBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.LocalBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.LocalBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.LocalBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.LocalBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.LocalBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.LocalBackend.get_remote_state_data_source.parameter.from_stack",
                "displayName": "from_stack",
                "id": "cdktf.LocalBackend.getRemoteStateDataSource.parameter.fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  from_stack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.LocalBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.LocalBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.LocalBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.LocalBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.LocalBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.LocalBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.LocalBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.LocalBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.LocalBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.LocalBackend.property.node",
            "displayName": "node",
            "id": "cdktf.LocalBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.LocalBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.LocalBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.LocalBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.LocalBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.LocalBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.LocalBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.LocalBackend",
        "displayName": "LocalBackend",
        "id": "cdktf.LocalBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.MantaBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.MantaBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.MantaBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.account",
              "displayName": "account",
              "id": "cdktf.MantaBackend.Initializer.parameter.account",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.key_id",
              "displayName": "key_id",
              "id": "cdktf.MantaBackend.Initializer.parameter.keyId",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.MantaBackend.Initializer.parameter.path",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.insecure_skip_tls_verify",
              "displayName": "insecure_skip_tls_verify",
              "id": "cdktf.MantaBackend.Initializer.parameter.insecureSkipTlsVerify",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.key_material",
              "displayName": "key_material",
              "id": "cdktf.MantaBackend.Initializer.parameter.keyMaterial",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.object_name",
              "displayName": "object_name",
              "id": "cdktf.MantaBackend.Initializer.parameter.objectName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.url",
              "displayName": "url",
              "id": "cdktf.MantaBackend.Initializer.parameter.url",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.MantaBackend.Initializer.parameter.user",
              "displayName": "user",
              "id": "cdktf.MantaBackend.Initializer.parameter.user",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.MantaBackend(\n  scope: Construct,\n  account: str,\n  key_id: str,\n  path: str,\n  insecure_skip_tls_verify: bool = None,\n  key_material: str = None,\n  object_name: str = None,\n  url: str = None,\n  user: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.MantaBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.MantaBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.MantaBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.MantaBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.MantaBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.MantaBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.MantaBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.MantaBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.MantaBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.MantaBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.MantaBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.MantaBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.MantaBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.MantaBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.MantaBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.MantaBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.MantaBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.MantaBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.MantaBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.MantaBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.MantaBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.MantaBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.MantaBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.MantaBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.MantaBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.MantaBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.MantaBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.MantaBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.MantaBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.MantaBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.MantaBackend.property.node",
            "displayName": "node",
            "id": "cdktf.MantaBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.MantaBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.MantaBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.MantaBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.MantaBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.MantaBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.MantaBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.MantaBackend",
        "displayName": "MantaBackend",
        "id": "cdktf.MantaBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.OssBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.OssBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.OssBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.bucket",
              "displayName": "bucket",
              "id": "cdktf.OssBackend.Initializer.parameter.bucket",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.access_key",
              "displayName": "access_key",
              "id": "cdktf.OssBackend.Initializer.parameter.accessKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.acl",
              "displayName": "acl",
              "id": "cdktf.OssBackend.Initializer.parameter.acl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.assume_role",
              "displayName": "assume_role",
              "id": "cdktf.OssBackend.Initializer.parameter.assumeRole",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.OssAssumeRole",
                    "displayName": "OssAssumeRole",
                    "fqn": "cdktf.OssAssumeRole",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.ecs_role_name",
              "displayName": "ecs_role_name",
              "id": "cdktf.OssBackend.Initializer.parameter.ecsRoleName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.encrypt",
              "displayName": "encrypt",
              "id": "cdktf.OssBackend.Initializer.parameter.encrypt",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.endpoint",
              "displayName": "endpoint",
              "id": "cdktf.OssBackend.Initializer.parameter.endpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.OssBackend.Initializer.parameter.key",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.OssBackend.Initializer.parameter.prefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.profile",
              "displayName": "profile",
              "id": "cdktf.OssBackend.Initializer.parameter.profile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.region",
              "displayName": "region",
              "id": "cdktf.OssBackend.Initializer.parameter.region",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.secret_key",
              "displayName": "secret_key",
              "id": "cdktf.OssBackend.Initializer.parameter.secretKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.security_token",
              "displayName": "security_token",
              "id": "cdktf.OssBackend.Initializer.parameter.securityToken",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.shared_credentials_file",
              "displayName": "shared_credentials_file",
              "id": "cdktf.OssBackend.Initializer.parameter.sharedCredentialsFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.tablestore_endpoint",
              "displayName": "tablestore_endpoint",
              "id": "cdktf.OssBackend.Initializer.parameter.tablestoreEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.OssBackend.Initializer.parameter.tablestore_table",
              "displayName": "tablestore_table",
              "id": "cdktf.OssBackend.Initializer.parameter.tablestoreTable",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.OssBackend(\n  scope: Construct,\n  bucket: str,\n  access_key: str = None,\n  acl: str = None,\n  assume_role: OssAssumeRole = None,\n  ecs_role_name: str = None,\n  encrypt: bool = None,\n  endpoint: str = None,\n  key: str = None,\n  prefix: str = None,\n  profile: str = None,\n  region: str = None,\n  secret_key: str = None,\n  security_token: str = None,\n  shared_credentials_file: str = None,\n  tablestore_endpoint: str = None,\n  tablestore_table: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.OssBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.OssBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.OssBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.OssBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.OssBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.OssBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.OssBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.OssBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.OssBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.OssBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.OssBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.OssBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.OssBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.OssBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.OssBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.OssBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.OssBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.OssBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.OssBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.OssBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.OssBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.OssBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.OssBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.OssBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.OssBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.OssBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.OssBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.OssBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.OssBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.OssBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.OssBackend.property.node",
            "displayName": "node",
            "id": "cdktf.OssBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.OssBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.OssBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.OssBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.OssBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.OssBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.OssBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.OssBackend",
        "displayName": "OssBackend",
        "id": "cdktf.OssBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.PgBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.PgBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.PgBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.PgBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.PgBackend.Initializer.parameter.conn_str",
              "displayName": "conn_str",
              "id": "cdktf.PgBackend.Initializer.parameter.connStr",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.PgBackend.Initializer.parameter.schema_name",
              "displayName": "schema_name",
              "id": "cdktf.PgBackend.Initializer.parameter.schemaName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.PgBackend.Initializer.parameter.skip_schema_creation",
              "displayName": "skip_schema_creation",
              "id": "cdktf.PgBackend.Initializer.parameter.skipSchemaCreation",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.PgBackend(\n  scope: Construct,\n  conn_str: str,\n  schema_name: str = None,\n  skip_schema_creation: bool = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.PgBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.PgBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.PgBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.PgBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.PgBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.PgBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.PgBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.PgBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.PgBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.PgBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.PgBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.PgBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.PgBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.PgBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.PgBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.PgBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.PgBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.PgBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.PgBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.PgBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.PgBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.PgBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.PgBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.PgBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.PgBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.PgBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.PgBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.PgBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.PgBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.PgBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.PgBackend.property.node",
            "displayName": "node",
            "id": "cdktf.PgBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.PgBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.PgBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.PgBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.PgBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.PgBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.PgBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.PgBackend",
        "displayName": "PgBackend",
        "id": "cdktf.PgBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.RemoteBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.RemoteBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.RemoteBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.RemoteBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.RemoteBackend.Initializer.parameter.organization",
              "displayName": "organization",
              "id": "cdktf.RemoteBackend.Initializer.parameter.organization",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.RemoteBackend.Initializer.parameter.workspaces",
              "displayName": "workspaces",
              "id": "cdktf.RemoteBackend.Initializer.parameter.workspaces",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IRemoteWorkspace",
                    "displayName": "IRemoteWorkspace",
                    "fqn": "cdktf.IRemoteWorkspace",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.RemoteBackend.Initializer.parameter.hostname",
              "displayName": "hostname",
              "id": "cdktf.RemoteBackend.Initializer.parameter.hostname",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.RemoteBackend.Initializer.parameter.token",
              "displayName": "token",
              "id": "cdktf.RemoteBackend.Initializer.parameter.token",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.RemoteBackend(\n  scope: Construct,\n  organization: str,\n  workspaces: IRemoteWorkspace,\n  hostname: str = None,\n  token: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.RemoteBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.RemoteBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.RemoteBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.RemoteBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.RemoteBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.RemoteBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.RemoteBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.RemoteBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.RemoteBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.RemoteBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.RemoteBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.RemoteBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.RemoteBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.RemoteBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.RemoteBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.RemoteBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.RemoteBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.RemoteBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.RemoteBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.RemoteBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.RemoteBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.RemoteBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.RemoteBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.RemoteBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.RemoteBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.RemoteBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.RemoteBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.RemoteBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.RemoteBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.RemoteBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.RemoteBackend.property.node",
            "displayName": "node",
            "id": "cdktf.RemoteBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.RemoteBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.RemoteBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.RemoteBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.RemoteBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.RemoteBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.RemoteBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.RemoteBackend",
        "displayName": "RemoteBackend",
        "id": "cdktf.RemoteBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.Resource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Resource.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.Resource.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.Resource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.Resource.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.Resource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.Resource(\n  scope: Construct,\n  id: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IResource",
            "displayName": "IResource",
            "id": "cdktf.IResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.Resource.to_string",
            "displayName": "to_string",
            "id": "cdktf.Resource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.Resource.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.Resource.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.Resource.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.Resource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "import cdktf\n\ncdktf.Resource.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.Resource.property.node",
            "displayName": "node",
            "id": "cdktf.Resource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.Resource.property.stack",
            "displayName": "stack",
            "id": "cdktf.Resource.property.stack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The stack in which this resource is defined.",
              "deprecated": true,
              "deprecationReason": "- Please use Construct from the constructs package instead."
            },
            "usage": "stack: TerraformStack"
          }
        ],
        "fqn": "cdktf.Resource",
        "displayName": "Resource",
        "id": "cdktf.Resource",
        "docs": {
          "summary": "A construct which represents a resource.",
          "deprecated": true,
          "deprecationReason": "- Please use Construct from the constructs package instead."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.S3Backend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.S3Backend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.S3Backend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.bucket",
              "displayName": "bucket",
              "id": "cdktf.S3Backend.Initializer.parameter.bucket",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "Name of the S3 Bucket."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.S3Backend.Initializer.parameter.key",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "Path to the state file inside the S3 Bucket.",
                "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key"
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.access_key",
              "displayName": "access_key",
              "id": "cdktf.S3Backend.Initializer.parameter.accessKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) AWS access key.",
                "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.acl",
              "displayName": "acl",
              "id": "cdktf.S3Backend.Initializer.parameter.acl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Canned ACL to be applied to the state file."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.assume_role_policy",
              "displayName": "assume_role_policy",
              "id": "cdktf.S3Backend.Initializer.parameter.assumeRolePolicy",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.assume_role_policy_arns",
              "displayName": "assume_role_policy_arns",
              "id": "cdktf.S3Backend.Initializer.parameter.assumeRolePolicyArns",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.assume_role_tags",
              "displayName": "assume_role_tags",
              "id": "cdktf.S3Backend.Initializer.parameter.assumeRoleTags",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Optional) Map of assume role session tags."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.assume_role_transitive_tag_keys",
              "displayName": "assume_role_transitive_tag_keys",
              "id": "cdktf.S3Backend.Initializer.parameter.assumeRoleTransitiveTagKeys",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {
                "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.dynamodb_endpoint",
              "displayName": "dynamodb_endpoint",
              "id": "cdktf.S3Backend.Initializer.parameter.dynamodbEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Custom endpoint for the AWS DynamoDB API.",
                "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.dynamodb_table",
              "displayName": "dynamodb_table",
              "id": "cdktf.S3Backend.Initializer.parameter.dynamodbTable",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency.",
                "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.encrypt",
              "displayName": "encrypt",
              "id": "cdktf.S3Backend.Initializer.parameter.encrypt",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Enable server side encryption of the state file."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.endpoint",
              "displayName": "endpoint",
              "id": "cdktf.S3Backend.Initializer.parameter.endpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Custom endpoint for the AWS S3 API.",
                "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.external_id",
              "displayName": "external_id",
              "id": "cdktf.S3Backend.Initializer.parameter.externalId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) External identifier to use when assuming the role."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.force_path_style",
              "displayName": "force_path_style",
              "id": "cdktf.S3Backend.Initializer.parameter.forcePathStyle",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.iam_endpoint",
              "displayName": "iam_endpoint",
              "id": "cdktf.S3Backend.Initializer.parameter.iamEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API.",
                "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.kms_key_id",
              "displayName": "kms_key_id",
              "id": "cdktf.S3Backend.Initializer.parameter.kmsKeyId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state.",
                "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.max_retries",
              "displayName": "max_retries",
              "id": "cdktf.S3Backend.Initializer.parameter.maxRetries",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {
                "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure.",
                "remarks": "Defaults to 5."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.profile",
              "displayName": "profile",
              "id": "cdktf.S3Backend.Initializer.parameter.profile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.region",
              "displayName": "region",
              "id": "cdktf.S3Backend.Initializer.parameter.region",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used).",
                "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.role_arn",
              "displayName": "role_arn",
              "id": "cdktf.S3Backend.Initializer.parameter.roleArn",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.secret_key",
              "displayName": "secret_key",
              "id": "cdktf.S3Backend.Initializer.parameter.secretKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) AWS secret access key.",
                "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)"
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.session_name",
              "displayName": "session_name",
              "id": "cdktf.S3Backend.Initializer.parameter.sessionName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Session name to use when assuming the role."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.shared_credentials_file",
              "displayName": "shared_credentials_file",
              "id": "cdktf.S3Backend.Initializer.parameter.sharedCredentialsFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Path to the AWS shared credentials file.",
                "remarks": "Defaults to ~/.aws/credentials."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.skip_credentials_validation",
              "displayName": "skip_credentials_validation",
              "id": "cdktf.S3Backend.Initializer.parameter.skipCredentialsValidation",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Skip credentials validation via the STS API."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.skip_metadata_api_check",
              "displayName": "skip_metadata_api_check",
              "id": "cdktf.S3Backend.Initializer.parameter.skipMetadataApiCheck",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Skip usage of EC2 Metadata API."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.skip_region_validation",
              "displayName": "skip_region_validation",
              "id": "cdktf.S3Backend.Initializer.parameter.skipRegionValidation",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "(Optional) Skip validation of provided region name."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.sse_customer_key",
              "displayName": "sse_customer_key",
              "id": "cdktf.S3Backend.Initializer.parameter.sseCustomerKey",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C).",
                "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.sts_endpoint",
              "displayName": "sts_endpoint",
              "id": "cdktf.S3Backend.Initializer.parameter.stsEndpoint",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API.",
                "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.token",
              "displayName": "token",
              "id": "cdktf.S3Backend.Initializer.parameter.token",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Multi-Factor Authentication (MFA) token.",
                "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable."
              }
            },
            {
              "fqn": "cdktf.S3Backend.Initializer.parameter.workspace_key_prefix",
              "displayName": "workspace_key_prefix",
              "id": "cdktf.S3Backend.Initializer.parameter.workspaceKeyPrefix",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "(Optional) Prefix applied to the state path inside the bucket.",
                "remarks": "This is only relevant when using a non-default workspace. Defaults to env:"
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.S3Backend(\n  scope: Construct,\n  bucket: str,\n  key: str,\n  access_key: str = None,\n  acl: str = None,\n  assume_role_policy: str = None,\n  assume_role_policy_arns: typing.List[str] = None,\n  assume_role_tags: typing.Mapping[str] = None,\n  assume_role_transitive_tag_keys: typing.List[str] = None,\n  dynamodb_endpoint: str = None,\n  dynamodb_table: str = None,\n  encrypt: bool = None,\n  endpoint: str = None,\n  external_id: str = None,\n  force_path_style: bool = None,\n  iam_endpoint: str = None,\n  kms_key_id: str = None,\n  max_retries: typing.Union[int, float] = None,\n  profile: str = None,\n  region: str = None,\n  role_arn: str = None,\n  secret_key: str = None,\n  session_name: str = None,\n  shared_credentials_file: str = None,\n  skip_credentials_validation: bool = None,\n  skip_metadata_api_check: bool = None,\n  skip_region_validation: bool = None,\n  sse_customer_key: str = None,\n  sts_endpoint: str = None,\n  token: str = None,\n  workspace_key_prefix: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.S3Backend.to_string",
            "displayName": "to_string",
            "id": "cdktf.S3Backend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.S3Backend.add_override",
            "displayName": "add_override",
            "id": "cdktf.S3Backend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.S3Backend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.S3Backend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.S3Backend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.S3Backend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.S3Backend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.S3Backend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.S3Backend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.S3Backend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.S3Backend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.S3Backend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.S3Backend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.S3Backend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.S3Backend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.S3Backend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.S3Backend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.S3Backend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.S3Backend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.S3Backend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.S3Backend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.S3Backend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.S3Backend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.S3Backend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.S3Backend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.S3Backend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.S3Backend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.S3Backend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.S3Backend.property.node",
            "displayName": "node",
            "id": "cdktf.S3Backend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.S3Backend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.S3Backend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.S3Backend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.S3Backend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.S3Backend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.S3Backend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.S3Backend",
        "displayName": "S3Backend",
        "id": "cdktf.S3Backend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.SwiftBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.SwiftBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.SwiftBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.container",
              "displayName": "container",
              "id": "cdktf.SwiftBackend.Initializer.parameter.container",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.application_credential_id",
              "displayName": "application_credential_id",
              "id": "cdktf.SwiftBackend.Initializer.parameter.applicationCredentialId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.application_credential_name",
              "displayName": "application_credential_name",
              "id": "cdktf.SwiftBackend.Initializer.parameter.applicationCredentialName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.application_credential_secret",
              "displayName": "application_credential_secret",
              "id": "cdktf.SwiftBackend.Initializer.parameter.applicationCredentialSecret",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.archive_container",
              "displayName": "archive_container",
              "id": "cdktf.SwiftBackend.Initializer.parameter.archiveContainer",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.auth_url",
              "displayName": "auth_url",
              "id": "cdktf.SwiftBackend.Initializer.parameter.authUrl",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.cacert_file",
              "displayName": "cacert_file",
              "id": "cdktf.SwiftBackend.Initializer.parameter.cacertFile",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.cert",
              "displayName": "cert",
              "id": "cdktf.SwiftBackend.Initializer.parameter.cert",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.cloud",
              "displayName": "cloud",
              "id": "cdktf.SwiftBackend.Initializer.parameter.cloud",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.default_domain",
              "displayName": "default_domain",
              "id": "cdktf.SwiftBackend.Initializer.parameter.defaultDomain",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.domain_id",
              "displayName": "domain_id",
              "id": "cdktf.SwiftBackend.Initializer.parameter.domainId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.domain_name",
              "displayName": "domain_name",
              "id": "cdktf.SwiftBackend.Initializer.parameter.domainName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.expire_after",
              "displayName": "expire_after",
              "id": "cdktf.SwiftBackend.Initializer.parameter.expireAfter",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.insecure",
              "displayName": "insecure",
              "id": "cdktf.SwiftBackend.Initializer.parameter.insecure",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.key",
              "displayName": "key",
              "id": "cdktf.SwiftBackend.Initializer.parameter.key",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.password",
              "displayName": "password",
              "id": "cdktf.SwiftBackend.Initializer.parameter.password",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.project_domain_id",
              "displayName": "project_domain_id",
              "id": "cdktf.SwiftBackend.Initializer.parameter.projectDomainId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.project_domain_name",
              "displayName": "project_domain_name",
              "id": "cdktf.SwiftBackend.Initializer.parameter.projectDomainName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.region_name",
              "displayName": "region_name",
              "id": "cdktf.SwiftBackend.Initializer.parameter.regionName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.state_name",
              "displayName": "state_name",
              "id": "cdktf.SwiftBackend.Initializer.parameter.stateName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.tenant_id",
              "displayName": "tenant_id",
              "id": "cdktf.SwiftBackend.Initializer.parameter.tenantId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.tenant_name",
              "displayName": "tenant_name",
              "id": "cdktf.SwiftBackend.Initializer.parameter.tenantName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.token",
              "displayName": "token",
              "id": "cdktf.SwiftBackend.Initializer.parameter.token",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.user_domain_id",
              "displayName": "user_domain_id",
              "id": "cdktf.SwiftBackend.Initializer.parameter.userDomainId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.user_domain_name",
              "displayName": "user_domain_name",
              "id": "cdktf.SwiftBackend.Initializer.parameter.userDomainName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.user_id",
              "displayName": "user_id",
              "id": "cdktf.SwiftBackend.Initializer.parameter.userId",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.SwiftBackend.Initializer.parameter.user_name",
              "displayName": "user_name",
              "id": "cdktf.SwiftBackend.Initializer.parameter.userName",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.SwiftBackend(\n  scope: Construct,\n  container: str,\n  application_credential_id: str = None,\n  application_credential_name: str = None,\n  application_credential_secret: str = None,\n  archive_container: str = None,\n  auth_url: str = None,\n  cacert_file: str = None,\n  cert: str = None,\n  cloud: str = None,\n  default_domain: str = None,\n  domain_id: str = None,\n  domain_name: str = None,\n  expire_after: str = None,\n  insecure: bool = None,\n  key: str = None,\n  password: str = None,\n  project_domain_id: str = None,\n  project_domain_name: str = None,\n  region_name: str = None,\n  state_name: str = None,\n  tenant_id: str = None,\n  tenant_name: str = None,\n  token: str = None,\n  user_domain_id: str = None,\n  user_domain_name: str = None,\n  user_id: str = None,\n  user_name: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.SwiftBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.SwiftBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.SwiftBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.SwiftBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.SwiftBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.SwiftBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.SwiftBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.SwiftBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.SwiftBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.SwiftBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.SwiftBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.SwiftBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.SwiftBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.SwiftBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.SwiftBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.SwiftBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.SwiftBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.SwiftBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.SwiftBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.SwiftBackend.get_remote_state_data_source.parameter._fromstack",
                "displayName": "_fromstack",
                "id": "cdktf.SwiftBackend.getRemoteStateDataSource.parameter._fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  _fromstack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.SwiftBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.SwiftBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.SwiftBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.SwiftBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.SwiftBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.SwiftBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.SwiftBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.SwiftBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.SwiftBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.SwiftBackend.property.node",
            "displayName": "node",
            "id": "cdktf.SwiftBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.SwiftBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.SwiftBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.SwiftBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.SwiftBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.SwiftBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.SwiftBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.SwiftBackend",
        "displayName": "SwiftBackend",
        "id": "cdktf.SwiftBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformAsset.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformAsset.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformAsset.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformAsset.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformAsset.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformAsset.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformAsset.Initializer.parameter.path",
              "displayName": "path",
              "id": "cdktf.TerraformAsset.Initializer.parameter.path",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformAsset.Initializer.parameter.asset_hash",
              "displayName": "asset_hash",
              "id": "cdktf.TerraformAsset.Initializer.parameter.assetHash",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformAsset.Initializer.parameter.type",
              "displayName": "type",
              "id": "cdktf.TerraformAsset.Initializer.parameter.type",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.AssetType",
                    "displayName": "AssetType",
                    "fqn": "cdktf.AssetType",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformAsset(\n  scope: Construct,\n  id: str,\n  path: str,\n  asset_hash: str = None,\n  type: AssetType = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformAsset.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformAsset.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformAsset.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformAsset.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformAsset.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformAsset.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformAsset.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformAsset.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformAsset.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformAsset.property.file_name",
            "displayName": "file_name",
            "id": "cdktf.TerraformAsset.property.fileName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Name of the asset."
            },
            "usage": "file_name: str"
          },
          {
            "fqn": "cdktf.TerraformAsset.property.path",
            "displayName": "path",
            "id": "cdktf.TerraformAsset.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The path relative to the root of the terraform directory in posix format Use this property to reference the asset."
            },
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.TerraformAsset.property.asset_hash",
            "displayName": "asset_hash",
            "id": "cdktf.TerraformAsset.property.assetHash",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "asset_hash: str"
          },
          {
            "fqn": "cdktf.TerraformAsset.property.type",
            "displayName": "type",
            "id": "cdktf.TerraformAsset.property.type",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AssetType",
                  "displayName": "AssetType",
                  "fqn": "cdktf.AssetType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "type: AssetType"
          }
        ],
        "fqn": "cdktf.TerraformAsset",
        "displayName": "TerraformAsset",
        "id": "cdktf.TerraformAsset",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformBackend.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformBackend.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformBackend.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformBackend.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformBackend.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformBackend.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformBackend.Initializer.parameter.name",
              "displayName": "name",
              "id": "cdktf.TerraformBackend.Initializer.parameter.name",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformBackend(\n  scope: Construct,\n  id: str,\n  name: str\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformBackend.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformBackend.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformBackend.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformBackend.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformBackend.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformBackend.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformBackend.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformBackend.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformBackend.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformBackend.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformBackend.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformBackend.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformBackend.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformBackend.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformBackend.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformBackend.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformBackend.get_remote_state_data_source",
            "displayName": "get_remote_state_data_source",
            "id": "cdktf.TerraformBackend.getRemoteStateDataSource",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.get_remote_state_data_source.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.Construct",
                      "displayName": "Construct",
                      "fqn": "constructs.Construct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformBackend.get_remote_state_data_source.parameter.name",
                "displayName": "name",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformBackend.get_remote_state_data_source.parameter.from_stack",
                "displayName": "from_stack",
                "id": "cdktf.TerraformBackend.getRemoteStateDataSource.parameter.fromStack",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a TerraformRemoteState resource that accesses this backend."
            },
            "usage": "def get_remote_state_data_source(\n  scope: Construct,\n  name: str,\n  from_stack: str\n) -> TerraformRemoteState"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformBackend.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformBackend.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformBackend.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformBackend.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.TerraformBackend.is_backend",
            "displayName": "is_backend",
            "id": "cdktf.TerraformBackend.isBackend",
            "parameters": [
              {
                "fqn": "cdktf.TerraformBackend.is_backend.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformBackend.isBackend.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.TerraformBackend.is_backend(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformBackend.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformBackend.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformBackend.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformBackend.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformBackend.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformBackend.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformBackend.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformBackend.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.TerraformBackend",
        "displayName": "TerraformBackend",
        "id": "cdktf.TerraformBackend",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformDataSource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformDataSource.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.connection",
              "displayName": "connection",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.connection",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[%, %]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.SSHProvisionerConnection",
                        "displayName": "SSHProvisionerConnection",
                        "fqn": "cdktf.SSHProvisionerConnection",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.WinrmProvisionerConnection",
                        "displayName": "WinrmProvisionerConnection",
                        "fqn": "cdktf.WinrmProvisionerConnection",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.count",
              "displayName": "count",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.count",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.depends_on",
              "displayName": "depends_on",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.dependsOn",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ITerraformDependable",
                        "displayName": "ITerraformDependable",
                        "fqn": "cdktf.ITerraformDependable",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.for_each",
              "displayName": "for_each",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.forEach",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.ITerraformIterator",
                    "displayName": "ITerraformIterator",
                    "fqn": "cdktf.ITerraformIterator",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.lifecycle",
              "displayName": "lifecycle",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.lifecycle",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformResourceLifecycle",
                    "displayName": "TerraformResourceLifecycle",
                    "fqn": "cdktf.TerraformResourceLifecycle",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.provider",
              "displayName": "provider",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.provider",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformProvider",
                    "displayName": "TerraformProvider",
                    "fqn": "cdktf.TerraformProvider",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.provisioners",
              "displayName": "provisioners",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.provisioners",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Union[%, %, %]",
                    "types": [
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.FileProvisioner",
                            "displayName": "FileProvisioner",
                            "fqn": "cdktf.FileProvisioner",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      },
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.LocalExecProvisioner",
                            "displayName": "LocalExecProvisioner",
                            "fqn": "cdktf.LocalExecProvisioner",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      },
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.RemoteExecProvisioner",
                            "displayName": "RemoteExecProvisioner",
                            "fqn": "cdktf.RemoteExecProvisioner",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.terraform_resource_type",
              "displayName": "terraform_resource_type",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.terraformResourceType",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformDataSource.Initializer.parameter.terraform_generator_metadata",
              "displayName": "terraform_generator_metadata",
              "id": "cdktf.TerraformDataSource.Initializer.parameter.terraformGeneratorMetadata",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformProviderGeneratorMetadata",
                    "displayName": "TerraformProviderGeneratorMetadata",
                    "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformDataSource(\n  scope: Construct,\n  id: str,\n  connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection] = None,\n  count: typing.Union[int, float] = None,\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  lifecycle: TerraformResourceLifecycle = None,\n  provider: TerraformProvider = None,\n  provisioners: typing.List[typing.Union[FileProvisioner, LocalExecProvisioner, RemoteExecProvisioner]] = None,\n  terraform_resource_type: str,\n  terraform_generator_metadata: TerraformProviderGeneratorMetadata = None\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformDataSource.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformDataSource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformDataSource.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformDataSource.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformDataSource.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformDataSource.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformDataSource.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformDataSource.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformDataSource.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformDataSource.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformDataSource.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformDataSource.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformDataSource.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformDataSource.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformDataSource.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformDataSource.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_any_map_attribute",
            "displayName": "get_any_map_attribute",
            "id": "cdktf.TerraformDataSource.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_any_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_any_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_boolean_attribute",
            "displayName": "get_boolean_attribute",
            "id": "cdktf.TerraformDataSource.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_boolean_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean_attribute(\n  terraform_attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_boolean_map_attribute",
            "displayName": "get_boolean_map_attribute",
            "id": "cdktf.TerraformDataSource.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_boolean_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[bool]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_list_attribute",
            "displayName": "get_list_attribute",
            "id": "cdktf.TerraformDataSource.getListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_list_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list_attribute(\n  terraform_attribute: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_number_attribute",
            "displayName": "get_number_attribute",
            "id": "cdktf.TerraformDataSource.getNumberAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_number_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_attribute(\n  terraform_attribute: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_number_list_attribute",
            "displayName": "get_number_list_attribute",
            "id": "cdktf.TerraformDataSource.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_number_list_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_list_attribute(\n  terraform_attribute: str\n) -> typing.List[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_number_map_attribute",
            "displayName": "get_number_map_attribute",
            "id": "cdktf.TerraformDataSource.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_number_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_string_attribute",
            "displayName": "get_string_attribute",
            "id": "cdktf.TerraformDataSource.getStringAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_string_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string_attribute(\n  terraform_attribute: str\n) -> str"
          },
          {
            "fqn": "cdktf.TerraformDataSource.get_string_map_attribute",
            "displayName": "get_string_map_attribute",
            "id": "cdktf.TerraformDataSource.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.get_string_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[str]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.TerraformDataSource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.interpolation_for_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformDataSource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  terraform_attribute: str\n) -> IResolvable"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformDataSource.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformDataSource.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformDataSource.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformDataSource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformDataSource.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformDataSource.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformDataSource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformDataSource.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformDataSource.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformDataSource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.terraform_meta_arguments",
            "displayName": "terraform_meta_arguments",
            "id": "cdktf.TerraformDataSource.property.terraformMetaArguments",
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "terraform_meta_arguments: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.terraform_resource_type",
            "displayName": "terraform_resource_type",
            "id": "cdktf.TerraformDataSource.property.terraformResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "terraform_resource_type: str"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.terraform_generator_metadata",
            "displayName": "terraform_generator_metadata",
            "id": "cdktf.TerraformDataSource.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "terraform_generator_metadata: TerraformProviderGeneratorMetadata"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.count",
            "displayName": "count",
            "id": "cdktf.TerraformDataSource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {},
            "usage": "count: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformDataSource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformDataSource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.TerraformDataSource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "lifecycle: TerraformResourceLifecycle"
          },
          {
            "fqn": "cdktf.TerraformDataSource.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformDataSource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "provider: TerraformProvider"
          }
        ],
        "fqn": "cdktf.TerraformDataSource",
        "displayName": "TerraformDataSource",
        "id": "cdktf.TerraformDataSource",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformElement.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformElement.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformElement.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformElement.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformElement.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformElement.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformElement.Initializer.parameter.element_type",
              "displayName": "element_type",
              "id": "cdktf.TerraformElement.Initializer.parameter.elementType",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformElement(\n  scope: Construct,\n  id: str,\n  element_type: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformElement.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformElement.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformElement.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformElement.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformElement.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformElement.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformElement.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformElement.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformElement.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformElement.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformElement.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformElement.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformElement.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformElement.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformElement.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformElement.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformElement.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformElement.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformElement.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformElement.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformElement.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformElement.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformElement.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformElement.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformElement.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformElement.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformElement.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformElement.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformElement.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformElement.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformElement.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.TerraformElement",
        "displayName": "TerraformElement",
        "id": "cdktf.TerraformElement",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformHclModule.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformHclModule.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.depends_on",
              "displayName": "depends_on",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.dependsOn",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ITerraformDependable",
                        "displayName": "ITerraformDependable",
                        "fqn": "cdktf.ITerraformDependable",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.for_each",
              "displayName": "for_each",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.forEach",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.ITerraformIterator",
                    "displayName": "ITerraformIterator",
                    "fqn": "cdktf.ITerraformIterator",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.providers",
              "displayName": "providers",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.providers",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Union[%, %]",
                    "types": [
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.TerraformProvider",
                            "displayName": "TerraformProvider",
                            "fqn": "cdktf.TerraformProvider",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      },
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.TerraformModuleProvider",
                            "displayName": "TerraformModuleProvider",
                            "fqn": "cdktf.TerraformModuleProvider",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.skip_asset_creation_from_local_modules",
              "displayName": "skip_asset_creation_from_local_modules",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.skipAssetCreationFromLocalModules",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.source",
              "displayName": "source",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.source",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.version",
              "displayName": "version",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.version",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformHclModule.Initializer.parameter.variables",
              "displayName": "variables",
              "id": "cdktf.TerraformHclModule.Initializer.parameter.variables",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformHclModule(\n  scope: Construct,\n  id: str,\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]] = None,\n  skip_asset_creation_from_local_modules: bool = None,\n  source: str,\n  version: str = None,\n  variables: typing.Mapping[typing.Any] = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformHclModule.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformHclModule.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformHclModule.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformHclModule.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformHclModule.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformHclModule.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformHclModule.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformHclModule.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformHclModule.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformHclModule.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformHclModule.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformHclModule.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformHclModule.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformHclModule.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformHclModule.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformHclModule.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformHclModule.add_provider",
            "displayName": "add_provider",
            "id": "cdktf.TerraformHclModule.addProvider",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.add_provider.parameter.provider",
                "displayName": "provider",
                "id": "cdktf.TerraformHclModule.addProvider.parameter.provider",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_provider(\n  provider: typing.Union[TerraformProvider, TerraformModuleProvider]\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformHclModule.get_string",
            "displayName": "get_string",
            "id": "cdktf.TerraformHclModule.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          },
          {
            "fqn": "cdktf.TerraformHclModule.interpolation_for_output",
            "displayName": "interpolation_for_output",
            "id": "cdktf.TerraformHclModule.interpolationForOutput",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.interpolation_for_output.parameter.module_output",
                "displayName": "module_output",
                "id": "cdktf.TerraformHclModule.interpolationForOutput.parameter.moduleOutput",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_output(\n  module_output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformHclModule.get",
            "displayName": "get",
            "id": "cdktf.TerraformHclModule.get",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformHclModule.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.TerraformHclModule.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformHclModule.get_list",
            "displayName": "get_list",
            "id": "cdktf.TerraformHclModule.getList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformHclModule.get_number",
            "displayName": "get_number",
            "id": "cdktf.TerraformHclModule.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformHclModule.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformHclModule.set",
            "displayName": "set",
            "id": "cdktf.TerraformHclModule.set",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.set.parameter.variable",
                "displayName": "variable",
                "id": "cdktf.TerraformHclModule.set.parameter.variable",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformHclModule.set.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformHclModule.set.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def set(\n  variable: str,\n  value: typing.Any\n) -> None"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformHclModule.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformHclModule.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformHclModule.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformHclModule.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformHclModule.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformHclModule.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformHclModule.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformHclModule.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformHclModule.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformHclModule.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.source",
            "displayName": "source",
            "id": "cdktf.TerraformHclModule.property.source",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "source: str"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformHclModule.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]]"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.skip_asset_creation_from_local_modules",
            "displayName": "skip_asset_creation_from_local_modules",
            "id": "cdktf.TerraformHclModule.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "skip_asset_creation_from_local_modules: bool"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformHclModule.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "version: str"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformHclModule.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformHclModule.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.TerraformHclModule.property.variables",
            "displayName": "variables",
            "id": "cdktf.TerraformHclModule.property.variables",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "variables: typing.Mapping[typing.Any]"
          }
        ],
        "fqn": "cdktf.TerraformHclModule",
        "displayName": "TerraformHclModule",
        "id": "cdktf.TerraformHclModule",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformLocal.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformLocal.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformLocal.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformLocal.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformLocal.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformLocal.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformLocal.Initializer.parameter.expression",
              "displayName": "expression",
              "id": "cdktf.TerraformLocal.Initializer.parameter.expression",
              "type": {
                "formattingPattern": "typing.Any"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformLocal(\n  scope: Construct,\n  id: str,\n  expression: typing.Any\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformLocal.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformLocal.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformLocal.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformLocal.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformLocal.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformLocal.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformLocal.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformLocal.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformLocal.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformLocal.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformLocal.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformLocal.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformLocal.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformLocal.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformLocal.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformLocal.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformLocal.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformLocal.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformLocal.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformLocal.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformLocal.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformLocal.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformLocal.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformLocal.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformLocal.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformLocal.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformLocal.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformLocal.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.as_boolean",
            "displayName": "as_boolean",
            "id": "cdktf.TerraformLocal.property.asBoolean",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "as_boolean: IResolvable"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.as_list",
            "displayName": "as_list",
            "id": "cdktf.TerraformLocal.property.asList",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "as_list: typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.as_number",
            "displayName": "as_number",
            "id": "cdktf.TerraformLocal.property.asNumber",
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {},
            "usage": "as_number: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.as_string",
            "displayName": "as_string",
            "id": "cdktf.TerraformLocal.property.asString",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "as_string: str"
          },
          {
            "fqn": "cdktf.TerraformLocal.property.expression",
            "displayName": "expression",
            "id": "cdktf.TerraformLocal.property.expression",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {},
            "usage": "expression: typing.Any"
          }
        ],
        "fqn": "cdktf.TerraformLocal",
        "displayName": "TerraformLocal",
        "id": "cdktf.TerraformLocal",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformModule.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformModule.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformModule.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformModule.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.depends_on",
              "displayName": "depends_on",
              "id": "cdktf.TerraformModule.Initializer.parameter.dependsOn",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ITerraformDependable",
                        "displayName": "ITerraformDependable",
                        "fqn": "cdktf.ITerraformDependable",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.for_each",
              "displayName": "for_each",
              "id": "cdktf.TerraformModule.Initializer.parameter.forEach",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.ITerraformIterator",
                    "displayName": "ITerraformIterator",
                    "fqn": "cdktf.ITerraformIterator",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.providers",
              "displayName": "providers",
              "id": "cdktf.TerraformModule.Initializer.parameter.providers",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Union[%, %]",
                    "types": [
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.TerraformProvider",
                            "displayName": "TerraformProvider",
                            "fqn": "cdktf.TerraformProvider",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      },
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.TerraformModuleProvider",
                            "displayName": "TerraformModuleProvider",
                            "fqn": "cdktf.TerraformModuleProvider",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.skip_asset_creation_from_local_modules",
              "displayName": "skip_asset_creation_from_local_modules",
              "id": "cdktf.TerraformModule.Initializer.parameter.skipAssetCreationFromLocalModules",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.source",
              "displayName": "source",
              "id": "cdktf.TerraformModule.Initializer.parameter.source",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformModule.Initializer.parameter.version",
              "displayName": "version",
              "id": "cdktf.TerraformModule.Initializer.parameter.version",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformModule(\n  scope: Construct,\n  id: str,\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]] = None,\n  skip_asset_creation_from_local_modules: bool = None,\n  source: str,\n  version: str = None\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformModule.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformModule.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformModule.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformModule.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformModule.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformModule.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformModule.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformModule.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformModule.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformModule.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformModule.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformModule.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformModule.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformModule.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformModule.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformModule.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformModule.add_provider",
            "displayName": "add_provider",
            "id": "cdktf.TerraformModule.addProvider",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.add_provider.parameter.provider",
                "displayName": "provider",
                "id": "cdktf.TerraformModule.addProvider.parameter.provider",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_provider(\n  provider: typing.Union[TerraformProvider, TerraformModuleProvider]\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformModule.get_string",
            "displayName": "get_string",
            "id": "cdktf.TerraformModule.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformModule.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          },
          {
            "fqn": "cdktf.TerraformModule.interpolation_for_output",
            "displayName": "interpolation_for_output",
            "id": "cdktf.TerraformModule.interpolationForOutput",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.interpolation_for_output.parameter.module_output",
                "displayName": "module_output",
                "id": "cdktf.TerraformModule.interpolationForOutput.parameter.moduleOutput",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_output(\n  module_output: str\n) -> IResolvable"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformModule.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformModule.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformModule.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformModule.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformModule.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformModule.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformModule.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformModule.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformModule.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformModule.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformModule.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformModule.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformModule.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.TerraformModule.property.source",
            "displayName": "source",
            "id": "cdktf.TerraformModule.property.source",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "source: str"
          },
          {
            "fqn": "cdktf.TerraformModule.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformModule.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]]"
          },
          {
            "fqn": "cdktf.TerraformModule.property.skip_asset_creation_from_local_modules",
            "displayName": "skip_asset_creation_from_local_modules",
            "id": "cdktf.TerraformModule.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "skip_asset_creation_from_local_modules: bool"
          },
          {
            "fqn": "cdktf.TerraformModule.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformModule.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "version: str"
          },
          {
            "fqn": "cdktf.TerraformModule.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformModule.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformModule.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformModule.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          }
        ],
        "fqn": "cdktf.TerraformModule",
        "displayName": "TerraformModule",
        "id": "cdktf.TerraformModule",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformOutput.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformOutput.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformOutput.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformOutput.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.value",
              "displayName": "value",
              "id": "cdktf.TerraformOutput.Initializer.parameter.value",
              "type": {
                "formattingPattern": "typing.Any"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.depends_on",
              "displayName": "depends_on",
              "id": "cdktf.TerraformOutput.Initializer.parameter.dependsOn",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ITerraformDependable",
                        "displayName": "ITerraformDependable",
                        "fqn": "cdktf.ITerraformDependable",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.description",
              "displayName": "description",
              "id": "cdktf.TerraformOutput.Initializer.parameter.description",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.sensitive",
              "displayName": "sensitive",
              "id": "cdktf.TerraformOutput.Initializer.parameter.sensitive",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformOutput.Initializer.parameter.static_id",
              "displayName": "static_id",
              "id": "cdktf.TerraformOutput.Initializer.parameter.staticId",
              "optional": true,
              "default": "false",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "If set to true the synthesized Terraform Output will be named after the `id` passed to the constructor instead of the default (TerraformOutput.friendlyUniqueId)."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformOutput(\n  scope: Construct,\n  id: str,\n  value: typing.Any,\n  depends_on: typing.List[ITerraformDependable] = None,\n  description: str = None,\n  sensitive: bool = None,\n  static_id: bool = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformOutput.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformOutput.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformOutput.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformOutput.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformOutput.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformOutput.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformOutput.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformOutput.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformOutput.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformOutput.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformOutput.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformOutput.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformOutput.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformOutput.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformOutput.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformOutput.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformOutput.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformOutput.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformOutput.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformOutput.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformOutput.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformOutput.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformOutput.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.TerraformOutput.is_terrafrom_output",
            "displayName": "is_terrafrom_output",
            "id": "cdktf.TerraformOutput.isTerrafromOutput",
            "parameters": [
              {
                "fqn": "cdktf.TerraformOutput.is_terrafrom_output.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformOutput.isTerrafromOutput.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.TerraformOutput.is_terrafrom_output(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformOutput.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformOutput.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformOutput.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformOutput.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformOutput.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.static_id",
            "displayName": "static_id",
            "id": "cdktf.TerraformOutput.property.staticId",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "static_id: bool"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.value",
            "displayName": "value",
            "id": "cdktf.TerraformOutput.property.value",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {},
            "usage": "value: typing.Any"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformOutput.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[ITerraformDependable]"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.description",
            "displayName": "description",
            "id": "cdktf.TerraformOutput.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "description: str"
          },
          {
            "fqn": "cdktf.TerraformOutput.property.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.TerraformOutput.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "sensitive: bool"
          }
        ],
        "fqn": "cdktf.TerraformOutput",
        "displayName": "TerraformOutput",
        "id": "cdktf.TerraformOutput",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformProvider.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformProvider.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformProvider.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformProvider.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformProvider.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformProvider.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformProvider.Initializer.parameter.terraform_resource_type",
              "displayName": "terraform_resource_type",
              "id": "cdktf.TerraformProvider.Initializer.parameter.terraformResourceType",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformProvider.Initializer.parameter.terraform_generator_metadata",
              "displayName": "terraform_generator_metadata",
              "id": "cdktf.TerraformProvider.Initializer.parameter.terraformGeneratorMetadata",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformProviderGeneratorMetadata",
                    "displayName": "TerraformProviderGeneratorMetadata",
                    "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformProvider.Initializer.parameter.terraform_provider_source",
              "displayName": "terraform_provider_source",
              "id": "cdktf.TerraformProvider.Initializer.parameter.terraformProviderSource",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformProvider(\n  scope: Construct,\n  id: str,\n  terraform_resource_type: str,\n  terraform_generator_metadata: TerraformProviderGeneratorMetadata = None,\n  terraform_provider_source: str = None\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformProvider.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformProvider.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformProvider.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformProvider.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformProvider.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformProvider.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformProvider.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformProvider.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformProvider.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformProvider.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformProvider.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformProvider.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformProvider.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformProvider.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformProvider.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformProvider.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformProvider.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformProvider.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformProvider.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformProvider.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformProvider.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformProvider.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformProvider.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformProvider.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformProvider.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformProvider.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformProvider.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformProvider.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.meta_attributes",
            "displayName": "meta_attributes",
            "id": "cdktf.TerraformProvider.property.metaAttributes",
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "meta_attributes: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.terraform_resource_type",
            "displayName": "terraform_resource_type",
            "id": "cdktf.TerraformProvider.property.terraformResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "terraform_resource_type: str"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.terraform_generator_metadata",
            "displayName": "terraform_generator_metadata",
            "id": "cdktf.TerraformProvider.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "terraform_generator_metadata: TerraformProviderGeneratorMetadata"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.terraform_provider_source",
            "displayName": "terraform_provider_source",
            "id": "cdktf.TerraformProvider.property.terraformProviderSource",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "terraform_provider_source: str"
          },
          {
            "fqn": "cdktf.TerraformProvider.property.alias",
            "displayName": "alias",
            "id": "cdktf.TerraformProvider.property.alias",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "alias: str"
          }
        ],
        "fqn": "cdktf.TerraformProvider",
        "displayName": "TerraformProvider",
        "id": "cdktf.TerraformProvider",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformRemoteState.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformRemoteState.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.backend",
              "displayName": "backend",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.backend",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.defaults",
              "displayName": "defaults",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.defaults",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Mapping[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Any"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformRemoteState.Initializer.parameter.workspace",
              "displayName": "workspace",
              "id": "cdktf.TerraformRemoteState.Initializer.parameter.workspace",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformRemoteState(\n  scope: Construct,\n  id: str,\n  backend: str,\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformRemoteState.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformRemoteState.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformRemoteState.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformRemoteState.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformRemoteState.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformRemoteState.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformRemoteState.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformRemoteState.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformRemoteState.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformRemoteState.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformRemoteState.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.get",
            "displayName": "get",
            "id": "cdktf.TerraformRemoteState.get",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.get.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.get.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.TerraformRemoteState.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.get_boolean.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.getBoolean.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  output: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.get_list",
            "displayName": "get_list",
            "id": "cdktf.TerraformRemoteState.getList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.get_list.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.getList.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  output: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.get_number",
            "displayName": "get_number",
            "id": "cdktf.TerraformRemoteState.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.get_number.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.getNumber.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  output: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.get_string",
            "displayName": "get_string",
            "id": "cdktf.TerraformRemoteState.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.get_string.parameter.output",
                "displayName": "output",
                "id": "cdktf.TerraformRemoteState.getString.parameter.output",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  output: str\n) -> str"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformRemoteState.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformRemoteState.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformRemoteState.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformRemoteState.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformRemoteState.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.TerraformRemoteState.property.tfResourceType",
            "displayName": "tfResourceType",
            "id": "cdktf.TerraformRemoteState.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tfResourceType: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.TerraformRemoteState.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformRemoteState.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformRemoteState.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformRemoteState.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformRemoteState.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformRemoteState.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          }
        ],
        "fqn": "cdktf.TerraformRemoteState",
        "displayName": "TerraformRemoteState",
        "id": "cdktf.TerraformRemoteState",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformResource.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformResource.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformResource.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformResource.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.connection",
              "displayName": "connection",
              "id": "cdktf.TerraformResource.Initializer.parameter.connection",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[%, %]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.SSHProvisionerConnection",
                        "displayName": "SSHProvisionerConnection",
                        "fqn": "cdktf.SSHProvisionerConnection",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.WinrmProvisionerConnection",
                        "displayName": "WinrmProvisionerConnection",
                        "fqn": "cdktf.WinrmProvisionerConnection",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.count",
              "displayName": "count",
              "id": "cdktf.TerraformResource.Initializer.parameter.count",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[int, float]"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.depends_on",
              "displayName": "depends_on",
              "id": "cdktf.TerraformResource.Initializer.parameter.dependsOn",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ITerraformDependable",
                        "displayName": "ITerraformDependable",
                        "fqn": "cdktf.ITerraformDependable",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.for_each",
              "displayName": "for_each",
              "id": "cdktf.TerraformResource.Initializer.parameter.forEach",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.ITerraformIterator",
                    "displayName": "ITerraformIterator",
                    "fqn": "cdktf.ITerraformIterator",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.lifecycle",
              "displayName": "lifecycle",
              "id": "cdktf.TerraformResource.Initializer.parameter.lifecycle",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformResourceLifecycle",
                    "displayName": "TerraformResourceLifecycle",
                    "fqn": "cdktf.TerraformResourceLifecycle",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.provider",
              "displayName": "provider",
              "id": "cdktf.TerraformResource.Initializer.parameter.provider",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformProvider",
                    "displayName": "TerraformProvider",
                    "fqn": "cdktf.TerraformProvider",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.provisioners",
              "displayName": "provisioners",
              "id": "cdktf.TerraformResource.Initializer.parameter.provisioners",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "typing.Union[%, %, %]",
                    "types": [
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.FileProvisioner",
                            "displayName": "FileProvisioner",
                            "fqn": "cdktf.FileProvisioner",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      },
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.LocalExecProvisioner",
                            "displayName": "LocalExecProvisioner",
                            "fqn": "cdktf.LocalExecProvisioner",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      },
                      {
                        "formattingPattern": "%",
                        "types": [
                          {
                            "id": "cdktf.RemoteExecProvisioner",
                            "displayName": "RemoteExecProvisioner",
                            "fqn": "cdktf.RemoteExecProvisioner",
                            "packageName": "cdktf",
                            "packageVersion": "0.0.0"
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.terraform_resource_type",
              "displayName": "terraform_resource_type",
              "id": "cdktf.TerraformResource.Initializer.parameter.terraformResourceType",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformResource.Initializer.parameter.terraform_generator_metadata",
              "displayName": "terraform_generator_metadata",
              "id": "cdktf.TerraformResource.Initializer.parameter.terraformGeneratorMetadata",
              "optional": true,
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.TerraformProviderGeneratorMetadata",
                    "displayName": "TerraformProviderGeneratorMetadata",
                    "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformResource(\n  scope: Construct,\n  id: str,\n  connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection] = None,\n  count: typing.Union[int, float] = None,\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  lifecycle: TerraformResourceLifecycle = None,\n  provider: TerraformProvider = None,\n  provisioners: typing.List[typing.Union[FileProvisioner, LocalExecProvisioner, RemoteExecProvisioner]] = None,\n  terraform_resource_type: str,\n  terraform_generator_metadata: TerraformProviderGeneratorMetadata = None\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformResource.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformResource.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformResource.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformResource.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformResource.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformResource.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformResource.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformResource.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformResource.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformResource.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformResource.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformResource.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformResource.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformResource.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformResource.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformResource.toTerraform",
            "parameters": [],
            "docs": {
              "summary": "Adds this resource to the terraform JSON output."
            },
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformResource.get_any_map_attribute",
            "displayName": "get_any_map_attribute",
            "id": "cdktf.TerraformResource.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_any_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_any_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.TerraformResource.get_boolean_attribute",
            "displayName": "get_boolean_attribute",
            "id": "cdktf.TerraformResource.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_boolean_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean_attribute(\n  terraform_attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformResource.get_boolean_map_attribute",
            "displayName": "get_boolean_map_attribute",
            "id": "cdktf.TerraformResource.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_boolean_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[bool]"
          },
          {
            "fqn": "cdktf.TerraformResource.get_list_attribute",
            "displayName": "get_list_attribute",
            "id": "cdktf.TerraformResource.getListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_list_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list_attribute(\n  terraform_attribute: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformResource.get_number_attribute",
            "displayName": "get_number_attribute",
            "id": "cdktf.TerraformResource.getNumberAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_number_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_attribute(\n  terraform_attribute: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformResource.get_number_list_attribute",
            "displayName": "get_number_list_attribute",
            "id": "cdktf.TerraformResource.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_number_list_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_list_attribute(\n  terraform_attribute: str\n) -> typing.List[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.TerraformResource.get_number_map_attribute",
            "displayName": "get_number_map_attribute",
            "id": "cdktf.TerraformResource.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_number_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.TerraformResource.get_string_attribute",
            "displayName": "get_string_attribute",
            "id": "cdktf.TerraformResource.getStringAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_string_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string_attribute(\n  terraform_attribute: str\n) -> str"
          },
          {
            "fqn": "cdktf.TerraformResource.get_string_map_attribute",
            "displayName": "get_string_map_attribute",
            "id": "cdktf.TerraformResource.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.get_string_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[str]"
          },
          {
            "fqn": "cdktf.TerraformResource.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.TerraformResource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.interpolation_for_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.TerraformResource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  terraform_attribute: str\n) -> IResolvable"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformResource.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformResource.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformResource.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformResource.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformResource.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformResource.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformResource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformResource.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformResource.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformResource.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformResource.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformResource.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformResource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.TerraformResource.property.terraform_meta_arguments",
            "displayName": "terraform_meta_arguments",
            "id": "cdktf.TerraformResource.property.terraformMetaArguments",
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "terraform_meta_arguments: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.TerraformResource.property.terraform_resource_type",
            "displayName": "terraform_resource_type",
            "id": "cdktf.TerraformResource.property.terraformResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "terraform_resource_type: str"
          },
          {
            "fqn": "cdktf.TerraformResource.property.terraform_generator_metadata",
            "displayName": "terraform_generator_metadata",
            "id": "cdktf.TerraformResource.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "terraform_generator_metadata: TerraformProviderGeneratorMetadata"
          },
          {
            "fqn": "cdktf.TerraformResource.property.connection",
            "displayName": "connection",
            "id": "cdktf.TerraformResource.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[%, %]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection]"
          },
          {
            "fqn": "cdktf.TerraformResource.property.count",
            "displayName": "count",
            "id": "cdktf.TerraformResource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {},
            "usage": "count: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformResource.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformResource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformResource.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformResource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.TerraformResource.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.TerraformResource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "lifecycle: TerraformResourceLifecycle"
          },
          {
            "fqn": "cdktf.TerraformResource.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformResource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "provider: TerraformProvider"
          },
          {
            "fqn": "cdktf.TerraformResource.property.provisioners",
            "displayName": "provisioners",
            "id": "cdktf.TerraformResource.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "provisioners: typing.List[typing.Union[FileProvisioner, LocalExecProvisioner, RemoteExecProvisioner]]"
          }
        ],
        "fqn": "cdktf.TerraformResource",
        "displayName": "TerraformResource",
        "id": "cdktf.TerraformResource",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformStack.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformStack.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformStack.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformStack.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformStack.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformStack.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformStack(\n  scope: Construct,\n  id: str\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformStack.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformStack.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformStack.add_dependency",
            "displayName": "add_dependency",
            "id": "cdktf.TerraformStack.addDependency",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.add_dependency.parameter.dependency",
                "displayName": "dependency",
                "id": "cdktf.TerraformStack.addDependency.parameter.dependency",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_dependency(\n  dependency: TerraformStack\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformStack.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformStack.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformStack.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformStack.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformStack.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformStack.all_providers",
            "displayName": "all_providers",
            "id": "cdktf.TerraformStack.allProviders",
            "parameters": [],
            "docs": {},
            "usage": "def all_providers() -> typing.List[TerraformProvider]"
          },
          {
            "fqn": "cdktf.TerraformStack.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformStack.dependsOn",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.depends_on.parameter.stack",
                "displayName": "stack",
                "id": "cdktf.TerraformStack.dependsOn.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def depends_on(\n  stack: TerraformStack\n) -> bool"
          },
          {
            "fqn": "cdktf.TerraformStack.ensure_backend_exists",
            "displayName": "ensure_backend_exists",
            "id": "cdktf.TerraformStack.ensureBackendExists",
            "parameters": [],
            "docs": {},
            "usage": "def ensure_backend_exists() -> TerraformBackend"
          },
          {
            "fqn": "cdktf.TerraformStack.get_logical_id",
            "displayName": "get_logical_id",
            "id": "cdktf.TerraformStack.getLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.get_logical_id.parameter.tf_element",
                "displayName": "tf_element",
                "id": "cdktf.TerraformStack.getLogicalId.parameter.tfElement",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformElement",
                          "displayName": "TerraformElement",
                          "fqn": "cdktf.TerraformElement",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "constructs.Node",
                          "displayName": "Node",
                          "fqn": "constructs.Node",
                          "packageName": "constructs",
                          "packageVersion": "10.1.45"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_logical_id(\n  tf_element: typing.Union[TerraformElement, Node]\n) -> str"
          },
          {
            "fqn": "cdktf.TerraformStack.prepare_stack",
            "displayName": "prepare_stack",
            "id": "cdktf.TerraformStack.prepareStack",
            "parameters": [],
            "docs": {},
            "usage": "def prepare_stack() -> None"
          },
          {
            "fqn": "cdktf.TerraformStack.register_incoming_cross_stack_reference",
            "displayName": "register_incoming_cross_stack_reference",
            "id": "cdktf.TerraformStack.registerIncomingCrossStackReference",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.register_incoming_cross_stack_reference.parameter.from_stack",
                "displayName": "from_stack",
                "id": "cdktf.TerraformStack.registerIncomingCrossStackReference.parameter.fromStack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def register_incoming_cross_stack_reference(\n  from_stack: TerraformStack\n) -> TerraformRemoteState"
          },
          {
            "fqn": "cdktf.TerraformStack.register_outgoing_cross_stack_reference",
            "displayName": "register_outgoing_cross_stack_reference",
            "id": "cdktf.TerraformStack.registerOutgoingCrossStackReference",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.register_outgoing_cross_stack_reference.parameter.identifier",
                "displayName": "identifier",
                "id": "cdktf.TerraformStack.registerOutgoingCrossStackReference.parameter.identifier",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def register_outgoing_cross_stack_reference(\n  identifier: str\n) -> TerraformOutput"
          },
          {
            "fqn": "cdktf.TerraformStack.run_all_validations",
            "displayName": "run_all_validations",
            "id": "cdktf.TerraformStack.runAllValidations",
            "parameters": [],
            "docs": {
              "summary": "Run all validations on the stack."
            },
            "usage": "def run_all_validations() -> None"
          },
          {
            "fqn": "cdktf.TerraformStack.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformStack.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformStack.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformStack.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformStack.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformStack.is_construct(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.TerraformStack.is_stack",
            "displayName": "is_stack",
            "id": "cdktf.TerraformStack.isStack",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.is_stack.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformStack.isStack.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.TerraformStack.is_stack(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.TerraformStack.of",
            "displayName": "of",
            "id": "cdktf.TerraformStack.of",
            "parameters": [
              {
                "fqn": "cdktf.TerraformStack.of.parameter.construct",
                "displayName": "construct",
                "id": "cdktf.TerraformStack.of.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.TerraformStack.of(\n  construct: IConstruct\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformStack.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformStack.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformStack.property.dependencies",
            "displayName": "dependencies",
            "id": "cdktf.TerraformStack.property.dependencies",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "dependencies: typing.List[TerraformStack]"
          },
          {
            "fqn": "cdktf.TerraformStack.property.synthesizer",
            "displayName": "synthesizer",
            "id": "cdktf.TerraformStack.property.synthesizer",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IStackSynthesizer",
                  "displayName": "IStackSynthesizer",
                  "fqn": "cdktf.IStackSynthesizer",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "synthesizer: IStackSynthesizer"
          }
        ],
        "fqn": "cdktf.TerraformStack",
        "displayName": "TerraformStack",
        "id": "cdktf.TerraformStack",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformVariable.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformVariable.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.scope",
              "displayName": "scope",
              "id": "cdktf.TerraformVariable.Initializer.parameter.scope",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "constructs.Construct",
                    "displayName": "Construct",
                    "fqn": "constructs.Construct",
                    "packageName": "constructs",
                    "packageVersion": "10.1.45"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.id",
              "displayName": "id",
              "id": "cdktf.TerraformVariable.Initializer.parameter.id",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.default",
              "displayName": "default",
              "id": "cdktf.TerraformVariable.Initializer.parameter.default",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Any"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.description",
              "displayName": "description",
              "id": "cdktf.TerraformVariable.Initializer.parameter.description",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.nullable",
              "displayName": "nullable",
              "id": "cdktf.TerraformVariable.Initializer.parameter.nullable",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.sensitive",
              "displayName": "sensitive",
              "id": "cdktf.TerraformVariable.Initializer.parameter.sensitive",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.type",
              "displayName": "type",
              "id": "cdktf.TerraformVariable.Initializer.parameter.type",
              "optional": true,
              "type": {
                "formattingPattern": "str"
              },
              "docs": {
                "summary": "The type argument in a variable block allows you to restrict the type of value that will be accepted as the value for a variable.",
                "remarks": "If no type constraint is set then a value of any type is accepted.\n\nWhile type constraints are optional, we recommend specifying them; they serve as easy reminders for users of the module, and allow Terraform to return a helpful error message if the wrong type is used.\n\nType constraints are created from a mixture of type keywords and type constructors. The supported type keywords are:\n\n* string\n* number\n* bool\n\nThe type constructors allow you to specify complex types such as collections:\n\n* list(<TYPE>)\n* set(<TYPE>)\n* map(<TYPE>)\n* object({<ATTR NAME> = <TYPE>, ... })\n* tuple([<TYPE>, ...])\n\nThe keyword any may be used to indicate that any type is acceptable. For more information on the meaning and behavior of these different types, as well as detailed information about automatic conversion of complex types, see {@link https://www.terraform.io/docs/configuration/types.html|Type Constraints}.\n\nIf both the type and default arguments are specified, the given default value must be convertible to the specified type."
              }
            },
            {
              "fqn": "cdktf.TerraformVariable.Initializer.parameter.validation",
              "displayName": "validation",
              "id": "cdktf.TerraformVariable.Initializer.parameter.validation",
              "optional": true,
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.TerraformVariableValidationConfig",
                        "displayName": "TerraformVariableValidationConfig",
                        "fqn": "cdktf.TerraformVariableValidationConfig",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  }
                ]
              },
              "docs": {
                "summary": "Specify arbitrary custom validation rules for a particular variable using a validation block nested within the corresponding variable block."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.TerraformVariable(\n  scope: Construct,\n  id: str,\n  default: typing.Any = None,\n  description: str = None,\n  nullable: bool = None,\n  sensitive: bool = None,\n  type: str = None,\n  validation: typing.List[TerraformVariableValidationConfig] = None\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformVariable.to_string",
            "displayName": "to_string",
            "id": "cdktf.TerraformVariable.toString",
            "parameters": [],
            "docs": {
              "summary": "Returns a string representation of this construct."
            },
            "usage": "def to_string() -> str"
          },
          {
            "fqn": "cdktf.TerraformVariable.add_override",
            "displayName": "add_override",
            "id": "cdktf.TerraformVariable.addOverride",
            "parameters": [
              {
                "fqn": "cdktf.TerraformVariable.add_override.parameter.path",
                "displayName": "path",
                "id": "cdktf.TerraformVariable.addOverride.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformVariable.add_override.parameter.value",
                "displayName": "value",
                "id": "cdktf.TerraformVariable.addOverride.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_override(\n  path: str,\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformVariable.override_logical_id",
            "displayName": "override_logical_id",
            "id": "cdktf.TerraformVariable.overrideLogicalId",
            "parameters": [
              {
                "fqn": "cdktf.TerraformVariable.override_logical_id.parameter.new_logical_id",
                "displayName": "new_logical_id",
                "id": "cdktf.TerraformVariable.overrideLogicalId.parameter.newLogicalId",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The new logical ID to use for this stack element."
                }
              }
            ],
            "docs": {
              "summary": "Overrides the auto-generated logical ID with a specific ID."
            },
            "usage": "def override_logical_id(\n  new_logical_id: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformVariable.reset_override_logical_id",
            "displayName": "reset_override_logical_id",
            "id": "cdktf.TerraformVariable.resetOverrideLogicalId",
            "parameters": [],
            "docs": {
              "summary": "Resets a previously passed logical Id to use the auto-generated logical id again."
            },
            "usage": "def reset_override_logical_id() -> None"
          },
          {
            "fqn": "cdktf.TerraformVariable.to_metadata",
            "displayName": "to_metadata",
            "id": "cdktf.TerraformVariable.toMetadata",
            "parameters": [],
            "docs": {},
            "usage": "def to_metadata() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformVariable.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TerraformVariable.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          },
          {
            "fqn": "cdktf.TerraformVariable.add_validation",
            "displayName": "add_validation",
            "id": "cdktf.TerraformVariable.addValidation",
            "parameters": [
              {
                "fqn": "cdktf.TerraformVariable.add_validation.parameter.condition",
                "displayName": "condition",
                "id": "cdktf.TerraformVariable.addValidation.parameter.condition",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.TerraformVariable.add_validation.parameter.error_message",
                "displayName": "error_message",
                "id": "cdktf.TerraformVariable.addValidation.parameter.errorMessage",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_validation(\n  condition: typing.Any,\n  error_message: str\n) -> None"
          },
          {
            "fqn": "cdktf.TerraformVariable.synthesize_attributes",
            "displayName": "synthesize_attributes",
            "id": "cdktf.TerraformVariable.synthesizeAttributes",
            "parameters": [],
            "docs": {},
            "usage": "def synthesize_attributes() -> typing.Mapping[typing.Any]"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformVariable.is_construct",
            "displayName": "is_construct",
            "id": "cdktf.TerraformVariable.isConstruct",
            "parameters": [
              {
                "fqn": "cdktf.TerraformVariable.is_construct.parameter.x",
                "displayName": "x",
                "id": "cdktf.TerraformVariable.isConstruct.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "Any object."
                }
              }
            ],
            "docs": {
              "summary": "Checks if `x` is a construct.",
              "remarks": "Use this method instead of `instanceof` to properly detect `Construct`\ninstances, even when the construct library is symlinked.\n\nExplanation: in JavaScript, multiple copies of the `constructs` library on\ndisk are seen as independent, completely different libraries. As a\nconsequence, the class `Construct` in each copy of the `constructs` library\nis seen as a different class, and an instance of one class will not test as\n`instanceof` the other class. `npm install` will not create installations\nlike this, but users may manually symlink construct libraries together or\nuse a monorepo tool: in those cases, multiple copies of the `constructs`\nlibrary can be accidentally installed, and `instanceof` will behave\nunpredictably. It is safest to avoid using `instanceof`, and using\nthis type-testing method instead."
            },
            "usage": "import cdktf\n\ncdktf.TerraformVariable.is_construct(\n  x: typing.Any\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TerraformVariable.property.node",
            "displayName": "node",
            "id": "cdktf.TerraformVariable.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.cdktf_stack",
            "displayName": "cdktf_stack",
            "id": "cdktf.TerraformVariable.property.cdktfStack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "cdktf_stack: TerraformStack"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.TerraformVariable.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.TerraformVariable.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.boolean_value",
            "displayName": "boolean_value",
            "id": "cdktf.TerraformVariable.property.booleanValue",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "boolean_value: IResolvable"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.list_value",
            "displayName": "list_value",
            "id": "cdktf.TerraformVariable.property.listValue",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "list_value: typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.number_value",
            "displayName": "number_value",
            "id": "cdktf.TerraformVariable.property.numberValue",
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {},
            "usage": "number_value: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.string_value",
            "displayName": "string_value",
            "id": "cdktf.TerraformVariable.property.stringValue",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "string_value: str"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.value",
            "displayName": "value",
            "id": "cdktf.TerraformVariable.property.value",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {},
            "usage": "value: typing.Any"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.default",
            "displayName": "default",
            "id": "cdktf.TerraformVariable.property.default",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {},
            "usage": "default: typing.Any"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.description",
            "displayName": "description",
            "id": "cdktf.TerraformVariable.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "description: str"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.nullable",
            "displayName": "nullable",
            "id": "cdktf.TerraformVariable.property.nullable",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "nullable: bool"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.TerraformVariable.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "sensitive: bool"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.type",
            "displayName": "type",
            "id": "cdktf.TerraformVariable.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "type: str"
          },
          {
            "fqn": "cdktf.TerraformVariable.property.validation",
            "displayName": "validation",
            "id": "cdktf.TerraformVariable.property.validation",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformVariableValidationConfig",
                      "displayName": "TerraformVariableValidationConfig",
                      "fqn": "cdktf.TerraformVariableValidationConfig",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "validation: typing.List[TerraformVariableValidationConfig]"
          }
        ],
        "fqn": "cdktf.TerraformVariable",
        "displayName": "TerraformVariable",
        "id": "cdktf.TerraformVariable",
        "docs": {}
      }
    ],
    "classes": [
      {
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.Annotations.add_error",
            "displayName": "add_error",
            "id": "cdktf.Annotations.addError",
            "parameters": [
              {
                "fqn": "cdktf.Annotations.add_error.parameter.message",
                "displayName": "message",
                "id": "cdktf.Annotations.addError.parameter.message",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The error message."
                }
              }
            ],
            "docs": {
              "summary": "Adds an { \"error\": <message> } metadata entry to this construct.",
              "remarks": "The toolkit will fail synthesis when errors are reported."
            },
            "usage": "def add_error(\n  message: str\n) -> None"
          },
          {
            "fqn": "cdktf.Annotations.add_info",
            "displayName": "add_info",
            "id": "cdktf.Annotations.addInfo",
            "parameters": [
              {
                "fqn": "cdktf.Annotations.add_info.parameter.message",
                "displayName": "message",
                "id": "cdktf.Annotations.addInfo.parameter.message",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The info message."
                }
              }
            ],
            "docs": {
              "summary": "Adds an info metadata entry to this construct.",
              "remarks": "The CLI will display the info message when apps are synthesized."
            },
            "usage": "def add_info(\n  message: str\n) -> None"
          },
          {
            "fqn": "cdktf.Annotations.add_warning",
            "displayName": "add_warning",
            "id": "cdktf.Annotations.addWarning",
            "parameters": [
              {
                "fqn": "cdktf.Annotations.add_warning.parameter.message",
                "displayName": "message",
                "id": "cdktf.Annotations.addWarning.parameter.message",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "The warning message."
                }
              }
            ],
            "docs": {
              "summary": "Adds a warning metadata entry to this construct.",
              "remarks": "The CLI will display the warning when an app is synthesized.\nIn a future release the CLI might introduce a --strict flag which\nwill then fail the synthesis if it encounters a warning."
            },
            "usage": "def add_warning(\n  message: str\n) -> None"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.Annotations.of",
            "displayName": "of",
            "id": "cdktf.Annotations.of",
            "parameters": [
              {
                "fqn": "cdktf.Annotations.of.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.Annotations.of.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {
                  "summary": "The scope."
                }
              }
            ],
            "docs": {
              "summary": "Returns the annotations API for a construct scope."
            },
            "usage": "import cdktf\n\ncdktf.Annotations.of(\n  scope: IConstruct\n)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Annotations",
        "displayName": "Annotations",
        "id": "cdktf.Annotations",
        "docs": {
          "summary": "Includes API for attaching annotations such as warning messages to constructs."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.AnyMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AnyMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.AnyMap.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.AnyMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.AnyMap.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.AnyMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.AnyMap(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.AnyMap.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.AnyMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.AnyMap.lookup",
            "displayName": "lookup",
            "id": "cdktf.AnyMap.lookup",
            "parameters": [
              {
                "fqn": "cdktf.AnyMap.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.AnyMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def lookup(\n  key: str\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.AnyMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.AnyMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.AnyMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.AnyMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.AnyMap.to_string",
            "displayName": "to_string",
            "id": "cdktf.AnyMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.AnyMap.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.AnyMap.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.AnyMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.AnyMap.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.AnyMap",
        "displayName": "AnyMap",
        "id": "cdktf.AnyMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.AnyMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.AnyMapList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.AnyMapList.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.AnyMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.AnyMapList.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.AnyMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.AnyMapList.Initializer.parameter.wraps_set",
              "displayName": "wraps_set",
              "id": "cdktf.AnyMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.AnyMapList(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str,\n  wraps_set: bool\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.AnyMapList.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.AnyMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.AnyMapList.get",
            "displayName": "get",
            "id": "cdktf.AnyMapList.get",
            "parameters": [
              {
                "fqn": "cdktf.AnyMapList.get.parameter.index",
                "displayName": "index",
                "id": "cdktf.AnyMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  index: typing.Union[int, float]\n) -> AnyMap"
          },
          {
            "fqn": "cdktf.AnyMapList.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.AnyMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.AnyMapList.interpolation_for_attribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.AnyMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  property: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.AnyMapList.resolve",
            "displayName": "resolve",
            "id": "cdktf.AnyMapList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.AnyMapList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.AnyMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.AnyMapList.to_string",
            "displayName": "to_string",
            "id": "cdktf.AnyMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.AnyMapList.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.AnyMapList.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.AnyMapList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.AnyMapList.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.AnyMapList",
        "displayName": "AnyMapList",
        "id": "cdktf.AnyMapList",
        "docs": {}
      },
      {
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.Aspects.add",
            "displayName": "add",
            "id": "cdktf.Aspects.add",
            "parameters": [
              {
                "fqn": "cdktf.Aspects.add.parameter.aspect",
                "displayName": "aspect",
                "id": "cdktf.Aspects.add.parameter.aspect",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAspect",
                      "displayName": "IAspect",
                      "fqn": "cdktf.IAspect",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The aspect to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds an aspect to apply this scope before synthesis."
            },
            "usage": "def add(\n  aspect: IAspect\n) -> None"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.Aspects.of",
            "displayName": "of",
            "id": "cdktf.Aspects.of",
            "parameters": [
              {
                "fqn": "cdktf.Aspects.of.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.Aspects.of.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {
                  "summary": "The scope for which these aspects will apply."
                }
              }
            ],
            "docs": {
              "summary": "Returns the `Aspects` object associated with a construct scope."
            },
            "usage": "import cdktf\n\ncdktf.Aspects.of(\n  scope: IConstruct\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.Aspects.property.all",
            "displayName": "all",
            "id": "cdktf.Aspects.property.all",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAspect",
                      "displayName": "IAspect",
                      "fqn": "cdktf.IAspect",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "The list of aspects which were directly applied on this scope."
            },
            "usage": "all: typing.List[IAspect]"
          }
        ],
        "fqn": "cdktf.Aspects",
        "displayName": "Aspects",
        "id": "cdktf.Aspects",
        "docs": {
          "summary": "Aspects can be applied to CDK tree scopes and can operate on the tree before synthesis."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.testingMatchers.AssertionReturn.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.testingMatchers.AssertionReturn.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.message",
              "displayName": "message",
              "id": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.message",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.pass",
              "displayName": "pass",
              "id": "cdktf.testingMatchers.AssertionReturn.Initializer.parameter.pass",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "from cdktf import testing_matchers\n\ntestingMatchers.AssertionReturn(\n  message: str,\n  pass: bool\n)"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.testingMatchers.AssertionReturn.property.message",
            "displayName": "message",
            "id": "cdktf.testingMatchers.AssertionReturn.property.message",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "message: str"
          },
          {
            "fqn": "cdktf.testingMatchers.AssertionReturn.property.pass",
            "displayName": "pass",
            "id": "cdktf.testingMatchers.AssertionReturn.property.pass",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "pass: bool"
          }
        ],
        "fqn": "cdktf.testingMatchers.AssertionReturn",
        "displayName": "AssertionReturn",
        "id": "cdktf.testingMatchers.AssertionReturn",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.BooleanMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.BooleanMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.BooleanMap.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.BooleanMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.BooleanMap.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.BooleanMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.BooleanMap(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.BooleanMap.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.BooleanMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.BooleanMap.lookup",
            "displayName": "lookup",
            "id": "cdktf.BooleanMap.lookup",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMap.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.BooleanMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def lookup(\n  key: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.BooleanMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.BooleanMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.BooleanMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.BooleanMap.to_string",
            "displayName": "to_string",
            "id": "cdktf.BooleanMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.BooleanMap.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.BooleanMap.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.BooleanMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.BooleanMap.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.BooleanMap",
        "displayName": "BooleanMap",
        "id": "cdktf.BooleanMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.BooleanMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.BooleanMapList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.BooleanMapList.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.BooleanMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.BooleanMapList.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.BooleanMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.BooleanMapList.Initializer.parameter.wraps_set",
              "displayName": "wraps_set",
              "id": "cdktf.BooleanMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.BooleanMapList(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str,\n  wraps_set: bool\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.BooleanMapList.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.BooleanMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.BooleanMapList.get",
            "displayName": "get",
            "id": "cdktf.BooleanMapList.get",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMapList.get.parameter.index",
                "displayName": "index",
                "id": "cdktf.BooleanMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  index: typing.Union[int, float]\n) -> BooleanMap"
          },
          {
            "fqn": "cdktf.BooleanMapList.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.BooleanMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMapList.interpolation_for_attribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.BooleanMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  property: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.BooleanMapList.resolve",
            "displayName": "resolve",
            "id": "cdktf.BooleanMapList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.BooleanMapList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.BooleanMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.BooleanMapList.to_string",
            "displayName": "to_string",
            "id": "cdktf.BooleanMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.BooleanMapList.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.BooleanMapList.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.BooleanMapList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.BooleanMapList.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.BooleanMapList",
        "displayName": "BooleanMapList",
        "id": "cdktf.BooleanMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.CloudWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.CloudWorkspace.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.CloudWorkspace()"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.CloudWorkspace.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.CloudWorkspace.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.CloudWorkspace",
        "displayName": "CloudWorkspace",
        "id": "cdktf.CloudWorkspace",
        "docs": {
          "summary": "A cloud workspace can either be a single named workspace, or a list of tagged workspaces."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.ComplexComputedList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexComputedList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ComplexComputedList.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexComputedList.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexComputedList.Initializer.parameter.complex_computed_list_index",
              "displayName": "complex_computed_list_index",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.complexComputedListIndex",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexComputedList.Initializer.parameter.wraps_set",
              "displayName": "wraps_set",
              "id": "cdktf.ComplexComputedList.Initializer.parameter.wrapsSet",
              "optional": true,
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.ComplexComputedList(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str,\n  complex_computed_list_index: str,\n  wraps_set: bool = None\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.ComplexComputedList.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.ComplexComputedList.computeFqn",
            "parameters": [],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_any_map_attribute",
            "displayName": "get_any_map_attribute",
            "id": "cdktf.ComplexComputedList.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_any_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_any_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_boolean_attribute",
            "displayName": "get_boolean_attribute",
            "id": "cdktf.ComplexComputedList.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_boolean_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_boolean_attribute(\n  terraform_attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_boolean_map_attribute",
            "displayName": "get_boolean_map_attribute",
            "id": "cdktf.ComplexComputedList.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_boolean_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_boolean_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[bool]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_list_attribute",
            "displayName": "get_list_attribute",
            "id": "cdktf.ComplexComputedList.getListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_list_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_list_attribute(\n  terraform_attribute: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_number_attribute",
            "displayName": "get_number_attribute",
            "id": "cdktf.ComplexComputedList.getNumberAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_number_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_number_attribute(\n  terraform_attribute: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_number_list_attribute",
            "displayName": "get_number_list_attribute",
            "id": "cdktf.ComplexComputedList.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_number_list_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_number_list_attribute(\n  terraform_attribute: str\n) -> typing.List[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_number_map_attribute",
            "displayName": "get_number_map_attribute",
            "id": "cdktf.ComplexComputedList.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_number_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_number_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_string_attribute",
            "displayName": "get_string_attribute",
            "id": "cdktf.ComplexComputedList.getStringAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_string_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_string_attribute(\n  terraform_attribute: str\n) -> str"
          },
          {
            "fqn": "cdktf.ComplexComputedList.get_string_map_attribute",
            "displayName": "get_string_map_attribute",
            "id": "cdktf.ComplexComputedList.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.get_string_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexComputedList.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def get_string_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[str]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.ComplexComputedList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.interpolation_for_attribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.ComplexComputedList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def interpolation_for_attribute(\n  property: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.ComplexComputedList.resolve",
            "displayName": "resolve",
            "id": "cdktf.ComplexComputedList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.ComplexComputedList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.ComplexComputedList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.ComplexComputedList.to_string",
            "displayName": "to_string",
            "id": "cdktf.ComplexComputedList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ComplexComputedList.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.ComplexComputedList.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached.",
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.ComplexComputedList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ComplexComputedList.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "deprecated": true,
              "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
            },
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.ComplexComputedList",
        "displayName": "ComplexComputedList",
        "id": "cdktf.ComplexComputedList",
        "docs": {
          "deprecated": true,
          "deprecationReason": "Going to be replaced by Array of ComplexListItem\nand will be removed in the future"
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.ComplexList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ComplexList.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.ComplexList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexList.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.ComplexList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexList.Initializer.parameter.wraps_set",
              "displayName": "wraps_set",
              "id": "cdktf.ComplexList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.ComplexList(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str,\n  wraps_set: bool\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.ComplexList.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.ComplexList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.ComplexList.resolve",
            "displayName": "resolve",
            "id": "cdktf.ComplexList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.ComplexList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.ComplexList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.ComplexList.to_string",
            "displayName": "to_string",
            "id": "cdktf.ComplexList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ComplexList.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.ComplexList.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.ComplexList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ComplexList.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.ComplexList",
        "displayName": "ComplexList",
        "id": "cdktf.ComplexList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.ComplexMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ComplexMap.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.ComplexMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexMap.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.ComplexMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.ComplexMap(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.ComplexMap.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.ComplexMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.ComplexMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.ComplexMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.ComplexMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.ComplexMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.ComplexMap.to_string",
            "displayName": "to_string",
            "id": "cdktf.ComplexMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ComplexMap.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.ComplexMap.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.ComplexMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ComplexMap.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.ComplexMap",
        "displayName": "ComplexMap",
        "id": "cdktf.ComplexMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.ComplexObject.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ComplexObject.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ComplexObject.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.ComplexObject.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexObject.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.ComplexObject.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.ComplexObject.Initializer.parameter.complex_object_is_from_set",
              "displayName": "complex_object_is_from_set",
              "id": "cdktf.ComplexObject.Initializer.parameter.complexObjectIsFromSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {
                "summary": "set to true if this item is from inside a set and needs tolist() for accessing it set to \"0\" for single list items."
              }
            },
            {
              "fqn": "cdktf.ComplexObject.Initializer.parameter.complex_object_index",
              "displayName": "complex_object_index",
              "id": "cdktf.ComplexObject.Initializer.parameter.complexObjectIndex",
              "optional": true,
              "type": {
                "formattingPattern": "typing.Union[%, %]",
                "types": [
                  {
                    "formattingPattern": "str"
                  },
                  {
                    "formattingPattern": "typing.Union[int, float]"
                  }
                ]
              },
              "docs": {
                "summary": "the index of the complex object in a list."
              }
            }
          ],
          "usage": "import cdktf\n\ncdktf.ComplexObject(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str,\n  complex_object_is_from_set: bool,\n  complex_object_index: typing.Union[str, typing.Union[int, float]] = None\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.ComplexObject.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.ComplexObject.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.ComplexObject.get_any_map_attribute",
            "displayName": "get_any_map_attribute",
            "id": "cdktf.ComplexObject.getAnyMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_any_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getAnyMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_any_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.ComplexObject.get_boolean_attribute",
            "displayName": "get_boolean_attribute",
            "id": "cdktf.ComplexObject.getBooleanAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_boolean_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getBooleanAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean_attribute(\n  terraform_attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.ComplexObject.get_boolean_map_attribute",
            "displayName": "get_boolean_map_attribute",
            "id": "cdktf.ComplexObject.getBooleanMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_boolean_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getBooleanMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_boolean_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[bool]"
          },
          {
            "fqn": "cdktf.ComplexObject.get_list_attribute",
            "displayName": "get_list_attribute",
            "id": "cdktf.ComplexObject.getListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_list_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_list_attribute(\n  terraform_attribute: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.ComplexObject.get_number_attribute",
            "displayName": "get_number_attribute",
            "id": "cdktf.ComplexObject.getNumberAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_number_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getNumberAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_attribute(\n  terraform_attribute: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.ComplexObject.get_number_list_attribute",
            "displayName": "get_number_list_attribute",
            "id": "cdktf.ComplexObject.getNumberListAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_number_list_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getNumberListAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_list_attribute(\n  terraform_attribute: str\n) -> typing.List[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.ComplexObject.get_number_map_attribute",
            "displayName": "get_number_map_attribute",
            "id": "cdktf.ComplexObject.getNumberMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_number_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getNumberMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_number_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.ComplexObject.get_string_attribute",
            "displayName": "get_string_attribute",
            "id": "cdktf.ComplexObject.getStringAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_string_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getStringAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string_attribute(\n  terraform_attribute: str\n) -> str"
          },
          {
            "fqn": "cdktf.ComplexObject.get_string_map_attribute",
            "displayName": "get_string_map_attribute",
            "id": "cdktf.ComplexObject.getStringMapAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.get_string_map_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ComplexObject.getStringMapAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get_string_map_attribute(\n  terraform_attribute: str\n) -> typing.Mapping[str]"
          },
          {
            "fqn": "cdktf.ComplexObject.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.ComplexObject.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.interpolation_for_attribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.ComplexObject.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  property: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.ComplexObject.resolve",
            "displayName": "resolve",
            "id": "cdktf.ComplexObject.resolve",
            "parameters": [
              {
                "fqn": "cdktf.ComplexObject.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.ComplexObject.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.ComplexObject.to_string",
            "displayName": "to_string",
            "id": "cdktf.ComplexObject.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ComplexObject.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.ComplexObject.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.ComplexObject.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ComplexObject.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.ComplexObject",
        "displayName": "ComplexObject",
        "id": "cdktf.ComplexObject",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.DefaultTokenResolver.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.DefaultTokenResolver.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.DefaultTokenResolver.Initializer.parameter.concat",
              "displayName": "concat",
              "id": "cdktf.DefaultTokenResolver.Initializer.parameter.concat",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IFragmentConcatenator",
                    "displayName": "IFragmentConcatenator",
                    "fqn": "cdktf.IFragmentConcatenator",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.DefaultTokenResolver(\n  concat: IFragmentConcatenator\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITokenResolver",
            "displayName": "ITokenResolver",
            "id": "cdktf.ITokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.DefaultTokenResolver.resolve_list",
            "displayName": "resolve_list",
            "id": "cdktf.DefaultTokenResolver.resolveList",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_list.parameter.xs",
                "displayName": "xs",
                "id": "cdktf.DefaultTokenResolver.resolveList.parameter.xs",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_list.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a list of string."
            },
            "usage": "def resolve_list(\n  xs: typing.List[str],\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.DefaultTokenResolver.resolve_map",
            "displayName": "resolve_map",
            "id": "cdktf.DefaultTokenResolver.resolveMap",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_map.parameter.xs",
                "displayName": "xs",
                "id": "cdktf.DefaultTokenResolver.resolveMap.parameter.xs",
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_map.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveMap.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a map token."
            },
            "usage": "def resolve_map(\n  xs: typing.Mapping[typing.Any],\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.DefaultTokenResolver.resolve_number_list",
            "displayName": "resolve_number_list",
            "id": "cdktf.DefaultTokenResolver.resolveNumberList",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_number_list.parameter.xs",
                "displayName": "xs",
                "id": "cdktf.DefaultTokenResolver.resolveNumberList.parameter.xs",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Union[int, float]"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_number_list.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveNumberList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolves a list of numbers."
            },
            "usage": "def resolve_number_list(\n  xs: typing.List[typing.Union[int, float]],\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.DefaultTokenResolver.resolve_string",
            "displayName": "resolve_string",
            "id": "cdktf.DefaultTokenResolver.resolveString",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_string.parameter.fragments",
                "displayName": "fragments",
                "id": "cdktf.DefaultTokenResolver.resolveString.parameter.fragments",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TokenizedStringFragments",
                      "displayName": "TokenizedStringFragments",
                      "fqn": "cdktf.TokenizedStringFragments",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_string.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveString.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve string fragments to Tokens."
            },
            "usage": "def resolve_string(\n  fragments: TokenizedStringFragments,\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.DefaultTokenResolver.resolve_token",
            "displayName": "resolve_token",
            "id": "cdktf.DefaultTokenResolver.resolveToken",
            "parameters": [
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_token.parameter.t",
                "displayName": "t",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_token.parameter.context",
                "displayName": "context",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.DefaultTokenResolver.resolve_token.parameter.post_processor",
                "displayName": "post_processor",
                "id": "cdktf.DefaultTokenResolver.resolveToken.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Default Token resolution.",
              "remarks": "Resolve the Token, recurse into whatever it returns,\nthen finally post-process it."
            },
            "usage": "def resolve_token(\n  t: IResolvable,\n  context: IResolveContext,\n  post_processor: IPostProcessor\n) -> typing.Any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.DefaultTokenResolver",
        "displayName": "DefaultTokenResolver",
        "id": "cdktf.DefaultTokenResolver",
        "docs": {
          "summary": "Default resolver implementation."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.Fn.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Fn.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.Fn()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Fn.abs",
            "displayName": "abs",
            "id": "cdktf.Fn.abs",
            "parameters": [
              {
                "fqn": "cdktf.Fn.abs.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.abs.parameter.value",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/abs.html abs} returns the absolute value of the given number."
            },
            "usage": "import cdktf\n\ncdktf.Fn.abs(\n  value: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.abspath",
            "displayName": "abspath",
            "id": "cdktf.Fn.abspath",
            "parameters": [
              {
                "fqn": "cdktf.Fn.abspath.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.abspath.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/abspath.html abspath} takes a string containing a filesystem path and converts it to an absolute path."
            },
            "usage": "import cdktf\n\ncdktf.Fn.abspath(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.alltrue",
            "displayName": "alltrue",
            "id": "cdktf.Fn.alltrue",
            "parameters": [
              {
                "fqn": "cdktf.Fn.alltrue.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.alltrue.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/alltrue.html alltrue} returns true if all elements in a given collection are true or \"true\"."
            },
            "usage": "import cdktf\n\ncdktf.Fn.alltrue(\n  values: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.anytrue",
            "displayName": "anytrue",
            "id": "cdktf.Fn.anytrue",
            "parameters": [
              {
                "fqn": "cdktf.Fn.anytrue.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.anytrue.parameter.value",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/anytrue.html anytrue} returns true if any element in a given collection is true or \"true\"."
            },
            "usage": "import cdktf\n\ncdktf.Fn.anytrue(\n  value: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.base64decode",
            "displayName": "base64decode",
            "id": "cdktf.Fn.base64decode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64decode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64decode.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64decode.html base64decode} takes a string containing a Base64 character sequence and returns the original string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.base64decode(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.base64encode",
            "displayName": "base64encode",
            "id": "cdktf.Fn.base64encode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64encode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64encode.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64encode.html base64encode} takes a string containing a Base64 character sequence and returns the original string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.base64encode(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.base64gzip",
            "displayName": "base64gzip",
            "id": "cdktf.Fn.base64gzip",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64gzip.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64gzip.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64gzip.html base64gzip} compresses a string with gzip and then encodes the result in Base64 encoding."
            },
            "usage": "import cdktf\n\ncdktf.Fn.base64gzip(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.base64sha256",
            "displayName": "base64sha256",
            "id": "cdktf.Fn.base64sha256",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64sha256.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64sha256.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64sha256.html base64sha256} computes the SHA256 hash of a given string and encodes it with Base64."
            },
            "usage": "import cdktf\n\ncdktf.Fn.base64sha256(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.base64sha512",
            "displayName": "base64sha512",
            "id": "cdktf.Fn.base64sha512",
            "parameters": [
              {
                "fqn": "cdktf.Fn.base64sha512.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.base64sha512.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/base64sha512.html base64sha512} computes the SHA512 hash of a given string and encodes it with Base64."
            },
            "usage": "import cdktf\n\ncdktf.Fn.base64sha512(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.basename",
            "displayName": "basename",
            "id": "cdktf.Fn.basename",
            "parameters": [
              {
                "fqn": "cdktf.Fn.basename.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.basename.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/basename.html basename} takes a string containing a filesystem path and removes all except the last portion from it."
            },
            "usage": "import cdktf\n\ncdktf.Fn.basename(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.bcrypt",
            "displayName": "bcrypt",
            "id": "cdktf.Fn.bcrypt",
            "parameters": [
              {
                "fqn": "cdktf.Fn.bcrypt.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.bcrypt.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.bcrypt.parameter.cost",
                "displayName": "cost",
                "id": "cdktf.Fn.bcrypt.parameter.cost",
                "optional": true,
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/bcrypt.html bcrypt} computes a hash of the given string using the Blowfish cipher, returning a string in the Modular Crypt Format usually expected in the shadow password file on many Unix systems."
            },
            "usage": "import cdktf\n\ncdktf.Fn.bcrypt(\n  value: str,\n  cost: typing.Union[int, float] = None\n)"
          },
          {
            "fqn": "cdktf.Fn.can",
            "displayName": "can",
            "id": "cdktf.Fn.can",
            "parameters": [
              {
                "fqn": "cdktf.Fn.can.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.can.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/can.html can} evaluates the given expression and returns a boolean value indicating whether the expression produced a result without any errors."
            },
            "usage": "import cdktf\n\ncdktf.Fn.can(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.ceil",
            "displayName": "ceil",
            "id": "cdktf.Fn.ceil",
            "parameters": [
              {
                "fqn": "cdktf.Fn.ceil.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.ceil.parameter.value",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/ceil.html ceil} returns the closest whole number that is greater than or equal to the given value, which may be a fraction."
            },
            "usage": "import cdktf\n\ncdktf.Fn.ceil(\n  value: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.chomp",
            "displayName": "chomp",
            "id": "cdktf.Fn.chomp",
            "parameters": [
              {
                "fqn": "cdktf.Fn.chomp.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.chomp.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/chomp.html chomp} removes newline characters at the end of a string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.chomp(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.chunklist",
            "displayName": "chunklist",
            "id": "cdktf.Fn.chunklist",
            "parameters": [
              {
                "fqn": "cdktf.Fn.chunklist.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.chunklist.parameter.value",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.chunklist.parameter.chunk_size",
                "displayName": "chunk_size",
                "id": "cdktf.Fn.chunklist.parameter.chunkSize",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/chunklist.html chunklist} splits a single list into fixed-size chunks, returning a list of lists."
            },
            "usage": "import cdktf\n\ncdktf.Fn.chunklist(\n  value: typing.List[typing.Any],\n  chunk_size: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.cidrhost",
            "displayName": "cidrhost",
            "id": "cdktf.Fn.cidrhost",
            "parameters": [
              {
                "fqn": "cdktf.Fn.cidrhost.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.cidrhost.parameter.prefix",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.cidrhost.parameter.hostnum",
                "displayName": "hostnum",
                "id": "cdktf.Fn.cidrhost.parameter.hostnum",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrhost.html cidrhost} calculates a full host IP address for a given host number within a given IP network address prefix."
            },
            "usage": "import cdktf\n\ncdktf.Fn.cidrhost(\n  prefix: str,\n  hostnum: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.cidrnetmask",
            "displayName": "cidrnetmask",
            "id": "cdktf.Fn.cidrnetmask",
            "parameters": [
              {
                "fqn": "cdktf.Fn.cidrnetmask.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.cidrnetmask.parameter.prefix",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrnetmask.html cidrnetmask} converts an IPv4 address prefix given in CIDR notation into a subnet mask address."
            },
            "usage": "import cdktf\n\ncdktf.Fn.cidrnetmask(\n  prefix: str\n)"
          },
          {
            "fqn": "cdktf.Fn.cidrsubnet",
            "displayName": "cidrsubnet",
            "id": "cdktf.Fn.cidrsubnet",
            "parameters": [
              {
                "fqn": "cdktf.Fn.cidrsubnet.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.cidrsubnet.parameter.prefix",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.cidrsubnet.parameter.newbits",
                "displayName": "newbits",
                "id": "cdktf.Fn.cidrsubnet.parameter.newbits",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.cidrsubnet.parameter.netnum",
                "displayName": "netnum",
                "id": "cdktf.Fn.cidrsubnet.parameter.netnum",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrsubnet.html cidrsubnet} calculates a subnet address within given IP network address prefix."
            },
            "usage": "import cdktf\n\ncdktf.Fn.cidrsubnet(\n  prefix: str,\n  newbits: typing.Union[int, float],\n  netnum: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.cidrsubnets",
            "displayName": "cidrsubnets",
            "id": "cdktf.Fn.cidrsubnets",
            "parameters": [
              {
                "fqn": "cdktf.Fn.cidrsubnets.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.cidrsubnets.parameter.prefix",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.cidrsubnets.parameter.newbits",
                "displayName": "newbits",
                "id": "cdktf.Fn.cidrsubnets.parameter.newbits",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Union[int, float]"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/cidrsubnets.html cidrsubnets} calculates a sequence of consecutive IP address ranges within a particular CIDR prefix."
            },
            "usage": "import cdktf\n\ncdktf.Fn.cidrsubnets(\n  prefix: str,\n  newbits: typing.List[typing.Union[int, float]]\n)"
          },
          {
            "fqn": "cdktf.Fn.coalesce",
            "displayName": "coalesce",
            "id": "cdktf.Fn.coalesce",
            "parameters": [
              {
                "fqn": "cdktf.Fn.coalesce.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.coalesce.parameter.value",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/coalesce.html coalesce} takes any number of arguments and returns the first one that isn't null or an empty string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.coalesce(\n  value: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.coalescelist",
            "displayName": "coalescelist",
            "id": "cdktf.Fn.coalescelist",
            "parameters": [
              {
                "fqn": "cdktf.Fn.coalescelist.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.coalescelist.parameter.value",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/coalescelist.html coalescelist} takes any number of list arguments and returns the first one that isn't empty."
            },
            "usage": "import cdktf\n\ncdktf.Fn.coalescelist(\n  value: typing.List[typing.List[typing.Any]]\n)"
          },
          {
            "fqn": "cdktf.Fn.compact",
            "displayName": "compact",
            "id": "cdktf.Fn.compact",
            "parameters": [
              {
                "fqn": "cdktf.Fn.compact.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.compact.parameter.value",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/compact.html compact} takes a list of strings and returns a new list with any empty string elements removed."
            },
            "usage": "import cdktf\n\ncdktf.Fn.compact(\n  value: typing.List[str]\n)"
          },
          {
            "fqn": "cdktf.Fn.concat",
            "displayName": "concat",
            "id": "cdktf.Fn.concat",
            "parameters": [
              {
                "fqn": "cdktf.Fn.concat.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.concat.parameter.value",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/concat.html concat} takes two or more lists and combines them into a single list."
            },
            "usage": "import cdktf\n\ncdktf.Fn.concat(\n  value: typing.List[typing.List[typing.Any]]\n)"
          },
          {
            "fqn": "cdktf.Fn.contains",
            "displayName": "contains",
            "id": "cdktf.Fn.contains",
            "parameters": [
              {
                "fqn": "cdktf.Fn.contains.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.contains.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.contains.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.contains.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/contains.html contains} determines whether a given list or set contains a given single value as one of its elements."
            },
            "usage": "import cdktf\n\ncdktf.Fn.contains(\n  list: typing.Union[typing.List[typing.Any], IResolvable],\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.csvdecode",
            "displayName": "csvdecode",
            "id": "cdktf.Fn.csvdecode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.csvdecode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.csvdecode.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/csvdecode.html csvdecode} decodes a string containing CSV-formatted data and produces a list of maps representing that data."
            },
            "usage": "import cdktf\n\ncdktf.Fn.csvdecode(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.dirname",
            "displayName": "dirname",
            "id": "cdktf.Fn.dirname",
            "parameters": [
              {
                "fqn": "cdktf.Fn.dirname.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.dirname.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/dirname.html dirname} takes a string containing a filesystem path and removes the last portion from it."
            },
            "usage": "import cdktf\n\ncdktf.Fn.dirname(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.distinct",
            "displayName": "distinct",
            "id": "cdktf.Fn.distinct",
            "parameters": [
              {
                "fqn": "cdktf.Fn.distinct.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.distinct.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/distinct.html distinct} takes a list and returns a new list with any duplicate elements removed."
            },
            "usage": "import cdktf\n\ncdktf.Fn.distinct(\n  list: typing.Union[typing.List[typing.Any], IResolvable]\n)"
          },
          {
            "fqn": "cdktf.Fn.element",
            "displayName": "element",
            "id": "cdktf.Fn.element",
            "parameters": [
              {
                "fqn": "cdktf.Fn.element.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.element.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.element.parameter.index",
                "displayName": "index",
                "id": "cdktf.Fn.element.parameter.index",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/element.html element} retrieves a single element from a list."
            },
            "usage": "import cdktf\n\ncdktf.Fn.element(\n  list: typing.Union[typing.List[typing.Any], IResolvable],\n  index: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.file",
            "displayName": "file",
            "id": "cdktf.Fn.file",
            "parameters": [
              {
                "fqn": "cdktf.Fn.file.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.file.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/file.html file} takes a string containing a filesystem path and removes all except the last portion from it."
            },
            "usage": "import cdktf\n\ncdktf.Fn.file(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.filebase64",
            "displayName": "filebase64",
            "id": "cdktf.Fn.filebase64",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filebase64.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filebase64.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64.html filebase64} reads the contents of a file at the given path and returns them as a base64-encoded string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.filebase64(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.filebase64sha256",
            "displayName": "filebase64sha256",
            "id": "cdktf.Fn.filebase64sha256",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filebase64sha256.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filebase64sha256.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64sha256.html filebase64sha256} is a variant of base64sha256 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.filebase64sha256(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.filebase64sha512",
            "displayName": "filebase64sha512",
            "id": "cdktf.Fn.filebase64sha512",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filebase64sha512.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filebase64sha512.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filebase64sha512.html filebase64sha512} is a variant of base64sha512 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.filebase64sha512(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.fileexists",
            "displayName": "fileexists",
            "id": "cdktf.Fn.fileexists",
            "parameters": [
              {
                "fqn": "cdktf.Fn.fileexists.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.fileexists.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/fileexists.html fileexists} determines whether a file exists at a given path."
            },
            "usage": "import cdktf\n\ncdktf.Fn.fileexists(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.filemd5",
            "displayName": "filemd5",
            "id": "cdktf.Fn.filemd5",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filemd5.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filemd5.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filemd5.html filemd5} is a variant of md5 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.filemd5(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.fileset",
            "displayName": "fileset",
            "id": "cdktf.Fn.fileset",
            "parameters": [
              {
                "fqn": "cdktf.Fn.fileset.parameter.path",
                "displayName": "path",
                "id": "cdktf.Fn.fileset.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.fileset.parameter.pattern",
                "displayName": "pattern",
                "id": "cdktf.Fn.fileset.parameter.pattern",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/fileset.html fileset} enumerates a set of regular file names given a path and pattern."
            },
            "usage": "import cdktf\n\ncdktf.Fn.fileset(\n  path: str,\n  pattern: str\n)"
          },
          {
            "fqn": "cdktf.Fn.filesha1",
            "displayName": "filesha1",
            "id": "cdktf.Fn.filesha1",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filesha1.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filesha1.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha1.html filesha1} is a variant of sha1 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.filesha1(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.filesha256",
            "displayName": "filesha256",
            "id": "cdktf.Fn.filesha256",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filesha256.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filesha256.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha256.html filesha256} is a variant of sha256 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.filesha256(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.filesha512",
            "displayName": "filesha512",
            "id": "cdktf.Fn.filesha512",
            "parameters": [
              {
                "fqn": "cdktf.Fn.filesha512.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.filesha512.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/filesha512.html filesha512} is a variant of sha512 that hashes the contents of a given file rather than a literal string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.filesha512(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.flatten",
            "displayName": "flatten",
            "id": "cdktf.Fn.flatten",
            "parameters": [
              {
                "fqn": "cdktf.Fn.flatten.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.flatten.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/flatten.html flatten} takes a list and replaces any elements that are lists with a flattened sequence of the list contents."
            },
            "usage": "import cdktf\n\ncdktf.Fn.flatten(\n  list: typing.Union[typing.List[typing.Any], IResolvable]\n)"
          },
          {
            "fqn": "cdktf.Fn.floor",
            "displayName": "floor",
            "id": "cdktf.Fn.floor",
            "parameters": [
              {
                "fqn": "cdktf.Fn.floor.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.floor.parameter.value",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/floor.html floor} returns the closest whole number that is less than or equal to the given value, which may be a fraction."
            },
            "usage": "import cdktf\n\ncdktf.Fn.floor(\n  value: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.format",
            "displayName": "format",
            "id": "cdktf.Fn.format",
            "parameters": [
              {
                "fqn": "cdktf.Fn.format.parameter.spec",
                "displayName": "spec",
                "id": "cdktf.Fn.format.parameter.spec",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.format.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.format.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/format.html format} produces a string by formatting a number of other values according to a specification string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.format(\n  spec: str,\n  values: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.formatdate",
            "displayName": "formatdate",
            "id": "cdktf.Fn.formatdate",
            "parameters": [
              {
                "fqn": "cdktf.Fn.formatdate.parameter.spec",
                "displayName": "spec",
                "id": "cdktf.Fn.formatdate.parameter.spec",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.formatdate.parameter.timestamp",
                "displayName": "timestamp",
                "id": "cdktf.Fn.formatdate.parameter.timestamp",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/formatdate.html formatdate} converts a timestamp into a different time format."
            },
            "usage": "import cdktf\n\ncdktf.Fn.formatdate(\n  spec: str,\n  timestamp: str\n)"
          },
          {
            "fqn": "cdktf.Fn.formatlist",
            "displayName": "formatlist",
            "id": "cdktf.Fn.formatlist",
            "parameters": [
              {
                "fqn": "cdktf.Fn.formatlist.parameter.spec",
                "displayName": "spec",
                "id": "cdktf.Fn.formatlist.parameter.spec",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.formatlist.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.formatlist.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/formatlist.html formatlist} produces a list of strings by formatting a number of other values according to a specification string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.formatlist(\n  spec: str,\n  values: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.indent",
            "displayName": "indent",
            "id": "cdktf.Fn.indent",
            "parameters": [
              {
                "fqn": "cdktf.Fn.indent.parameter.indentation",
                "displayName": "indentation",
                "id": "cdktf.Fn.indent.parameter.indentation",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.indent.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.indent.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/indent.html indent} adds a given number of spaces to the beginnings of all but the first line in a given multi-line string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.indent(\n  indentation: typing.Union[int, float],\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.index",
            "displayName": "index",
            "id": "cdktf.Fn.index",
            "parameters": [
              {
                "fqn": "cdktf.Fn.index.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.index.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.index.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.index.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/index.html index} finds the element index for a given value in a list."
            },
            "usage": "import cdktf\n\ncdktf.Fn.index(\n  list: typing.Union[typing.List[typing.Any], IResolvable],\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.join",
            "displayName": "join",
            "id": "cdktf.Fn.join",
            "parameters": [
              {
                "fqn": "cdktf.Fn.join.parameter.separator",
                "displayName": "separator",
                "id": "cdktf.Fn.join.parameter.separator",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.join.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.join.parameter.value",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/join.html join} produces a string by concatenating together all elements of a given list of strings with the given delimiter."
            },
            "usage": "import cdktf\n\ncdktf.Fn.join(\n  separator: str,\n  value: typing.List[str]\n)"
          },
          {
            "fqn": "cdktf.Fn.jsondecode",
            "displayName": "jsondecode",
            "id": "cdktf.Fn.jsondecode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.jsondecode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.jsondecode.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/jsondecode.html jsondecode} interprets a given string as JSON, returning a representation of the result of decoding that string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.jsondecode(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.jsonencode",
            "displayName": "jsonencode",
            "id": "cdktf.Fn.jsonencode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.jsonencode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.jsonencode.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/jsonencode.html jsonencode} encodes a given value to a string using JSON syntax."
            },
            "usage": "import cdktf\n\ncdktf.Fn.jsonencode(\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.keys",
            "displayName": "keys",
            "id": "cdktf.Fn.keys",
            "parameters": [
              {
                "fqn": "cdktf.Fn.keys.parameter.map",
                "displayName": "map",
                "id": "cdktf.Fn.keys.parameter.map",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/keys.html keys} takes a map and returns a list containing the keys from that map."
            },
            "usage": "import cdktf\n\ncdktf.Fn.keys(\n  map: typing.Union[IResolvable, typing.Mapping[typing.Any]]\n)"
          },
          {
            "fqn": "cdktf.Fn.length_of",
            "displayName": "length_of",
            "id": "cdktf.Fn.lengthOf",
            "parameters": [
              {
                "fqn": "cdktf.Fn.length_of.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.lengthOf.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/length.html length} determines the length of a given list, map, or string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.length_of(\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.log",
            "displayName": "log",
            "id": "cdktf.Fn.log",
            "parameters": [
              {
                "fqn": "cdktf.Fn.log.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.log.parameter.value",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.log.parameter.base",
                "displayName": "base",
                "id": "cdktf.Fn.log.parameter.base",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/log.html log} returns the logarithm of a given number in a given base."
            },
            "usage": "import cdktf\n\ncdktf.Fn.log(\n  value: typing.Union[int, float],\n  base: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.lookup",
            "displayName": "lookup",
            "id": "cdktf.Fn.lookup",
            "parameters": [
              {
                "fqn": "cdktf.Fn.lookup.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.lookup.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.Fn.lookup.parameter.key",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.lookup.parameter.default_value",
                "displayName": "default_value",
                "id": "cdktf.Fn.lookup.parameter.defaultValue",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/lookup.html lookup} retrieves the value of a single element from a map, given its key. If the given key does not exist, the given default value is returned instead."
            },
            "usage": "import cdktf\n\ncdktf.Fn.lookup(\n  value: typing.Any,\n  key: typing.Any,\n  default_value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.lower",
            "displayName": "lower",
            "id": "cdktf.Fn.lower",
            "parameters": [
              {
                "fqn": "cdktf.Fn.lower.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.lower.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/lower.html lower} converts all cased letters in the given string to lowercase."
            },
            "usage": "import cdktf\n\ncdktf.Fn.lower(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.matchkeys",
            "displayName": "matchkeys",
            "id": "cdktf.Fn.matchkeys",
            "parameters": [
              {
                "fqn": "cdktf.Fn.matchkeys.parameter.values_list",
                "displayName": "values_list",
                "id": "cdktf.Fn.matchkeys.parameter.valuesList",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.matchkeys.parameter.keys_list",
                "displayName": "keys_list",
                "id": "cdktf.Fn.matchkeys.parameter.keysList",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.matchkeys.parameter.search_set",
                "displayName": "search_set",
                "id": "cdktf.Fn.matchkeys.parameter.searchSet",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/matchkeys.html matchkeys} constructs a new list by taking a subset of elements from one list whose indexes match the corresponding indexes of values in another list."
            },
            "usage": "import cdktf\n\ncdktf.Fn.matchkeys(\n  values_list: typing.Union[str, typing.List[typing.Any], IResolvable],\n  keys_list: typing.Union[str, typing.List[typing.Any], IResolvable],\n  search_set: typing.Union[str, typing.List[typing.Any], IResolvable]\n)"
          },
          {
            "fqn": "cdktf.Fn.max",
            "displayName": "max",
            "id": "cdktf.Fn.max",
            "parameters": [
              {
                "fqn": "cdktf.Fn.max.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.max.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Union[int, float]"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/max.html max} takes one or more numbers and returns the greatest number from the set."
            },
            "usage": "import cdktf\n\ncdktf.Fn.max(\n  values: typing.List[typing.Union[int, float]]\n)"
          },
          {
            "fqn": "cdktf.Fn.md5",
            "displayName": "md5",
            "id": "cdktf.Fn.md5",
            "parameters": [
              {
                "fqn": "cdktf.Fn.md5.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.md5.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/md5.html md5} computes the MD5 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "import cdktf\n\ncdktf.Fn.md5(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.merge_lists",
            "displayName": "merge_lists",
            "id": "cdktf.Fn.mergeLists",
            "parameters": [
              {
                "fqn": "cdktf.Fn.merge_lists.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.mergeLists.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/merge.html merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments."
            },
            "usage": "import cdktf\n\ncdktf.Fn.merge_lists(\n  values: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.merge_maps",
            "displayName": "merge_maps",
            "id": "cdktf.Fn.mergeMaps",
            "parameters": [
              {
                "fqn": "cdktf.Fn.merge_maps.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.mergeMaps.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/merge.html merge} takes an arbitrary number of maps or objects, and returns a single map or object that contains a merged set of elements from all arguments."
            },
            "usage": "import cdktf\n\ncdktf.Fn.merge_maps(\n  values: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.min",
            "displayName": "min",
            "id": "cdktf.Fn.min",
            "parameters": [
              {
                "fqn": "cdktf.Fn.min.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.min.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Union[int, float]"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/min.html min} takes one or more numbers and returns the smallest number from the set."
            },
            "usage": "import cdktf\n\ncdktf.Fn.min(\n  values: typing.List[typing.Union[int, float]]\n)"
          },
          {
            "fqn": "cdktf.Fn.nonsensitive",
            "displayName": "nonsensitive",
            "id": "cdktf.Fn.nonsensitive",
            "parameters": [
              {
                "fqn": "cdktf.Fn.nonsensitive.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.nonsensitive.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/nonsensitive.html nonsensitive} takes a sensitive value and returns a copy of that value with the sensitive marking removed, thereby exposing the sensitive value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.nonsensitive(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.one",
            "displayName": "one",
            "id": "cdktf.Fn.one",
            "parameters": [
              {
                "fqn": "cdktf.Fn.one.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.one.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/one.html one} takes a list, set, or tuple value with either zero or one elements."
            },
            "usage": "import cdktf\n\ncdktf.Fn.one(\n  list: typing.Union[str, typing.List[typing.Any], IResolvable]\n)"
          },
          {
            "fqn": "cdktf.Fn.parse_int",
            "displayName": "parse_int",
            "id": "cdktf.Fn.parseInt",
            "parameters": [
              {
                "fqn": "cdktf.Fn.parse_int.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.parseInt.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.parse_int.parameter.base",
                "displayName": "base",
                "id": "cdktf.Fn.parseInt.parameter.base",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/parseint.html parseInt} parses the given string as a representation of an integer in the specified base and returns the resulting number. The base must be between 2 and 62 inclusive."
            },
            "usage": "import cdktf\n\ncdktf.Fn.parse_int(\n  value: str,\n  base: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.pathexpand",
            "displayName": "pathexpand",
            "id": "cdktf.Fn.pathexpand",
            "parameters": [
              {
                "fqn": "cdktf.Fn.pathexpand.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.pathexpand.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/pathexpand.html pathexpand} takes a string containing a filesystem path and removes the last portion from it."
            },
            "usage": "import cdktf\n\ncdktf.Fn.pathexpand(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.pow",
            "displayName": "pow",
            "id": "cdktf.Fn.pow",
            "parameters": [
              {
                "fqn": "cdktf.Fn.pow.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.pow.parameter.value",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.pow.parameter.power",
                "displayName": "power",
                "id": "cdktf.Fn.pow.parameter.power",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/pow.html pow} calculates an exponent, by raising its first argument to the power of the second argument."
            },
            "usage": "import cdktf\n\ncdktf.Fn.pow(\n  value: typing.Union[int, float],\n  power: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.range",
            "displayName": "range",
            "id": "cdktf.Fn.range",
            "parameters": [
              {
                "fqn": "cdktf.Fn.range.parameter.start",
                "displayName": "start",
                "id": "cdktf.Fn.range.parameter.start",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.range.parameter.limit",
                "displayName": "limit",
                "id": "cdktf.Fn.range.parameter.limit",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.range.parameter.step",
                "displayName": "step",
                "id": "cdktf.Fn.range.parameter.step",
                "optional": true,
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/range.html range} generates a list of numbers using a start value, a limit value, and a step value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.range(\n  start: typing.Union[int, float],\n  limit: typing.Union[int, float],\n  step: typing.Union[int, float] = None\n)"
          },
          {
            "fqn": "cdktf.Fn.raw_string",
            "displayName": "raw_string",
            "id": "cdktf.Fn.rawString",
            "parameters": [
              {
                "fqn": "cdktf.Fn.raw_string.parameter.str",
                "displayName": "str",
                "id": "cdktf.Fn.rawString.parameter.str",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Use this function to wrap a string and escape it properly for the use in Terraform This is only needed in certain scenarios (e.g., if you have unescaped double quotes in the string)."
            },
            "usage": "import cdktf\n\ncdktf.Fn.raw_string(\n  str: str\n)"
          },
          {
            "fqn": "cdktf.Fn.regex",
            "displayName": "regex",
            "id": "cdktf.Fn.regex",
            "parameters": [
              {
                "fqn": "cdktf.Fn.regex.parameter.pattern",
                "displayName": "pattern",
                "id": "cdktf.Fn.regex.parameter.pattern",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.regex.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.regex.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/regex.html regex} applies a regular expression to a string and returns the matching substrings in pattern."
            },
            "usage": "import cdktf\n\ncdktf.Fn.regex(\n  pattern: str,\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.regexall",
            "displayName": "regexall",
            "id": "cdktf.Fn.regexall",
            "parameters": [
              {
                "fqn": "cdktf.Fn.regexall.parameter.pattern",
                "displayName": "pattern",
                "id": "cdktf.Fn.regexall.parameter.pattern",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.regexall.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.regexall.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/regexall.html regexall} applies a regular expression to a string and returns a list of all matches."
            },
            "usage": "import cdktf\n\ncdktf.Fn.regexall(\n  pattern: str,\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.replace",
            "displayName": "replace",
            "id": "cdktf.Fn.replace",
            "parameters": [
              {
                "fqn": "cdktf.Fn.replace.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.replace.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.replace.parameter.substring",
                "displayName": "substring",
                "id": "cdktf.Fn.replace.parameter.substring",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.replace.parameter.replacement",
                "displayName": "replacement",
                "id": "cdktf.Fn.replace.parameter.replacement",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/replace.html replace} searches a given string for another given substring, and replaces each occurrence with a given replacement string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.replace(\n  value: str,\n  substring: str,\n  replacement: str\n)"
          },
          {
            "fqn": "cdktf.Fn.reverse",
            "displayName": "reverse",
            "id": "cdktf.Fn.reverse",
            "parameters": [
              {
                "fqn": "cdktf.Fn.reverse.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.reverse.parameter.values",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/reverse.html reverse} takes a sequence and produces a new sequence of the same length with all of the same elements as the given sequence but in reverse order."
            },
            "usage": "import cdktf\n\ncdktf.Fn.reverse(\n  values: typing.Union[typing.List[typing.Any], IResolvable]\n)"
          },
          {
            "fqn": "cdktf.Fn.rsadecrypt",
            "displayName": "rsadecrypt",
            "id": "cdktf.Fn.rsadecrypt",
            "parameters": [
              {
                "fqn": "cdktf.Fn.rsadecrypt.parameter.ciphertext",
                "displayName": "ciphertext",
                "id": "cdktf.Fn.rsadecrypt.parameter.ciphertext",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.rsadecrypt.parameter.privatekey",
                "displayName": "privatekey",
                "id": "cdktf.Fn.rsadecrypt.parameter.privatekey",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/rsadecrypt.html rsadecrypt} decrypts an RSA-encrypted ciphertext, returning the corresponding cleartext."
            },
            "usage": "import cdktf\n\ncdktf.Fn.rsadecrypt(\n  ciphertext: str,\n  privatekey: str\n)"
          },
          {
            "fqn": "cdktf.Fn.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.Fn.sensitive",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sensitive.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.sensitive.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sensitive.html sensitive} takes any value and returns a copy of it marked so that Terraform will treat it as sensitive, with the same meaning and behavior as for sensitive input variables."
            },
            "usage": "import cdktf\n\ncdktf.Fn.sensitive(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.setintersection",
            "displayName": "setintersection",
            "id": "cdktf.Fn.setintersection",
            "parameters": [
              {
                "fqn": "cdktf.Fn.setintersection.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.setintersection.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setintersection.html setintersection} function takes multiple sets and produces a single set containing only the elements that all of the given sets have in common."
            },
            "usage": "import cdktf\n\ncdktf.Fn.setintersection(\n  values: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.setproduct",
            "displayName": "setproduct",
            "id": "cdktf.Fn.setproduct",
            "parameters": [
              {
                "fqn": "cdktf.Fn.setproduct.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.setproduct.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setproduct.html setproduct} function finds all of the possible combinations of elements from all of the given sets by computing the Cartesian product."
            },
            "usage": "import cdktf\n\ncdktf.Fn.setproduct(\n  values: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.setsubtract",
            "displayName": "setsubtract",
            "id": "cdktf.Fn.setsubtract",
            "parameters": [
              {
                "fqn": "cdktf.Fn.setsubtract.parameter.minuend",
                "displayName": "minuend",
                "id": "cdktf.Fn.setsubtract.parameter.minuend",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.setsubtract.parameter.subtrahend",
                "displayName": "subtrahend",
                "id": "cdktf.Fn.setsubtract.parameter.subtrahend",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/slice.html setsubtract} function returns a new set containing the elements from the first set that are not present in the second set."
            },
            "usage": "import cdktf\n\ncdktf.Fn.setsubtract(\n  minuend: typing.Union[str, typing.List[typing.Any], IResolvable],\n  subtrahend: typing.Union[str, typing.List[typing.Any], IResolvable]\n)"
          },
          {
            "fqn": "cdktf.Fn.setunion",
            "displayName": "setunion",
            "id": "cdktf.Fn.setunion",
            "parameters": [
              {
                "fqn": "cdktf.Fn.setunion.parameter.values",
                "displayName": "values",
                "id": "cdktf.Fn.setunion.parameter.values",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {
                  "summary": "- Arguments are passed in an array."
                }
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/setunion.html setunion} function takes multiple sets and produces a single set containing the elements from all of the given sets."
            },
            "usage": "import cdktf\n\ncdktf.Fn.setunion(\n  values: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.sha1",
            "displayName": "sha1",
            "id": "cdktf.Fn.sha1",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sha1.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.sha1.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha1.html sha1} computes the SHA1 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "import cdktf\n\ncdktf.Fn.sha1(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.sha256",
            "displayName": "sha256",
            "id": "cdktf.Fn.sha256",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sha256.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.sha256.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha256.html sha256} computes the SHA256 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "import cdktf\n\ncdktf.Fn.sha256(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.sha512",
            "displayName": "sha512",
            "id": "cdktf.Fn.sha512",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sha512.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.sha512.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sha512.html sha512} computes the SHA512 hash of a given string and encodes it with hexadecimal digits."
            },
            "usage": "import cdktf\n\ncdktf.Fn.sha512(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.signum",
            "displayName": "signum",
            "id": "cdktf.Fn.signum",
            "parameters": [
              {
                "fqn": "cdktf.Fn.signum.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.signum.parameter.value",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/signum.html signum} determines the sign of a number, returning a number between -1 and 1 to represent the sign."
            },
            "usage": "import cdktf\n\ncdktf.Fn.signum(\n  value: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.slice",
            "displayName": "slice",
            "id": "cdktf.Fn.slice",
            "parameters": [
              {
                "fqn": "cdktf.Fn.slice.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.slice.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.slice.parameter.startindex",
                "displayName": "startindex",
                "id": "cdktf.Fn.slice.parameter.startindex",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.slice.parameter.endindex",
                "displayName": "endindex",
                "id": "cdktf.Fn.slice.parameter.endindex",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/slice.html slice} extracts some consecutive elements from within a list."
            },
            "usage": "import cdktf\n\ncdktf.Fn.slice(\n  list: typing.Union[str, typing.List[typing.Any], IResolvable],\n  startindex: typing.Union[int, float],\n  endindex: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.sort",
            "displayName": "sort",
            "id": "cdktf.Fn.sort",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sort.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.sort.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sort.html sort} takes a list of strings and returns a new list with those strings sorted lexicographically."
            },
            "usage": "import cdktf\n\ncdktf.Fn.sort(\n  list: typing.Union[str, typing.List[typing.Any], IResolvable]\n)"
          },
          {
            "fqn": "cdktf.Fn.split",
            "displayName": "split",
            "id": "cdktf.Fn.split",
            "parameters": [
              {
                "fqn": "cdktf.Fn.split.parameter.seperator",
                "displayName": "seperator",
                "id": "cdktf.Fn.split.parameter.seperator",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.split.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.split.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/split.html split} produces a list by dividing a given string at all occurrences of a given separator."
            },
            "usage": "import cdktf\n\ncdktf.Fn.split(\n  seperator: str,\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.strrev",
            "displayName": "strrev",
            "id": "cdktf.Fn.strrev",
            "parameters": [
              {
                "fqn": "cdktf.Fn.strrev.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.strrev.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/strrev.html strrev} reverses the characters in a string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.strrev(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.substr",
            "displayName": "substr",
            "id": "cdktf.Fn.substr",
            "parameters": [
              {
                "fqn": "cdktf.Fn.substr.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.substr.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.substr.parameter.offset",
                "displayName": "offset",
                "id": "cdktf.Fn.substr.parameter.offset",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.substr.parameter.length",
                "displayName": "length",
                "id": "cdktf.Fn.substr.parameter.length",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/substr.html substr} extracts a substring from a given string by offset and length."
            },
            "usage": "import cdktf\n\ncdktf.Fn.substr(\n  value: str,\n  offset: typing.Union[int, float],\n  length: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Fn.sum",
            "displayName": "sum",
            "id": "cdktf.Fn.sum",
            "parameters": [
              {
                "fqn": "cdktf.Fn.sum.parameter.list",
                "displayName": "list",
                "id": "cdktf.Fn.sum.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/sum.html sum} takes a list or set of numbers and returns the sum of those numbers."
            },
            "usage": "import cdktf\n\ncdktf.Fn.sum(\n  list: typing.Union[str, typing.List[typing.Any], IResolvable]\n)"
          },
          {
            "fqn": "cdktf.Fn.templatefile",
            "displayName": "templatefile",
            "id": "cdktf.Fn.templatefile",
            "parameters": [
              {
                "fqn": "cdktf.Fn.templatefile.parameter.path",
                "displayName": "path",
                "id": "cdktf.Fn.templatefile.parameter.path",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.templatefile.parameter.vars",
                "displayName": "vars",
                "id": "cdktf.Fn.templatefile.parameter.vars",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/templatefile.html templatefile} reads the file at the given path and renders its content as a template using a supplied set of template variables."
            },
            "usage": "import cdktf\n\ncdktf.Fn.templatefile(\n  path: str,\n  vars: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.textdecodebase64",
            "displayName": "textdecodebase64",
            "id": "cdktf.Fn.textdecodebase64",
            "parameters": [
              {
                "fqn": "cdktf.Fn.textdecodebase64.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.textdecodebase64.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.textdecodebase64.parameter.encoding_name",
                "displayName": "encoding_name",
                "id": "cdktf.Fn.textdecodebase64.parameter.encodingName",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/textdecodebase64.html textdecodebase64} function decodes a string that was previously Base64-encoded, and then interprets the result as characters in a specified character encoding."
            },
            "usage": "import cdktf\n\ncdktf.Fn.textdecodebase64(\n  value: str,\n  encoding_name: str\n)"
          },
          {
            "fqn": "cdktf.Fn.textencodebase64",
            "displayName": "textencodebase64",
            "id": "cdktf.Fn.textencodebase64",
            "parameters": [
              {
                "fqn": "cdktf.Fn.textencodebase64.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.textencodebase64.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.textencodebase64.parameter.encoding_name",
                "displayName": "encoding_name",
                "id": "cdktf.Fn.textencodebase64.parameter.encodingName",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/textencodebase64.html textencodebase64}  encodes the unicode characters in a given string using a specified character encoding, returning the result base64 encoded because Terraform language strings are always sequences of unicode characters."
            },
            "usage": "import cdktf\n\ncdktf.Fn.textencodebase64(\n  value: str,\n  encoding_name: str\n)"
          },
          {
            "fqn": "cdktf.Fn.timeadd",
            "displayName": "timeadd",
            "id": "cdktf.Fn.timeadd",
            "parameters": [
              {
                "fqn": "cdktf.Fn.timeadd.parameter.timestamp",
                "displayName": "timestamp",
                "id": "cdktf.Fn.timeadd.parameter.timestamp",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.timeadd.parameter.duration",
                "displayName": "duration",
                "id": "cdktf.Fn.timeadd.parameter.duration",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/timeadd.html timeadd} adds a duration to a timestamp, returning a new timestamp."
            },
            "usage": "import cdktf\n\ncdktf.Fn.timeadd(\n  timestamp: str,\n  duration: str\n)"
          },
          {
            "fqn": "cdktf.Fn.timestamp",
            "displayName": "timestamp",
            "id": "cdktf.Fn.timestamp",
            "parameters": [],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/timestamp.html timestamp} returns a UTC timestamp string in RFC 3339 format."
            },
            "usage": "import cdktf\n\ncdktf.Fn.timestamp()"
          },
          {
            "fqn": "cdktf.Fn.title",
            "displayName": "title",
            "id": "cdktf.Fn.title",
            "parameters": [
              {
                "fqn": "cdktf.Fn.title.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.title.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/title.html title} converts the first letter of each word in the given string to uppercase."
            },
            "usage": "import cdktf\n\ncdktf.Fn.title(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.tobool",
            "displayName": "tobool",
            "id": "cdktf.Fn.tobool",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tobool.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tobool.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tobool.html tobool} converts its argument to a boolean value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.tobool(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.tolist",
            "displayName": "tolist",
            "id": "cdktf.Fn.tolist",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tolist.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tolist.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tolist.html tolist} converts its argument to a list value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.tolist(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.tomap",
            "displayName": "tomap",
            "id": "cdktf.Fn.tomap",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tomap.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tomap.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tomap.html tomap} converts its argument to a map value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.tomap(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.tonumber",
            "displayName": "tonumber",
            "id": "cdktf.Fn.tonumber",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tonumber.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tonumber.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tonumber.html tonumber} converts its argument to a number value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.tonumber(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.toset",
            "displayName": "toset",
            "id": "cdktf.Fn.toset",
            "parameters": [
              {
                "fqn": "cdktf.Fn.toset.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.toset.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/toset.html toset} converts its argument to a set value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.toset(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.tostring",
            "displayName": "tostring",
            "id": "cdktf.Fn.tostring",
            "parameters": [
              {
                "fqn": "cdktf.Fn.tostring.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.tostring.parameter.expression",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/tostring.html tostring} converts its argument to a string value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.tostring(\n  expression: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.transpose",
            "displayName": "transpose",
            "id": "cdktf.Fn.transpose",
            "parameters": [
              {
                "fqn": "cdktf.Fn.transpose.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.transpose.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/transpose.html transpose} takes a map of lists of strings and swaps the keys and values to produce a new map of lists of strings."
            },
            "usage": "import cdktf\n\ncdktf.Fn.transpose(\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.trim",
            "displayName": "trim",
            "id": "cdktf.Fn.trim",
            "parameters": [
              {
                "fqn": "cdktf.Fn.trim.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.trim.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.trim.parameter.replacement",
                "displayName": "replacement",
                "id": "cdktf.Fn.trim.parameter.replacement",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trim.html trim} removes the specified characters from the start and end of the given string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.trim(\n  value: str,\n  replacement: str\n)"
          },
          {
            "fqn": "cdktf.Fn.trimprefix",
            "displayName": "trimprefix",
            "id": "cdktf.Fn.trimprefix",
            "parameters": [
              {
                "fqn": "cdktf.Fn.trimprefix.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.trimprefix.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.trimprefix.parameter.prefix",
                "displayName": "prefix",
                "id": "cdktf.Fn.trimprefix.parameter.prefix",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimprefix.html trimprefix} removes the specified prefix from the start of the given string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.trimprefix(\n  value: str,\n  prefix: str\n)"
          },
          {
            "fqn": "cdktf.Fn.trimspace",
            "displayName": "trimspace",
            "id": "cdktf.Fn.trimspace",
            "parameters": [
              {
                "fqn": "cdktf.Fn.trimspace.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.trimspace.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimspace.html trimspace} removes any space characters from the start and end of the given string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.trimspace(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.trimsuffix",
            "displayName": "trimsuffix",
            "id": "cdktf.Fn.trimsuffix",
            "parameters": [
              {
                "fqn": "cdktf.Fn.trimsuffix.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.trimsuffix.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.trimsuffix.parameter.suffix",
                "displayName": "suffix",
                "id": "cdktf.Fn.trimsuffix.parameter.suffix",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/trimsuffix.html trimsuffix} removes the specified suffix from the end of the given string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.trimsuffix(\n  value: str,\n  suffix: str\n)"
          },
          {
            "fqn": "cdktf.Fn.try",
            "displayName": "try",
            "id": "cdktf.Fn.try",
            "parameters": [
              {
                "fqn": "cdktf.Fn.try.parameter.expression",
                "displayName": "expression",
                "id": "cdktf.Fn.try.parameter.expression",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/try.html try} evaluates all of its argument expressions in turn and returns the result of the first one that does not produce any errors."
            },
            "usage": "import cdktf\n\ncdktf.Fn.try(\n  expression: typing.List[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Fn.upper",
            "displayName": "upper",
            "id": "cdktf.Fn.upper",
            "parameters": [
              {
                "fqn": "cdktf.Fn.upper.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.upper.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/upper.html upper} converts all cased letters in the given string to uppercase."
            },
            "usage": "import cdktf\n\ncdktf.Fn.upper(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.urlencode",
            "displayName": "urlencode",
            "id": "cdktf.Fn.urlencode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.urlencode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.urlencode.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/urlencode.html urlencode} applies URL encoding to a given string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.urlencode(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.uuid",
            "displayName": "uuid",
            "id": "cdktf.Fn.uuid",
            "parameters": [],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/uuid.html uuid} generates a unique identifier string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.uuid()"
          },
          {
            "fqn": "cdktf.Fn.uuidv5",
            "displayName": "uuidv5",
            "id": "cdktf.Fn.uuidv5",
            "parameters": [
              {
                "fqn": "cdktf.Fn.uuidv5.parameter.namespace",
                "displayName": "namespace",
                "id": "cdktf.Fn.uuidv5.parameter.namespace",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.uuidv5.parameter.name",
                "displayName": "name",
                "id": "cdktf.Fn.uuidv5.parameter.name",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/uuidv5.html uuidv5} generates a unique identifier string."
            },
            "usage": "import cdktf\n\ncdktf.Fn.uuidv5(\n  namespace: str,\n  name: str\n)"
          },
          {
            "fqn": "cdktf.Fn.values",
            "displayName": "values",
            "id": "cdktf.Fn.values",
            "parameters": [
              {
                "fqn": "cdktf.Fn.values.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.values.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/values.html values} takes a map and returns a list containing the values of the elements in that map."
            },
            "usage": "import cdktf\n\ncdktf.Fn.values(\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.yamldecode",
            "displayName": "yamldecode",
            "id": "cdktf.Fn.yamldecode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.yamldecode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.yamldecode.parameter.value",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/yamldecode.html yamldecode} parses a string as a subset of YAML, and produces a representation of its value."
            },
            "usage": "import cdktf\n\ncdktf.Fn.yamldecode(\n  value: str\n)"
          },
          {
            "fqn": "cdktf.Fn.yamlencode",
            "displayName": "yamlencode",
            "id": "cdktf.Fn.yamlencode",
            "parameters": [
              {
                "fqn": "cdktf.Fn.yamlencode.parameter.value",
                "displayName": "value",
                "id": "cdktf.Fn.yamlencode.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/yamlencode.html yamlencode} encodes a given value to a string using JSON syntax."
            },
            "usage": "import cdktf\n\ncdktf.Fn.yamlencode(\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Fn.zipmap",
            "displayName": "zipmap",
            "id": "cdktf.Fn.zipmap",
            "parameters": [
              {
                "fqn": "cdktf.Fn.zipmap.parameter.keyslist",
                "displayName": "keyslist",
                "id": "cdktf.Fn.zipmap.parameter.keyslist",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Fn.zipmap.parameter.valueslist",
                "displayName": "valueslist",
                "id": "cdktf.Fn.zipmap.parameter.valueslist",
                "type": {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "{@link https://www.terraform.io/docs/language/functions/zipmap.html zipmap} constructs a map from a list of keys and a corresponding list of values."
            },
            "usage": "import cdktf\n\ncdktf.Fn.zipmap(\n  keyslist: typing.Union[typing.List[typing.Any], IResolvable],\n  valueslist: typing.Union[typing.List[typing.Any], IResolvable]\n)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Fn",
        "displayName": "Fn",
        "id": "cdktf.Fn",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.Lazy.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Lazy.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.Lazy()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Lazy.any_value",
            "displayName": "any_value",
            "id": "cdktf.Lazy.anyValue",
            "parameters": [
              {
                "fqn": "cdktf.Lazy.any_value.parameter.producer",
                "displayName": "producer",
                "id": "cdktf.Lazy.anyValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IAnyProducer",
                      "displayName": "IAnyProducer",
                      "fqn": "cdktf.IAnyProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The lazy producer."
                }
              },
              {
                "fqn": "cdktf.Lazy.any_value.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Lazy.anyValue.parameter.displayHint",
                "optional": true,
                "default": "- No hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "Use the given name as a display hint."
                }
              },
              {
                "fqn": "cdktf.Lazy.any_value.parameter.omit_empty_array",
                "displayName": "omit_empty_array",
                "id": "cdktf.Lazy.anyValue.parameter.omitEmptyArray",
                "optional": true,
                "default": "false",
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {
                  "summary": "If the produced value is an array and it is empty, return 'undefined' instead."
                }
              }
            ],
            "docs": {
              "summary": "Produces a lazy token from an untyped value."
            },
            "usage": "import cdktf\n\ncdktf.Lazy.any_value(\n  producer: IAnyProducer,\n  display_hint: str = None,\n  omit_empty_array: bool = None\n)"
          },
          {
            "fqn": "cdktf.Lazy.list_value",
            "displayName": "list_value",
            "id": "cdktf.Lazy.listValue",
            "parameters": [
              {
                "fqn": "cdktf.Lazy.list_value.parameter.producer",
                "displayName": "producer",
                "id": "cdktf.Lazy.listValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IListProducer",
                      "displayName": "IListProducer",
                      "fqn": "cdktf.IListProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              },
              {
                "fqn": "cdktf.Lazy.list_value.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Lazy.listValue.parameter.displayHint",
                "optional": true,
                "default": "- No hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "Use the given name as a display hint."
                }
              },
              {
                "fqn": "cdktf.Lazy.list_value.parameter.omit_empty",
                "displayName": "omit_empty",
                "id": "cdktf.Lazy.listValue.parameter.omitEmpty",
                "optional": true,
                "default": "false",
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {
                  "summary": "If the produced list is empty, return 'undefined' instead."
                }
              }
            ],
            "docs": {
              "summary": "Returns a list-ified token for a lazy value."
            },
            "usage": "import cdktf\n\ncdktf.Lazy.list_value(\n  producer: IListProducer,\n  display_hint: str = None,\n  omit_empty: bool = None\n)"
          },
          {
            "fqn": "cdktf.Lazy.number_value",
            "displayName": "number_value",
            "id": "cdktf.Lazy.numberValue",
            "parameters": [
              {
                "fqn": "cdktf.Lazy.number_value.parameter.producer",
                "displayName": "producer",
                "id": "cdktf.Lazy.numberValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.INumberProducer",
                      "displayName": "INumberProducer",
                      "fqn": "cdktf.INumberProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              }
            ],
            "docs": {
              "summary": "Returns a numberified token for a lazy value."
            },
            "usage": "import cdktf\n\ncdktf.Lazy.number_value(\n  producer: INumberProducer\n)"
          },
          {
            "fqn": "cdktf.Lazy.string_value",
            "displayName": "string_value",
            "id": "cdktf.Lazy.stringValue",
            "parameters": [
              {
                "fqn": "cdktf.Lazy.string_value.parameter.producer",
                "displayName": "producer",
                "id": "cdktf.Lazy.stringValue.parameter.producer",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IStringProducer",
                      "displayName": "IStringProducer",
                      "fqn": "cdktf.IStringProducer",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The producer."
                }
              },
              {
                "fqn": "cdktf.Lazy.string_value.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Lazy.stringValue.parameter.displayHint",
                "optional": true,
                "default": "- No hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "Use the given name as a display hint."
                }
              }
            ],
            "docs": {
              "summary": "Returns a stringified token for a lazy value."
            },
            "usage": "import cdktf\n\ncdktf.Lazy.string_value(\n  producer: IStringProducer,\n  display_hint: str = None\n)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Lazy",
        "displayName": "Lazy",
        "id": "cdktf.Lazy",
        "docs": {
          "summary": "Lazily produce a value.",
          "remarks": "Can be used to return a string, list or numeric value whose actual value\nwill only be calculated later, during synthesis."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.LazyBase.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.LazyBase.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.LazyBase()"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.LazyBase.add_post_processor",
            "displayName": "add_post_processor",
            "id": "cdktf.LazyBase.addPostProcessor",
            "parameters": [
              {
                "fqn": "cdktf.LazyBase.add_post_processor.parameter.post_processor",
                "displayName": "post_processor",
                "id": "cdktf.LazyBase.addPostProcessor.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def add_post_processor(\n  post_processor: IPostProcessor\n) -> None"
          },
          {
            "fqn": "cdktf.LazyBase.resolve",
            "displayName": "resolve",
            "id": "cdktf.LazyBase.resolve",
            "parameters": [
              {
                "fqn": "cdktf.LazyBase.resolve.parameter.context",
                "displayName": "context",
                "id": "cdktf.LazyBase.resolve.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.LazyBase.to_jso_n",
            "displayName": "to_jso_n",
            "id": "cdktf.LazyBase.toJSON",
            "parameters": [],
            "docs": {
              "summary": "Turn this Token into JSON.",
              "remarks": "Called automatically when JSON.stringify() is called on a Token."
            },
            "usage": "def to_jso_n() -> typing.Any"
          },
          {
            "fqn": "cdktf.LazyBase.to_string",
            "displayName": "to_string",
            "id": "cdktf.LazyBase.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.LazyBase.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.LazyBase.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          }
        ],
        "fqn": "cdktf.LazyBase",
        "displayName": "LazyBase",
        "id": "cdktf.LazyBase",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.ListTerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.ListTerraformIterator.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.ListTerraformIterator.Initializer.parameter.list",
              "displayName": "list",
              "id": "cdktf.ListTerraformIterator.Initializer.parameter.list",
              "type": {
                "formattingPattern": "typing.Union[%, %, %, %, %, %, %, %, %]",
                "types": [
                  {
                    "formattingPattern": "typing.List[%]",
                    "types": [
                      {
                        "formattingPattern": "str"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.IResolvable",
                        "displayName": "IResolvable",
                        "fqn": "cdktf.IResolvable",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "typing.List[%]",
                    "types": [
                      {
                        "formattingPattern": "typing.Union[int, float]"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ComplexList",
                        "displayName": "ComplexList",
                        "fqn": "cdktf.ComplexList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.StringMapList",
                        "displayName": "StringMapList",
                        "fqn": "cdktf.StringMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.NumberMapList",
                        "displayName": "NumberMapList",
                        "fqn": "cdktf.NumberMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.BooleanMapList",
                        "displayName": "BooleanMapList",
                        "fqn": "cdktf.BooleanMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.AnyMapList",
                        "displayName": "AnyMapList",
                        "fqn": "cdktf.AnyMapList",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "typing.List[%]",
                    "types": [
                      {
                        "formattingPattern": "typing.Union[%, %]",
                        "types": [
                          {
                            "formattingPattern": "bool"
                          },
                          {
                            "formattingPattern": "%",
                            "types": [
                              {
                                "id": "cdktf.IResolvable",
                                "displayName": "IResolvable",
                                "fqn": "cdktf.IResolvable",
                                "packageName": "cdktf",
                                "packageVersion": "0.0.0"
                              }
                            ]
                          }
                        ]
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.ListTerraformIterator(\n  list: typing.Union[typing.List[str], IResolvable, typing.List[typing.Union[int, float]], ComplexList, StringMapList, NumberMapList, BooleanMapList, AnyMapList, typing.List[typing.Union[bool, IResolvable]]]\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ListTerraformIterator.dynamic",
            "displayName": "dynamic",
            "id": "cdktf.ListTerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.dynamic.parameter.attributes",
                "displayName": "attributes",
                "id": "cdktf.ListTerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def dynamic(\n  attributes: typing.Mapping[typing.Any]\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_any",
            "displayName": "get_any",
            "id": "cdktf.ListTerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_any.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_any(\n  attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_any_map",
            "displayName": "get_any_map",
            "id": "cdktf.ListTerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_any_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_any_map(\n  attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.ListTerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_boolean.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_boolean_map",
            "displayName": "get_boolean_map",
            "id": "cdktf.ListTerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_boolean_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_boolean_map(\n  attribute: str\n) -> typing.Mapping[bool]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_list",
            "displayName": "get_list",
            "id": "cdktf.ListTerraformIterator.getList",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_list.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  attribute: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_map",
            "displayName": "get_map",
            "id": "cdktf.ListTerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_map(\n  attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_number",
            "displayName": "get_number",
            "id": "cdktf.ListTerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_number.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  attribute: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_number_list",
            "displayName": "get_number_list",
            "id": "cdktf.ListTerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_number_list.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number_list(\n  attribute: str\n) -> typing.List[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_number_map",
            "displayName": "get_number_map",
            "id": "cdktf.ListTerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_number_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number_map(\n  attribute: str\n) -> typing.Mapping[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_string",
            "displayName": "get_string",
            "id": "cdktf.ListTerraformIterator.getString",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_string.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  attribute: str\n) -> str"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.get_string_map",
            "displayName": "get_string_map",
            "id": "cdktf.ListTerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.get_string_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.ListTerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_string_map(\n  attribute: str\n) -> typing.Mapping[str]"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.ListTerraformIterator.from_list",
            "displayName": "from_list",
            "id": "cdktf.ListTerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.from_list.parameter.list",
                "displayName": "list",
                "id": "cdktf.ListTerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %, %, %, %, %, %, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "str"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[int, float]"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[%, %]",
                          "types": [
                            {
                              "formattingPattern": "bool"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "import cdktf\n\ncdktf.ListTerraformIterator.from_list(\n  list: typing.Union[typing.List[str], IResolvable, typing.List[typing.Union[int, float]], ComplexList, StringMapList, NumberMapList, BooleanMapList, AnyMapList, typing.List[typing.Union[bool, IResolvable]]]\n)"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.from_map",
            "displayName": "from_map",
            "id": "cdktf.ListTerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "cdktf.ListTerraformIterator.from_map.parameter.map",
                "displayName": "map",
                "id": "cdktf.ListTerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %, %, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "str"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[int, float]"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "bool"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "import cdktf\n\ncdktf.ListTerraformIterator.from_map(\n  map: typing.Union[ComplexMap, typing.Mapping[typing.Any], typing.Mapping[str], typing.Mapping[typing.Union[int, float]], typing.Mapping[bool]]\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.ListTerraformIterator.property.key",
            "displayName": "key",
            "id": "cdktf.ListTerraformIterator.property.key",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {
              "summary": "Returns the currenty entry in the list or set that is being iterated over.",
              "remarks": "For lists this is the same as `iterator.value`. If you need the index,\nuse count using the escape hatch:\nhttps://www.terraform.io/cdktf/concepts/resources#escape-hatch"
            },
            "usage": "key: typing.Any"
          },
          {
            "fqn": "cdktf.ListTerraformIterator.property.value",
            "displayName": "value",
            "id": "cdktf.ListTerraformIterator.property.value",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {
              "summary": "Returns the value of the current item iterated over."
            },
            "usage": "value: typing.Any"
          }
        ],
        "fqn": "cdktf.ListTerraformIterator",
        "displayName": "ListTerraformIterator",
        "id": "cdktf.ListTerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.Manifest.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Manifest.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.Manifest.Initializer.parameter.version",
              "displayName": "version",
              "id": "cdktf.Manifest.Initializer.parameter.version",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.Manifest.Initializer.parameter.outdir",
              "displayName": "outdir",
              "id": "cdktf.Manifest.Initializer.parameter.outdir",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.Manifest(\n  version: str,\n  outdir: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IManifest",
            "displayName": "IManifest",
            "id": "cdktf.IManifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.Manifest.build_manifest",
            "displayName": "build_manifest",
            "id": "cdktf.Manifest.buildManifest",
            "parameters": [],
            "docs": {},
            "usage": "def build_manifest() -> IManifest"
          },
          {
            "fqn": "cdktf.Manifest.for_stack",
            "displayName": "for_stack",
            "id": "cdktf.Manifest.forStack",
            "parameters": [
              {
                "fqn": "cdktf.Manifest.for_stack.parameter.stack",
                "displayName": "stack",
                "id": "cdktf.Manifest.forStack.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def for_stack(\n  stack: TerraformStack\n) -> StackManifest"
          },
          {
            "fqn": "cdktf.Manifest.write_to_file",
            "displayName": "write_to_file",
            "id": "cdktf.Manifest.writeToFile",
            "parameters": [],
            "docs": {},
            "usage": "def write_to_file() -> None"
          }
        ],
        "staticMethods": [],
        "constants": [
          {
            "fqn": "cdktf.Manifest.property.fileName",
            "displayName": "fileName",
            "id": "cdktf.Manifest.property.fileName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fileName: str",
            "const": true
          },
          {
            "fqn": "cdktf.Manifest.property.stackFileName",
            "displayName": "stackFileName",
            "id": "cdktf.Manifest.property.stackFileName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "stackFileName: str",
            "const": true
          },
          {
            "fqn": "cdktf.Manifest.property.stacksFolder",
            "displayName": "stacksFolder",
            "id": "cdktf.Manifest.property.stacksFolder",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "stacksFolder: str",
            "const": true
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.Manifest.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.Manifest.property.outdir",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "outdir: str"
          },
          {
            "fqn": "cdktf.Manifest.property.stacks",
            "displayName": "stacks",
            "id": "cdktf.Manifest.property.stacks",
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackManifest",
                      "displayName": "StackManifest",
                      "fqn": "cdktf.StackManifest",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "stacks: typing.Mapping[StackManifest]"
          },
          {
            "fqn": "cdktf.Manifest.property.version",
            "displayName": "version",
            "id": "cdktf.Manifest.property.version",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "version: str"
          }
        ],
        "fqn": "cdktf.Manifest",
        "displayName": "Manifest",
        "id": "cdktf.Manifest",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.MapTerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.MapTerraformIterator.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.MapTerraformIterator.Initializer.parameter.map",
              "displayName": "map",
              "id": "cdktf.MapTerraformIterator.Initializer.parameter.map",
              "type": {
                "formattingPattern": "typing.Union[%, %, %, %, %, %, %, %]",
                "types": [
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.StringMap",
                        "displayName": "StringMap",
                        "fqn": "cdktf.StringMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.NumberMap",
                        "displayName": "NumberMap",
                        "fqn": "cdktf.NumberMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.BooleanMap",
                        "displayName": "BooleanMap",
                        "fqn": "cdktf.BooleanMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.AnyMap",
                        "displayName": "AnyMap",
                        "fqn": "cdktf.AnyMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "%",
                    "types": [
                      {
                        "id": "cdktf.ComplexMap",
                        "displayName": "ComplexMap",
                        "fqn": "cdktf.ComplexMap",
                        "packageName": "cdktf",
                        "packageVersion": "0.0.0"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "typing.Mapping[%]",
                    "types": [
                      {
                        "formattingPattern": "typing.Any"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "typing.Mapping[%]",
                    "types": [
                      {
                        "formattingPattern": "str"
                      }
                    ]
                  },
                  {
                    "formattingPattern": "typing.Mapping[%]",
                    "types": [
                      {
                        "formattingPattern": "typing.Union[int, float]"
                      }
                    ]
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.MapTerraformIterator(\n  map: typing.Union[StringMap, NumberMap, BooleanMap, AnyMap, ComplexMap, typing.Mapping[typing.Any], typing.Mapping[str], typing.Mapping[typing.Union[int, float]]]\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.MapTerraformIterator.dynamic",
            "displayName": "dynamic",
            "id": "cdktf.MapTerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.dynamic.parameter.attributes",
                "displayName": "attributes",
                "id": "cdktf.MapTerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def dynamic(\n  attributes: typing.Mapping[typing.Any]\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_any",
            "displayName": "get_any",
            "id": "cdktf.MapTerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_any.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_any(\n  attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_any_map",
            "displayName": "get_any_map",
            "id": "cdktf.MapTerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_any_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_any_map(\n  attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.MapTerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_boolean.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_boolean_map",
            "displayName": "get_boolean_map",
            "id": "cdktf.MapTerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_boolean_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_boolean_map(\n  attribute: str\n) -> typing.Mapping[bool]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_list",
            "displayName": "get_list",
            "id": "cdktf.MapTerraformIterator.getList",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_list.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  attribute: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_map",
            "displayName": "get_map",
            "id": "cdktf.MapTerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_map(\n  attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_number",
            "displayName": "get_number",
            "id": "cdktf.MapTerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_number.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  attribute: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_number_list",
            "displayName": "get_number_list",
            "id": "cdktf.MapTerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_number_list.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number_list(\n  attribute: str\n) -> typing.List[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_number_map",
            "displayName": "get_number_map",
            "id": "cdktf.MapTerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_number_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number_map(\n  attribute: str\n) -> typing.Mapping[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_string",
            "displayName": "get_string",
            "id": "cdktf.MapTerraformIterator.getString",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_string.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  attribute: str\n) -> str"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.get_string_map",
            "displayName": "get_string_map",
            "id": "cdktf.MapTerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.get_string_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.MapTerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_string_map(\n  attribute: str\n) -> typing.Mapping[str]"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.MapTerraformIterator.from_list",
            "displayName": "from_list",
            "id": "cdktf.MapTerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.from_list.parameter.list",
                "displayName": "list",
                "id": "cdktf.MapTerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %, %, %, %, %, %, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "str"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[int, float]"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[%, %]",
                          "types": [
                            {
                              "formattingPattern": "bool"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "import cdktf\n\ncdktf.MapTerraformIterator.from_list(\n  list: typing.Union[typing.List[str], IResolvable, typing.List[typing.Union[int, float]], ComplexList, StringMapList, NumberMapList, BooleanMapList, AnyMapList, typing.List[typing.Union[bool, IResolvable]]]\n)"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.from_map",
            "displayName": "from_map",
            "id": "cdktf.MapTerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "cdktf.MapTerraformIterator.from_map.parameter.map",
                "displayName": "map",
                "id": "cdktf.MapTerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %, %, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "str"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[int, float]"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "bool"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "import cdktf\n\ncdktf.MapTerraformIterator.from_map(\n  map: typing.Union[ComplexMap, typing.Mapping[typing.Any], typing.Mapping[str], typing.Mapping[typing.Union[int, float]], typing.Mapping[bool]]\n)"
          }
        ],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.MapTerraformIterator.property.key",
            "displayName": "key",
            "id": "cdktf.MapTerraformIterator.property.key",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Returns the key of the current entry in the map that is being iterated over."
            },
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.MapTerraformIterator.property.value",
            "displayName": "value",
            "id": "cdktf.MapTerraformIterator.property.value",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {
              "summary": "Returns the value of the current item iterated over."
            },
            "usage": "value: typing.Any"
          }
        ],
        "fqn": "cdktf.MapTerraformIterator",
        "displayName": "MapTerraformIterator",
        "id": "cdktf.MapTerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.NamedCloudWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NamedCloudWorkspace.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.NamedCloudWorkspace.Initializer.parameter.name",
              "displayName": "name",
              "id": "cdktf.NamedCloudWorkspace.Initializer.parameter.name",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.NamedCloudWorkspace(\n  name: str\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.NamedCloudWorkspace.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.NamedCloudWorkspace.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.NamedCloudWorkspace.property.name",
            "displayName": "name",
            "id": "cdktf.NamedCloudWorkspace.property.name",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "name: str"
          }
        ],
        "fqn": "cdktf.NamedCloudWorkspace",
        "displayName": "NamedCloudWorkspace",
        "id": "cdktf.NamedCloudWorkspace",
        "docs": {
          "summary": "The name of a single Terraform Cloud workspace.",
          "remarks": "You will only be able to use the workspace specified in the configuration with this working directory, and cannot manage workspaces from the CLI (e.g. terraform workspace select or terraform workspace new)."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.NamedRemoteWorkspace.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NamedRemoteWorkspace.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.NamedRemoteWorkspace.Initializer.parameter.name",
              "displayName": "name",
              "id": "cdktf.NamedRemoteWorkspace.Initializer.parameter.name",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.NamedRemoteWorkspace(\n  name: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.NamedRemoteWorkspace.property.name",
            "displayName": "name",
            "id": "cdktf.NamedRemoteWorkspace.property.name",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "name: str"
          }
        ],
        "fqn": "cdktf.NamedRemoteWorkspace",
        "displayName": "NamedRemoteWorkspace",
        "id": "cdktf.NamedRemoteWorkspace",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.NumberMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NumberMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.NumberMap.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.NumberMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.NumberMap.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.NumberMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.NumberMap(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.NumberMap.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.NumberMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.NumberMap.lookup",
            "displayName": "lookup",
            "id": "cdktf.NumberMap.lookup",
            "parameters": [
              {
                "fqn": "cdktf.NumberMap.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.NumberMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def lookup(\n  key: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.NumberMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.NumberMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.NumberMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.NumberMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.NumberMap.to_string",
            "displayName": "to_string",
            "id": "cdktf.NumberMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.NumberMap.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.NumberMap.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.NumberMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.NumberMap.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.NumberMap",
        "displayName": "NumberMap",
        "id": "cdktf.NumberMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.NumberMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.NumberMapList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.NumberMapList.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.NumberMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.NumberMapList.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.NumberMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.NumberMapList.Initializer.parameter.wraps_set",
              "displayName": "wraps_set",
              "id": "cdktf.NumberMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.NumberMapList(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str,\n  wraps_set: bool\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.NumberMapList.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.NumberMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.NumberMapList.get",
            "displayName": "get",
            "id": "cdktf.NumberMapList.get",
            "parameters": [
              {
                "fqn": "cdktf.NumberMapList.get.parameter.index",
                "displayName": "index",
                "id": "cdktf.NumberMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  index: typing.Union[int, float]\n) -> NumberMap"
          },
          {
            "fqn": "cdktf.NumberMapList.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.NumberMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.NumberMapList.interpolation_for_attribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.NumberMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  property: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.NumberMapList.resolve",
            "displayName": "resolve",
            "id": "cdktf.NumberMapList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.NumberMapList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.NumberMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.NumberMapList.to_string",
            "displayName": "to_string",
            "id": "cdktf.NumberMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.NumberMapList.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.NumberMapList.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.NumberMapList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.NumberMapList.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.NumberMapList",
        "displayName": "NumberMapList",
        "id": "cdktf.NumberMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.PrefixedRemoteWorkspaces.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.PrefixedRemoteWorkspaces.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.PrefixedRemoteWorkspaces.Initializer.parameter.prefix",
              "displayName": "prefix",
              "id": "cdktf.PrefixedRemoteWorkspaces.Initializer.parameter.prefix",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.PrefixedRemoteWorkspaces(\n  prefix: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.PrefixedRemoteWorkspaces.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.PrefixedRemoteWorkspaces.property.prefix",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "prefix: str"
          }
        ],
        "fqn": "cdktf.PrefixedRemoteWorkspaces",
        "displayName": "PrefixedRemoteWorkspaces",
        "id": "cdktf.PrefixedRemoteWorkspaces",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.StringConcat.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringConcat.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.StringConcat()"
        },
        "interfaces": [
          {
            "fqn": "cdktf.IFragmentConcatenator",
            "displayName": "IFragmentConcatenator",
            "id": "cdktf.IFragmentConcatenator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.StringConcat.join",
            "displayName": "join",
            "id": "cdktf.StringConcat.join",
            "parameters": [
              {
                "fqn": "cdktf.StringConcat.join.parameter.left",
                "displayName": "left",
                "id": "cdktf.StringConcat.join.parameter.left",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.StringConcat.join.parameter.right",
                "displayName": "right",
                "id": "cdktf.StringConcat.join.parameter.right",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Concatenates string fragments."
            },
            "usage": "def join(\n  left: typing.Any,\n  right: typing.Any\n) -> typing.Any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.StringConcat",
        "displayName": "StringConcat",
        "id": "cdktf.StringConcat",
        "docs": {
          "summary": "Converts all fragments to strings and concats those.",
          "remarks": "Drops 'undefined's."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.StringMap.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringMap.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.StringMap.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.StringMap.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.StringMap.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.StringMap.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.StringMap(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.StringMap.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.StringMap.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.StringMap.lookup",
            "displayName": "lookup",
            "id": "cdktf.StringMap.lookup",
            "parameters": [
              {
                "fqn": "cdktf.StringMap.lookup.parameter.key",
                "displayName": "key",
                "id": "cdktf.StringMap.lookup.parameter.key",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def lookup(\n  key: str\n) -> str"
          },
          {
            "fqn": "cdktf.StringMap.resolve",
            "displayName": "resolve",
            "id": "cdktf.StringMap.resolve",
            "parameters": [
              {
                "fqn": "cdktf.StringMap.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.StringMap.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.StringMap.to_string",
            "displayName": "to_string",
            "id": "cdktf.StringMap.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.StringMap.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.StringMap.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.StringMap.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.StringMap.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.StringMap",
        "displayName": "StringMap",
        "id": "cdktf.StringMap",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.StringMapList.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.StringMapList.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.StringMapList.Initializer.parameter.terraform_resource",
              "displayName": "terraform_resource",
              "id": "cdktf.StringMapList.Initializer.parameter.terraformResource",
              "type": {
                "formattingPattern": "%",
                "types": [
                  {
                    "id": "cdktf.IInterpolatingParent",
                    "displayName": "IInterpolatingParent",
                    "fqn": "cdktf.IInterpolatingParent",
                    "packageName": "cdktf",
                    "packageVersion": "0.0.0"
                  }
                ]
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.StringMapList.Initializer.parameter.terraform_attribute",
              "displayName": "terraform_attribute",
              "id": "cdktf.StringMapList.Initializer.parameter.terraformAttribute",
              "type": {
                "formattingPattern": "str"
              },
              "docs": {}
            },
            {
              "fqn": "cdktf.StringMapList.Initializer.parameter.wraps_set",
              "displayName": "wraps_set",
              "id": "cdktf.StringMapList.Initializer.parameter.wrapsSet",
              "type": {
                "formattingPattern": "bool"
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.StringMapList(\n  terraform_resource: IInterpolatingParent,\n  terraform_attribute: str,\n  wraps_set: bool\n)"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.StringMapList.compute_fqn",
            "displayName": "compute_fqn",
            "id": "cdktf.StringMapList.computeFqn",
            "parameters": [],
            "docs": {},
            "usage": "def compute_fqn() -> str"
          },
          {
            "fqn": "cdktf.StringMapList.get",
            "displayName": "get",
            "id": "cdktf.StringMapList.get",
            "parameters": [
              {
                "fqn": "cdktf.StringMapList.get.parameter.index",
                "displayName": "index",
                "id": "cdktf.StringMapList.get.parameter.index",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def get(\n  index: typing.Union[int, float]\n) -> StringMap"
          },
          {
            "fqn": "cdktf.StringMapList.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.StringMapList.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.StringMapList.interpolation_for_attribute.parameter.property",
                "displayName": "property",
                "id": "cdktf.StringMapList.interpolationForAttribute.parameter.property",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  property: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.StringMapList.resolve",
            "displayName": "resolve",
            "id": "cdktf.StringMapList.resolve",
            "parameters": [
              {
                "fqn": "cdktf.StringMapList.resolve.parameter._context",
                "displayName": "_context",
                "id": "cdktf.StringMapList.resolve.parameter._context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  _context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.StringMapList.to_string",
            "displayName": "to_string",
            "id": "cdktf.StringMapList.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.StringMapList.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.StringMapList.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          },
          {
            "fqn": "cdktf.StringMapList.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.StringMapList.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "fqn": "cdktf.StringMapList",
        "displayName": "StringMapList",
        "id": "cdktf.StringMapList",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TaggedCloudWorkspaces.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TaggedCloudWorkspaces.Initializer",
          "parameters": [
            {
              "fqn": "cdktf.TaggedCloudWorkspaces.Initializer.parameter.tags",
              "displayName": "tags",
              "id": "cdktf.TaggedCloudWorkspaces.Initializer.parameter.tags",
              "type": {
                "formattingPattern": "typing.List[%]",
                "types": [
                  {
                    "formattingPattern": "str"
                  }
                ]
              },
              "docs": {}
            }
          ],
          "usage": "import cdktf\n\ncdktf.TaggedCloudWorkspaces(\n  tags: typing.List[str]\n)"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TaggedCloudWorkspaces.to_terraform",
            "displayName": "to_terraform",
            "id": "cdktf.TaggedCloudWorkspaces.toTerraform",
            "parameters": [],
            "docs": {},
            "usage": "def to_terraform() -> typing.Any"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TaggedCloudWorkspaces.property.tags",
            "displayName": "tags",
            "id": "cdktf.TaggedCloudWorkspaces.property.tags",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "tags: typing.List[str]"
          }
        ],
        "fqn": "cdktf.TaggedCloudWorkspaces",
        "displayName": "TaggedCloudWorkspaces",
        "id": "cdktf.TaggedCloudWorkspaces",
        "docs": {
          "summary": "A set of Terraform Cloud workspace tags.",
          "remarks": "You will be able to use this working directory with any workspaces that have all of the specified tags, and can use the terraform workspace commands to switch between them or create new workspaces. New workspaces will automatically have the specified tags. This option conflicts with name."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformIterator.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformIterator.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.TerraformIterator()"
        },
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformIterator",
            "displayName": "ITerraformIterator",
            "id": "cdktf.ITerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [
          {
            "fqn": "cdktf.TerraformIterator.dynamic",
            "displayName": "dynamic",
            "id": "cdktf.TerraformIterator.dynamic",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.dynamic.parameter.attributes",
                "displayName": "attributes",
                "id": "cdktf.TerraformIterator.dynamic.parameter.attributes",
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def dynamic(\n  attributes: typing.Mapping[typing.Any]\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_any",
            "displayName": "get_any",
            "id": "cdktf.TerraformIterator.getAny",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_any.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getAny.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_any(\n  attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_any_map",
            "displayName": "get_any_map",
            "id": "cdktf.TerraformIterator.getAnyMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_any_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getAnyMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_any_map(\n  attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_boolean",
            "displayName": "get_boolean",
            "id": "cdktf.TerraformIterator.getBoolean",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_boolean.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getBoolean.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_boolean(\n  attribute: str\n) -> IResolvable"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_boolean_map",
            "displayName": "get_boolean_map",
            "id": "cdktf.TerraformIterator.getBooleanMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_boolean_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getBooleanMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_boolean_map(\n  attribute: str\n) -> typing.Mapping[bool]"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_list",
            "displayName": "get_list",
            "id": "cdktf.TerraformIterator.getList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_list.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getList.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_list(\n  attribute: str\n) -> typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_map",
            "displayName": "get_map",
            "id": "cdktf.TerraformIterator.getMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_map(\n  attribute: str\n) -> typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_number",
            "displayName": "get_number",
            "id": "cdktf.TerraformIterator.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_number.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getNumber.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number(\n  attribute: str\n) -> typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_number_list",
            "displayName": "get_number_list",
            "id": "cdktf.TerraformIterator.getNumberList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_number_list.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getNumberList.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number_list(\n  attribute: str\n) -> typing.List[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_number_map",
            "displayName": "get_number_map",
            "id": "cdktf.TerraformIterator.getNumberMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_number_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getNumberMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_number_map(\n  attribute: str\n) -> typing.Mapping[typing.Union[int, float]]"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_string",
            "displayName": "get_string",
            "id": "cdktf.TerraformIterator.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_string.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getString.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_string(\n  attribute: str\n) -> str"
          },
          {
            "fqn": "cdktf.TerraformIterator.get_string_map",
            "displayName": "get_string_map",
            "id": "cdktf.TerraformIterator.getStringMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.get_string_map.parameter.attribute",
                "displayName": "attribute",
                "id": "cdktf.TerraformIterator.getStringMap.parameter.attribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "name of the property to retrieve."
                }
              }
            ],
            "docs": {},
            "usage": "def get_string_map(\n  attribute: str\n) -> typing.Mapping[str]"
          }
        ],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformIterator.from_list",
            "displayName": "from_list",
            "id": "cdktf.TerraformIterator.fromList",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.from_list.parameter.list",
                "displayName": "list",
                "id": "cdktf.TerraformIterator.fromList.parameter.list",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %, %, %, %, %, %, %]",
                  "types": [
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "str"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.IResolvable",
                          "displayName": "IResolvable",
                          "fqn": "cdktf.IResolvable",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[int, float]"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexList",
                          "displayName": "ComplexList",
                          "fqn": "cdktf.ComplexList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.StringMapList",
                          "displayName": "StringMapList",
                          "fqn": "cdktf.StringMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.NumberMapList",
                          "displayName": "NumberMapList",
                          "fqn": "cdktf.NumberMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.BooleanMapList",
                          "displayName": "BooleanMapList",
                          "fqn": "cdktf.BooleanMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.AnyMapList",
                          "displayName": "AnyMapList",
                          "fqn": "cdktf.AnyMapList",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.List[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[%, %]",
                          "types": [
                            {
                              "formattingPattern": "bool"
                            },
                            {
                              "formattingPattern": "%",
                              "types": [
                                {
                                  "id": "cdktf.IResolvable",
                                  "displayName": "IResolvable",
                                  "fqn": "cdktf.IResolvable",
                                  "packageName": "cdktf",
                                  "packageVersion": "0.0.0"
                                }
                              ]
                            }
                          ]
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a list."
            },
            "usage": "import cdktf\n\ncdktf.TerraformIterator.from_list(\n  list: typing.Union[typing.List[str], IResolvable, typing.List[typing.Union[int, float]], ComplexList, StringMapList, NumberMapList, BooleanMapList, AnyMapList, typing.List[typing.Union[bool, IResolvable]]]\n)"
          },
          {
            "fqn": "cdktf.TerraformIterator.from_map",
            "displayName": "from_map",
            "id": "cdktf.TerraformIterator.fromMap",
            "parameters": [
              {
                "fqn": "cdktf.TerraformIterator.from_map.parameter.map",
                "displayName": "map",
                "id": "cdktf.TerraformIterator.fromMap.parameter.map",
                "type": {
                  "formattingPattern": "typing.Union[%, %, %, %, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.ComplexMap",
                          "displayName": "ComplexMap",
                          "fqn": "cdktf.ComplexMap",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Any"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "str"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "typing.Union[int, float]"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "typing.Mapping[%]",
                      "types": [
                        {
                          "formattingPattern": "bool"
                        }
                      ]
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Creates a new iterator from a map."
            },
            "usage": "import cdktf\n\ncdktf.TerraformIterator.from_map(\n  map: typing.Union[ComplexMap, typing.Mapping[typing.Any], typing.Mapping[str], typing.Mapping[typing.Union[int, float]], typing.Mapping[bool]]\n)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.TerraformIterator",
        "displayName": "TerraformIterator",
        "id": "cdktf.TerraformIterator",
        "docs": {}
      },
      {
        "initializer": {
          "fqn": "cdktf.TerraformSelf.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TerraformSelf.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.TerraformSelf()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.TerraformSelf.get_any",
            "displayName": "get_any",
            "id": "cdktf.TerraformSelf.getAny",
            "parameters": [
              {
                "fqn": "cdktf.TerraformSelf.get_any.parameter.key",
                "displayName": "key",
                "id": "cdktf.TerraformSelf.getAny.parameter.key",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getAny(\"hostPort\")`"
            },
            "usage": "import cdktf\n\ncdktf.TerraformSelf.get_any(\n  key: str\n)"
          },
          {
            "fqn": "cdktf.TerraformSelf.get_number",
            "displayName": "get_number",
            "id": "cdktf.TerraformSelf.getNumber",
            "parameters": [
              {
                "fqn": "cdktf.TerraformSelf.get_number.parameter.key",
                "displayName": "key",
                "id": "cdktf.TerraformSelf.getNumber.parameter.key",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getNumber(\"hostPort\")`"
            },
            "usage": "import cdktf\n\ncdktf.TerraformSelf.get_number(\n  key: str\n)"
          },
          {
            "fqn": "cdktf.TerraformSelf.get_string",
            "displayName": "get_string",
            "id": "cdktf.TerraformSelf.getString",
            "parameters": [
              {
                "fqn": "cdktf.TerraformSelf.get_string.parameter.key",
                "displayName": "key",
                "id": "cdktf.TerraformSelf.getString.parameter.key",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Only usable within a connection block to reference the connections parent resource.",
              "remarks": "Access a property on the resource like this: `getString(\"publicIp\")`"
            },
            "usage": "import cdktf\n\ncdktf.TerraformSelf.get_string(\n  key: str\n)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.TerraformSelf",
        "displayName": "TerraformSelf",
        "id": "cdktf.TerraformSelf",
        "docs": {
          "summary": "Expressions in connection blocks cannot refer to their parent resource by name.",
          "remarks": "References create dependencies, and referring to a resource by name within its own block would create a dependency cycle.\nInstead, expressions can use the self object, which represents the connection's parent resource and has all of that resource's attributes.\nFor example, use self.public_ip to reference an aws_instance's public_ip attribute."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.Testing.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Testing.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.Testing()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Testing.app",
            "displayName": "app",
            "id": "cdktf.Testing.app",
            "parameters": [
              {
                "fqn": "cdktf.Testing.app.parameter.enable_future_flags",
                "displayName": "enable_future_flags",
                "id": "cdktf.Testing.app.parameter.enableFutureFlags",
                "optional": true,
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.app.parameter.fake_cdktf_json_path",
                "displayName": "fake_cdktf_json_path",
                "id": "cdktf.Testing.app.parameter.fakeCdktfJsonPath",
                "optional": true,
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.app.parameter.outdir",
                "displayName": "outdir",
                "id": "cdktf.Testing.app.parameter.outdir",
                "optional": true,
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.app.parameter.stack_traces",
                "displayName": "stack_traces",
                "id": "cdktf.Testing.app.parameter.stackTraces",
                "optional": true,
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.app.parameter.stub_version",
                "displayName": "stub_version",
                "id": "cdktf.Testing.app.parameter.stubVersion",
                "optional": true,
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Returns an app for testing with the following properties: - Output directory is a temp dir."
            },
            "usage": "import cdktf\n\ncdktf.Testing.app(\n  enable_future_flags: bool = None,\n  fake_cdktf_json_path: bool = None,\n  outdir: str = None,\n  stack_traces: bool = None,\n  stub_version: bool = None\n)"
          },
          {
            "fqn": "cdktf.Testing.enable_future_flags",
            "displayName": "enable_future_flags",
            "id": "cdktf.Testing.enableFutureFlags",
            "parameters": [
              {
                "fqn": "cdktf.Testing.enable_future_flags.parameter.app",
                "displayName": "app",
                "id": "cdktf.Testing.enableFutureFlags.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.enable_future_flags(\n  app: App\n)"
          },
          {
            "fqn": "cdktf.Testing.fake_cdktf_json_path",
            "displayName": "fake_cdktf_json_path",
            "id": "cdktf.Testing.fakeCdktfJsonPath",
            "parameters": [
              {
                "fqn": "cdktf.Testing.fake_cdktf_json_path.parameter.app",
                "displayName": "app",
                "id": "cdktf.Testing.fakeCdktfJsonPath.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.fake_cdktf_json_path(\n  app: App\n)"
          },
          {
            "fqn": "cdktf.Testing.full_synth",
            "displayName": "full_synth",
            "id": "cdktf.Testing.fullSynth",
            "parameters": [
              {
                "fqn": "cdktf.Testing.full_synth.parameter.stack",
                "displayName": "stack",
                "id": "cdktf.Testing.fullSynth.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.full_synth(\n  stack: TerraformStack\n)"
          },
          {
            "fqn": "cdktf.Testing.render_construct_tree",
            "displayName": "render_construct_tree",
            "id": "cdktf.Testing.renderConstructTree",
            "parameters": [
              {
                "fqn": "cdktf.Testing.render_construct_tree.parameter.construct",
                "displayName": "construct",
                "id": "cdktf.Testing.renderConstructTree.parameter.construct",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.render_construct_tree(\n  construct: IConstruct\n)"
          },
          {
            "fqn": "cdktf.Testing.setup_jest",
            "displayName": "setup_jest",
            "id": "cdktf.Testing.setupJest",
            "parameters": [],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.setup_jest()"
          },
          {
            "fqn": "cdktf.Testing.stub_version",
            "displayName": "stub_version",
            "id": "cdktf.Testing.stubVersion",
            "parameters": [
              {
                "fqn": "cdktf.Testing.stub_version.parameter.app",
                "displayName": "app",
                "id": "cdktf.Testing.stubVersion.parameter.app",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.App",
                      "displayName": "App",
                      "fqn": "cdktf.App",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.stub_version(\n  app: App\n)"
          },
          {
            "fqn": "cdktf.Testing.synth",
            "displayName": "synth",
            "id": "cdktf.Testing.synth",
            "parameters": [
              {
                "fqn": "cdktf.Testing.synth.parameter.stack",
                "displayName": "stack",
                "id": "cdktf.Testing.synth.parameter.stack",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformStack",
                      "displayName": "TerraformStack",
                      "fqn": "cdktf.TerraformStack",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.synth.parameter.run_validations",
                "displayName": "run_validations",
                "id": "cdktf.Testing.synth.parameter.runValidations",
                "optional": true,
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Returns the Terraform synthesized JSON."
            },
            "usage": "import cdktf\n\ncdktf.Testing.synth(\n  stack: TerraformStack,\n  run_validations: bool = None\n)"
          },
          {
            "fqn": "cdktf.Testing.synth_scope",
            "displayName": "synth_scope",
            "id": "cdktf.Testing.synthScope",
            "parameters": [
              {
                "fqn": "cdktf.Testing.synth_scope.parameter.fn",
                "displayName": "fn",
                "id": "cdktf.Testing.synthScope.parameter.fn",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IScopeCallback",
                      "displayName": "IScopeCallback",
                      "fqn": "cdktf.IScopeCallback",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.synth_scope(\n  fn: IScopeCallback\n)"
          },
          {
            "fqn": "cdktf.Testing.to_be_valid_terraform",
            "displayName": "to_be_valid_terraform",
            "id": "cdktf.Testing.toBeValidTerraform",
            "parameters": [
              {
                "fqn": "cdktf.Testing.to_be_valid_terraform.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toBeValidTerraform.parameter.received",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.to_be_valid_terraform(\n  received: str\n)"
          },
          {
            "fqn": "cdktf.Testing.to_have_data_source",
            "displayName": "to_have_data_source",
            "id": "cdktf.Testing.toHaveDataSource",
            "parameters": [
              {
                "fqn": "cdktf.Testing.to_have_data_source.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toHaveDataSource.parameter.received",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.to_have_data_source.parameter.resource_type",
                "displayName": "resource_type",
                "id": "cdktf.Testing.toHaveDataSource.parameter.resourceType",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.to_have_data_source(\n  received: str,\n  resource_type: str\n)"
          },
          {
            "fqn": "cdktf.Testing.to_have_data_source_with_properties",
            "displayName": "to_have_data_source_with_properties",
            "id": "cdktf.Testing.toHaveDataSourceWithProperties",
            "parameters": [
              {
                "fqn": "cdktf.Testing.to_have_data_source_with_properties.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.received",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.to_have_data_source_with_properties.parameter.resource_type",
                "displayName": "resource_type",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.resourceType",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.to_have_data_source_with_properties.parameter.properties",
                "displayName": "properties",
                "id": "cdktf.Testing.toHaveDataSourceWithProperties.parameter.properties",
                "optional": true,
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.to_have_data_source_with_properties(\n  received: str,\n  resource_type: str,\n  properties: typing.Mapping[typing.Any] = None\n)"
          },
          {
            "fqn": "cdktf.Testing.to_have_resource",
            "displayName": "to_have_resource",
            "id": "cdktf.Testing.toHaveResource",
            "parameters": [
              {
                "fqn": "cdktf.Testing.to_have_resource.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toHaveResource.parameter.received",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.to_have_resource.parameter.resource_type",
                "displayName": "resource_type",
                "id": "cdktf.Testing.toHaveResource.parameter.resourceType",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.to_have_resource(\n  received: str,\n  resource_type: str\n)"
          },
          {
            "fqn": "cdktf.Testing.to_have_resource_with_properties",
            "displayName": "to_have_resource_with_properties",
            "id": "cdktf.Testing.toHaveResourceWithProperties",
            "parameters": [
              {
                "fqn": "cdktf.Testing.to_have_resource_with_properties.parameter.received",
                "displayName": "received",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.received",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.to_have_resource_with_properties.parameter.resource_type",
                "displayName": "resource_type",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.resourceType",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Testing.to_have_resource_with_properties.parameter.properties",
                "displayName": "properties",
                "id": "cdktf.Testing.toHaveResourceWithProperties.parameter.properties",
                "optional": true,
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.Testing.to_have_resource_with_properties(\n  received: str,\n  resource_type: str,\n  properties: typing.Mapping[typing.Any] = None\n)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Testing",
        "displayName": "Testing",
        "id": "cdktf.Testing",
        "docs": {
          "summary": "Testing utilities for cdktf applications."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.Token.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Token.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.Token()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Token.as_any",
            "displayName": "as_any",
            "id": "cdktf.Token.asAny",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_any.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asAny.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a resolvable representation of the given value."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_any(\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Token.as_any_map",
            "displayName": "as_any_map",
            "id": "cdktf.Token.asAnyMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_any_map.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asAnyMap.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.as_any_map.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Token.asAnyMap.parameter.displayHint",
                "optional": true,
                "default": "- no display hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "A hint for the Token's purpose when stringifying it."
                }
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_any_map(\n  value: typing.Any,\n  display_hint: str = None\n)"
          },
          {
            "fqn": "cdktf.Token.as_boolean_map",
            "displayName": "as_boolean_map",
            "id": "cdktf.Token.asBooleanMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_boolean_map.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asBooleanMap.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.as_boolean_map.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Token.asBooleanMap.parameter.displayHint",
                "optional": true,
                "default": "- no display hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "A hint for the Token's purpose when stringifying it."
                }
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_boolean_map(\n  value: typing.Any,\n  display_hint: str = None\n)"
          },
          {
            "fqn": "cdktf.Token.as_list",
            "displayName": "as_list",
            "id": "cdktf.Token.asList",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_list.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asList.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.as_list.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Token.asList.parameter.displayHint",
                "optional": true,
                "default": "- no display hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "A hint for the Token's purpose when stringifying it."
                }
              }
            ],
            "docs": {
              "summary": "Return a reversible list representation of this token."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_list(\n  value: typing.Any,\n  display_hint: str = None\n)"
          },
          {
            "fqn": "cdktf.Token.as_map",
            "displayName": "as_map",
            "id": "cdktf.Token.asMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_map.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asMap.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.as_map.parameter.map_value",
                "displayName": "map_value",
                "id": "cdktf.Token.asMap.parameter.mapValue",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.as_map.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Token.asMap.parameter.displayHint",
                "optional": true,
                "default": "- no display hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "A hint for the Token's purpose when stringifying it."
                }
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_map(\n  value: typing.Any,\n  map_value: typing.Any,\n  display_hint: str = None\n)"
          },
          {
            "fqn": "cdktf.Token.as_number",
            "displayName": "as_number",
            "id": "cdktf.Token.asNumber",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_number.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asNumber.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible number representation of this token."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_number(\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Token.as_number_list",
            "displayName": "as_number_list",
            "id": "cdktf.Token.asNumberList",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_number_list.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asNumberList.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return a reversible list representation of this token."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_number_list(\n  value: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Token.as_number_map",
            "displayName": "as_number_map",
            "id": "cdktf.Token.asNumberMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_number_map.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asNumberMap.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.as_number_map.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Token.asNumberMap.parameter.displayHint",
                "optional": true,
                "default": "- no display hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "A hint for the Token's purpose when stringifying it."
                }
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_number_map(\n  value: typing.Any,\n  display_hint: str = None\n)"
          },
          {
            "fqn": "cdktf.Token.as_string",
            "displayName": "as_string",
            "id": "cdktf.Token.asString",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_string.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asString.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.as_string.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Token.asString.parameter.displayHint",
                "optional": true,
                "default": "- no display hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "A hint for the Token's purpose when stringifying it."
                }
              }
            ],
            "docs": {
              "summary": "Return a reversible string representation of this token.",
              "remarks": "If the Token is initialized with a literal, the stringified value of the\nliteral is returned. Otherwise, a special quoted string representation\nof the Token is returned that can be embedded into other strings.\n\nStrings with quoted Tokens in them can be restored back into\ncomplex values with the Tokens restored by calling `resolve()`\non the string."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_string(\n  value: typing.Any,\n  display_hint: str = None\n)"
          },
          {
            "fqn": "cdktf.Token.as_string_map",
            "displayName": "as_string_map",
            "id": "cdktf.Token.asStringMap",
            "parameters": [
              {
                "fqn": "cdktf.Token.as_string_map.parameter.value",
                "displayName": "value",
                "id": "cdktf.Token.asStringMap.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.Token.as_string_map.parameter.display_hint",
                "displayName": "display_hint",
                "id": "cdktf.Token.asStringMap.parameter.displayHint",
                "optional": true,
                "default": "- no display hint",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {
                  "summary": "A hint for the Token's purpose when stringifying it."
                }
              }
            ],
            "docs": {
              "summary": "Return a reversible map representation of this token."
            },
            "usage": "import cdktf\n\ncdktf.Token.as_string_map(\n  value: typing.Any,\n  display_hint: str = None\n)"
          },
          {
            "fqn": "cdktf.Token.is_unresolved",
            "displayName": "is_unresolved",
            "id": "cdktf.Token.isUnresolved",
            "parameters": [
              {
                "fqn": "cdktf.Token.is_unresolved.parameter.obj",
                "displayName": "obj",
                "id": "cdktf.Token.isUnresolved.parameter.obj",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "The object to test."
                }
              }
            ],
            "docs": {
              "summary": "Returns true if obj represents an unresolved value.",
              "remarks": "One of these must be true:\n\n* `obj` is an IResolvable\n* `obj` is a string containing at least one encoded `IResolvable`\n* `obj` is either an encoded number or list\n\nThis does NOT recurse into lists or objects to see if they\ncontaining resolvables."
            },
            "usage": "import cdktf\n\ncdktf.Token.is_unresolved(\n  obj: typing.Any\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.Token.property.ANY_MAP_TOKEN_VALUE",
            "displayName": "ANY_MAP_TOKEN_VALUE",
            "id": "cdktf.Token.property.ANY_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Any map token representation."
            },
            "usage": "ANY_MAP_TOKEN_VALUE: str",
            "const": true
          },
          {
            "fqn": "cdktf.Token.property.NUMBER_MAP_TOKEN_VALUE",
            "displayName": "NUMBER_MAP_TOKEN_VALUE",
            "id": "cdktf.Token.property.NUMBER_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "Number Map token value representation."
            },
            "usage": "NUMBER_MAP_TOKEN_VALUE: typing.Union[int, float]",
            "const": true
          },
          {
            "fqn": "cdktf.Token.property.STRING_MAP_TOKEN_VALUE",
            "displayName": "STRING_MAP_TOKEN_VALUE",
            "id": "cdktf.Token.property.STRING_MAP_TOKEN_VALUE",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "String Map token value representation."
            },
            "usage": "STRING_MAP_TOKEN_VALUE: str",
            "const": true
          }
        ],
        "properties": [],
        "fqn": "cdktf.Token",
        "displayName": "Token",
        "id": "cdktf.Token",
        "docs": {
          "summary": "Represents a special or lazily-evaluated value.",
          "remarks": "Can be used to delay evaluation of a certain value in case, for example,\nthat it requires some context or late-bound data. Can also be used to\nmark values that need special processing at document rendering time.\n\nTokens can be embedded into strings while retaining their original\nsemantics."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.Tokenization.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.Tokenization.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.Tokenization()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.Tokenization.is_resolvable",
            "displayName": "is_resolvable",
            "id": "cdktf.Tokenization.isResolvable",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.is_resolvable.parameter.obj",
                "displayName": "obj",
                "id": "cdktf.Tokenization.isResolvable.parameter.obj",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Return whether the given object is an IResolvable object.",
              "remarks": "This is different from Token.isUnresolved() which will also check for\nencoded Tokens, whereas this method will only do a type check on the given\nobject."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.is_resolvable(\n  obj: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Tokenization.resolve",
            "displayName": "resolve",
            "id": "cdktf.Tokenization.resolve",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.resolve.parameter.obj",
                "displayName": "obj",
                "id": "cdktf.Tokenization.resolve.parameter.obj",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "The object to resolve."
                }
              },
              {
                "fqn": "cdktf.Tokenization.resolve.parameter.resolver",
                "displayName": "resolver",
                "id": "cdktf.Tokenization.resolve.parameter.resolver",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITokenResolver",
                      "displayName": "ITokenResolver",
                      "fqn": "cdktf.ITokenResolver",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "The resolver to apply to any resolvable tokens found."
                }
              },
              {
                "fqn": "cdktf.Tokenization.resolve.parameter.scope",
                "displayName": "scope",
                "id": "cdktf.Tokenization.resolve.parameter.scope",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {
                  "summary": "The scope from which resolution is performed."
                }
              },
              {
                "fqn": "cdktf.Tokenization.resolve.parameter.preparing",
                "displayName": "preparing",
                "id": "cdktf.Tokenization.resolve.parameter.preparing",
                "optional": true,
                "default": "false",
                "type": {
                  "formattingPattern": "bool"
                },
                "docs": {
                  "summary": "Whether the resolution is being executed during the prepare phase or not."
                }
              }
            ],
            "docs": {
              "summary": "Resolves an object by evaluating all tokens and removing any undefined or empty objects or arrays.",
              "remarks": "Values can only be primitives, arrays or tokens. Other objects (i.e. with methods) will be rejected."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.resolve(\n  obj: typing.Any,\n  resolver: ITokenResolver,\n  scope: IConstruct,\n  preparing: bool = None\n)"
          },
          {
            "fqn": "cdktf.Tokenization.reverse",
            "displayName": "reverse",
            "id": "cdktf.Tokenization.reverse",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverse.parameter.x",
                "displayName": "x",
                "id": "cdktf.Tokenization.reverse.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Reverse any value into Resolvables, if possible."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.reverse(\n  x: typing.Any\n)"
          },
          {
            "fqn": "cdktf.Tokenization.reverse_list",
            "displayName": "reverse_list",
            "id": "cdktf.Tokenization.reverseList",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverse_list.parameter.l",
                "displayName": "l",
                "id": "cdktf.Tokenization.reverseList.parameter.l",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a list."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.reverse_list(\n  l: typing.List[str]\n)"
          },
          {
            "fqn": "cdktf.Tokenization.reverse_map",
            "displayName": "reverse_map",
            "id": "cdktf.Tokenization.reverseMap",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverse_map.parameter.m",
                "displayName": "m",
                "id": "cdktf.Tokenization.reverseMap.parameter.m",
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a map."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.reverse_map(\n  m: typing.Mapping[typing.Any]\n)"
          },
          {
            "fqn": "cdktf.Tokenization.reverse_number",
            "displayName": "reverse_number",
            "id": "cdktf.Tokenization.reverseNumber",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverse_number.parameter.n",
                "displayName": "n",
                "id": "cdktf.Tokenization.reverseNumber.parameter.n",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a number."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.reverse_number(\n  n: typing.Union[int, float]\n)"
          },
          {
            "fqn": "cdktf.Tokenization.reverse_number_list",
            "displayName": "reverse_number_list",
            "id": "cdktf.Tokenization.reverseNumberList",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverse_number_list.parameter.l",
                "displayName": "l",
                "id": "cdktf.Tokenization.reverseNumberList.parameter.l",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Union[int, float]"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a Tokenized value from a list."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.reverse_number_list(\n  l: typing.List[typing.Union[int, float]]\n)"
          },
          {
            "fqn": "cdktf.Tokenization.reverse_string",
            "displayName": "reverse_string",
            "id": "cdktf.Tokenization.reverseString",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.reverse_string.parameter.s",
                "displayName": "s",
                "id": "cdktf.Tokenization.reverseString.parameter.s",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Un-encode a string potentially containing encoded tokens."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.reverse_string(\n  s: str\n)"
          },
          {
            "fqn": "cdktf.Tokenization.stringify_number",
            "displayName": "stringify_number",
            "id": "cdktf.Tokenization.stringifyNumber",
            "parameters": [
              {
                "fqn": "cdktf.Tokenization.stringify_number.parameter.x",
                "displayName": "x",
                "id": "cdktf.Tokenization.stringifyNumber.parameter.x",
                "type": {
                  "formattingPattern": "typing.Union[int, float]"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Stringify a number directly or lazily if it's a Token.",
              "remarks": "If it is an object (i.e., { Ref: 'SomeLogicalId' }), return it as-is."
            },
            "usage": "import cdktf\n\ncdktf.Tokenization.stringify_number(\n  x: typing.Union[int, float]\n)"
          }
        ],
        "constants": [],
        "properties": [],
        "fqn": "cdktf.Tokenization",
        "displayName": "Tokenization",
        "id": "cdktf.Tokenization",
        "docs": {
          "summary": "Less oft-needed functions to manipulate Tokens."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.TokenizedStringFragments.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.TokenizedStringFragments.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.TokenizedStringFragments()"
        },
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.TokenizedStringFragments.add_intrinsic",
            "displayName": "add_intrinsic",
            "id": "cdktf.TokenizedStringFragments.addIntrinsic",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.add_intrinsic.parameter.value",
                "displayName": "value",
                "id": "cdktf.TokenizedStringFragments.addIntrinsic.parameter.value",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "the intrinsic value to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds an intrinsic fragment."
            },
            "usage": "def add_intrinsic(\n  value: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.add_literal",
            "displayName": "add_literal",
            "id": "cdktf.TokenizedStringFragments.addLiteral",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.add_literal.parameter.lit",
                "displayName": "lit",
                "id": "cdktf.TokenizedStringFragments.addLiteral.parameter.lit",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {
                  "summary": "the literal to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds a literal fragment."
            },
            "usage": "def add_literal(\n  lit: typing.Any\n) -> None"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.add_token",
            "displayName": "add_token",
            "id": "cdktf.TokenizedStringFragments.addToken",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.add_token.parameter.token",
                "displayName": "token",
                "id": "cdktf.TokenizedStringFragments.addToken.parameter.token",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {
                  "summary": "the token to add."
                }
              }
            ],
            "docs": {
              "summary": "Adds a token fragment."
            },
            "usage": "def add_token(\n  token: IResolvable\n) -> None"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.join",
            "displayName": "join",
            "id": "cdktf.TokenizedStringFragments.join",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.join.parameter.concat",
                "displayName": "concat",
                "id": "cdktf.TokenizedStringFragments.join.parameter.concat",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IFragmentConcatenator",
                      "displayName": "IFragmentConcatenator",
                      "fqn": "cdktf.IFragmentConcatenator",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Combine the string fragments using the given joiner.",
              "remarks": "If there are any"
            },
            "usage": "def join(\n  concat: IFragmentConcatenator\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.map_tokens",
            "displayName": "map_tokens",
            "id": "cdktf.TokenizedStringFragments.mapTokens",
            "parameters": [
              {
                "fqn": "cdktf.TokenizedStringFragments.map_tokens.parameter.mapper",
                "displayName": "mapper",
                "id": "cdktf.TokenizedStringFragments.mapTokens.parameter.mapper",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITokenMapper",
                      "displayName": "ITokenMapper",
                      "fqn": "cdktf.ITokenMapper",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Apply a transformation function to all tokens in the string."
            },
            "usage": "def map_tokens(\n  mapper: ITokenMapper\n) -> TokenizedStringFragments"
          }
        ],
        "staticMethods": [],
        "constants": [],
        "properties": [
          {
            "fqn": "cdktf.TokenizedStringFragments.property.first_value",
            "displayName": "first_value",
            "id": "cdktf.TokenizedStringFragments.property.firstValue",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {
              "summary": "Returns the first value."
            },
            "usage": "first_value: typing.Any"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.intrinsic",
            "displayName": "intrinsic",
            "id": "cdktf.TokenizedStringFragments.property.intrinsic",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all intrinsic fragments from this string."
            },
            "usage": "intrinsic: typing.List[IResolvable]"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.length",
            "displayName": "length",
            "id": "cdktf.TokenizedStringFragments.property.length",
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "Returns the number of fragments."
            },
            "usage": "length: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.literals",
            "displayName": "literals",
            "id": "cdktf.TokenizedStringFragments.property.literals",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all literals from this string."
            },
            "usage": "literals: typing.List[IResolvable]"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.tokens",
            "displayName": "tokens",
            "id": "cdktf.TokenizedStringFragments.property.tokens",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Return all Tokens from this string."
            },
            "usage": "tokens: typing.List[IResolvable]"
          },
          {
            "fqn": "cdktf.TokenizedStringFragments.property.first_token",
            "displayName": "first_token",
            "id": "cdktf.TokenizedStringFragments.property.firstToken",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IResolvable",
                  "displayName": "IResolvable",
                  "fqn": "cdktf.IResolvable",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "Returns the first token."
            },
            "usage": "first_token: IResolvable"
          }
        ],
        "fqn": "cdktf.TokenizedStringFragments",
        "displayName": "TokenizedStringFragments",
        "id": "cdktf.TokenizedStringFragments",
        "docs": {
          "summary": "Fragments of a concatenated string containing stringified Tokens."
        }
      },
      {
        "initializer": {
          "fqn": "cdktf.VariableType.Initializer",
          "displayName": "Initializer",
          "id": "cdktf.VariableType.Initializer",
          "parameters": [],
          "usage": "import cdktf\n\ncdktf.VariableType()"
        },
        "interfaces": [],
        "instanceMethods": [],
        "staticMethods": [
          {
            "fqn": "cdktf.VariableType.list",
            "displayName": "list",
            "id": "cdktf.VariableType.list",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.list.parameter.type",
                "displayName": "type",
                "id": "cdktf.VariableType.list.parameter.type",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.VariableType.list(\n  type: str\n)"
          },
          {
            "fqn": "cdktf.VariableType.map",
            "displayName": "map",
            "id": "cdktf.VariableType.map",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.map.parameter.type",
                "displayName": "type",
                "id": "cdktf.VariableType.map.parameter.type",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.VariableType.map(\n  type: str\n)"
          },
          {
            "fqn": "cdktf.VariableType.object",
            "displayName": "object",
            "id": "cdktf.VariableType.object",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.object.parameter.attributes",
                "displayName": "attributes",
                "id": "cdktf.VariableType.object.parameter.attributes",
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.VariableType.object(\n  attributes: typing.Mapping[str]\n)"
          },
          {
            "fqn": "cdktf.VariableType.set",
            "displayName": "set",
            "id": "cdktf.VariableType.set",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.set.parameter.type",
                "displayName": "type",
                "id": "cdktf.VariableType.set.parameter.type",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.VariableType.set(\n  type: str\n)"
          },
          {
            "fqn": "cdktf.VariableType.tuple",
            "displayName": "tuple",
            "id": "cdktf.VariableType.tuple",
            "parameters": [
              {
                "fqn": "cdktf.VariableType.tuple.parameter.elements",
                "displayName": "elements",
                "id": "cdktf.VariableType.tuple.parameter.elements",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "import cdktf\n\ncdktf.VariableType.tuple(\n  elements: str\n)"
          }
        ],
        "constants": [
          {
            "fqn": "cdktf.VariableType.property.ANY",
            "displayName": "ANY",
            "id": "cdktf.VariableType.property.ANY",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "ANY: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.BOOL",
            "displayName": "BOOL",
            "id": "cdktf.VariableType.property.BOOL",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "BOOL: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.LIST",
            "displayName": "LIST",
            "id": "cdktf.VariableType.property.LIST",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "LIST: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.LIST_BOOL",
            "displayName": "LIST_BOOL",
            "id": "cdktf.VariableType.property.LIST_BOOL",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "LIST_BOOL: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.LIST_NUMBER",
            "displayName": "LIST_NUMBER",
            "id": "cdktf.VariableType.property.LIST_NUMBER",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "LIST_NUMBER: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.LIST_STRING",
            "displayName": "LIST_STRING",
            "id": "cdktf.VariableType.property.LIST_STRING",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "LIST_STRING: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.MAP",
            "displayName": "MAP",
            "id": "cdktf.VariableType.property.MAP",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "MAP: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.MAP_BOOL",
            "displayName": "MAP_BOOL",
            "id": "cdktf.VariableType.property.MAP_BOOL",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "MAP_BOOL: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.MAP_NUMBER",
            "displayName": "MAP_NUMBER",
            "id": "cdktf.VariableType.property.MAP_NUMBER",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "MAP_NUMBER: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.MAP_STRING",
            "displayName": "MAP_STRING",
            "id": "cdktf.VariableType.property.MAP_STRING",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "MAP_STRING: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.NUMBER",
            "displayName": "NUMBER",
            "id": "cdktf.VariableType.property.NUMBER",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "NUMBER: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.SET",
            "displayName": "SET",
            "id": "cdktf.VariableType.property.SET",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "SET: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.SET_BOOL",
            "displayName": "SET_BOOL",
            "id": "cdktf.VariableType.property.SET_BOOL",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "SET_BOOL: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.SET_NUMBER",
            "displayName": "SET_NUMBER",
            "id": "cdktf.VariableType.property.SET_NUMBER",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "SET_NUMBER: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.SET_STRING",
            "displayName": "SET_STRING",
            "id": "cdktf.VariableType.property.SET_STRING",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "SET_STRING: str",
            "const": true
          },
          {
            "fqn": "cdktf.VariableType.property.STRING",
            "displayName": "STRING",
            "id": "cdktf.VariableType.property.STRING",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "STRING: str",
            "const": true
          }
        ],
        "properties": [],
        "fqn": "cdktf.VariableType",
        "displayName": "VariableType",
        "id": "cdktf.VariableType",
        "docs": {}
      }
    ],
    "structs": [
      {
        "fqn": "cdktf.AppOptions",
        "displayName": "AppOptions",
        "id": "cdktf.AppOptions",
        "properties": [
          {
            "fqn": "cdktf.AppOptions.property.context",
            "displayName": "context",
            "id": "cdktf.AppOptions.property.context",
            "optional": true,
            "default": "- no additional context",
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {
              "summary": "Additional context values for the application.",
              "remarks": "Context set by the CLI or the `context` key in `cdktf.json` has precedence.\n\nContext can be read from any construct using `node.getContext(key)`."
            },
            "usage": "context: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.AppOptions.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.AppOptions.property.outdir",
            "optional": true,
            "default": "- CDKTF_OUTDIR if defined, otherwise \"cdktf.out\"",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The directory to output Terraform resources."
            },
            "usage": "outdir: str"
          },
          {
            "fqn": "cdktf.AppOptions.property.skip_validation",
            "displayName": "skip_validation",
            "id": "cdktf.AppOptions.property.skipValidation",
            "optional": true,
            "default": "- false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Whether to skip the validation during synthesis of the app."
            },
            "usage": "skip_validation: bool"
          },
          {
            "fqn": "cdktf.AppOptions.property.stack_traces",
            "displayName": "stack_traces",
            "id": "cdktf.AppOptions.property.stackTraces",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "stack_traces: bool"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.AppOptions(\n  context: typing.Mapping[typing.Any] = None,\n  outdir: str = None,\n  skip_validation: bool = None,\n  stack_traces: bool = None\n)"
      },
      {
        "fqn": "cdktf.ArtifactoryBackendProps",
        "displayName": "ArtifactoryBackendProps",
        "id": "cdktf.ArtifactoryBackendProps",
        "properties": [
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.ArtifactoryBackendProps.property.password",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - The password."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.repo",
            "displayName": "repo",
            "id": "cdktf.ArtifactoryBackendProps.property.repo",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - The repository name."
            },
            "usage": "repo: str"
          },
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.subpath",
            "displayName": "subpath",
            "id": "cdktf.ArtifactoryBackendProps.property.subpath",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - Path within the repository."
            },
            "usage": "subpath: str"
          },
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.url",
            "displayName": "url",
            "id": "cdktf.ArtifactoryBackendProps.property.url",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - The URL.",
              "remarks": "Note that this is the base url to artifactory not the full repo and subpath."
            },
            "usage": "url: str"
          },
          {
            "fqn": "cdktf.ArtifactoryBackendProps.property.username",
            "displayName": "username",
            "id": "cdktf.ArtifactoryBackendProps.property.username",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - The username."
            },
            "usage": "username: str"
          }
        ],
        "docs": {
          "summary": "Stores the state as an artifact in a given repository in Artifactory.",
          "remarks": "Generic HTTP repositories are supported, and state from different configurations\nmay be kept at different subpaths within the repository.\n\nNote: The URL must include the path to the Artifactory installation.\nIt will likely end in /artifactory.\n\nThis backend does not support state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/artifactory"
        },
        "usage": "import cdktf\n\ncdktf.ArtifactoryBackendProps(\n  password: str,\n  repo: str,\n  subpath: str,\n  url: str,\n  username: str\n)"
      },
      {
        "fqn": "cdktf.AzurermBackendProps",
        "displayName": "AzurermBackendProps",
        "id": "cdktf.AzurermBackendProps",
        "properties": [
          {
            "fqn": "cdktf.AzurermBackendProps.property.container_name",
            "displayName": "container_name",
            "id": "cdktf.AzurermBackendProps.property.containerName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Container within the Storage Account."
            },
            "usage": "container_name: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.AzurermBackendProps.property.key",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
            },
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.storage_account_name",
            "displayName": "storage_account_name",
            "id": "cdktf.AzurermBackendProps.property.storageAccountName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Account."
            },
            "usage": "storage_account_name: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.access_key",
            "displayName": "access_key",
            "id": "cdktf.AzurermBackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable."
            },
            "usage": "access_key: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.client_certificate_password",
            "displayName": "client_certificate_password",
            "id": "cdktf.AzurermBackendProps.property.clientCertificatePassword",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable."
            },
            "usage": "client_certificate_password: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.client_certificate_path",
            "displayName": "client_certificate_path",
            "id": "cdktf.AzurermBackendProps.property.clientCertificatePath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable."
            },
            "usage": "client_certificate_path: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.client_id",
            "displayName": "client_id",
            "id": "cdktf.AzurermBackendProps.property.clientId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Client ID of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable."
            },
            "usage": "client_id: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.client_secret",
            "displayName": "client_secret",
            "id": "cdktf.AzurermBackendProps.property.clientSecret",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Client Secret of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable."
            },
            "usage": "client_secret: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.AzurermBackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable.",
              "remarks": "NOTE: An endpoint should only be configured when using Azure Stack."
            },
            "usage": "endpoint: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.environment",
            "displayName": "environment",
            "id": "cdktf.AzurermBackendProps.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Azure Environment which should be used.",
              "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\nPossible values are public, china, german, stack and usgovernment. Defaults to public."
            },
            "usage": "environment: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.msi_endpoint",
            "displayName": "msi_endpoint",
            "id": "cdktf.AzurermBackendProps.property.msiEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified.",
              "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable."
            },
            "usage": "msi_endpoint: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.oidc_request_token",
            "displayName": "oidc_request_token",
            "id": "cdktf.AzurermBackendProps.property.oidcRequestToken",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The bearer token for the request to the OIDC provider.",
              "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables."
            },
            "usage": "oidc_request_token: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.oidc_request_url",
            "displayName": "oidc_request_url",
            "id": "cdktf.AzurermBackendProps.property.oidcRequestUrl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The URL for the OIDC provider from which to request an ID token.",
              "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables."
            },
            "usage": "oidc_request_url: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.resource_group_name",
            "displayName": "resource_group_name",
            "id": "cdktf.AzurermBackendProps.property.resourceGroupName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
            },
            "usage": "resource_group_name: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.sas_token",
            "displayName": "sas_token",
            "id": "cdktf.AzurermBackendProps.property.sasToken",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The SAS Token used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable."
            },
            "usage": "sas_token: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.snapshot",
            "displayName": "snapshot",
            "id": "cdktf.AzurermBackendProps.property.snapshot",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?",
              "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable."
            },
            "usage": "snapshot: bool"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.subscription_id",
            "displayName": "subscription_id",
            "id": "cdktf.AzurermBackendProps.property.subscriptionId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Subscription ID in which the Storage Account exists.",
              "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable."
            },
            "usage": "subscription_id: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.tenant_id",
            "displayName": "tenant_id",
            "id": "cdktf.AzurermBackendProps.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Tenant ID in which the Subscription exists.",
              "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable."
            },
            "usage": "tenant_id: str"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.use_azuread_auth",
            "displayName": "use_azuread_auth",
            "id": "cdktf.AzurermBackendProps.property.useAzureadAuth",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned."
            },
            "usage": "use_azuread_auth: bool"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.use_microsoft_graph",
            "displayName": "use_microsoft_graph",
            "id": "cdktf.AzurermBackendProps.property.useMicrosoftGraph",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?",
              "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL."
            },
            "usage": "use_microsoft_graph: bool"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.use_msi",
            "displayName": "use_msi",
            "id": "cdktf.AzurermBackendProps.property.useMsi",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should Managed Service Identity authentication be used?",
              "remarks": "This can also be sourced from the ARM_USE_MSI environment variable."
            },
            "usage": "use_msi: bool"
          },
          {
            "fqn": "cdktf.AzurermBackendProps.property.use_oidc",
            "displayName": "use_oidc",
            "id": "cdktf.AzurermBackendProps.property.useOidc",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable.",
              "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default)."
            },
            "usage": "use_oidc: bool"
          }
        ],
        "docs": {
          "summary": "Stores the state as a Blob with the given Key within the Blob Container within the Blob Storage Account.",
          "remarks": "This backend supports state locking and consistency checking\nwith Azure Blob Storage native capabilities.\n\nNote: By default the Azure Backend uses ADAL for authentication which is deprecated\nin favour of MSAL - MSAL can be used by setting use_microsoft_graph to true.\nThe default for this will change in Terraform 1.2,\nso that MSAL authentication is used by default.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/azurerm"
        },
        "usage": "import cdktf\n\ncdktf.AzurermBackendProps(\n  container_name: str,\n  key: str,\n  storage_account_name: str,\n  access_key: str = None,\n  client_certificate_password: str = None,\n  client_certificate_path: str = None,\n  client_id: str = None,\n  client_secret: str = None,\n  endpoint: str = None,\n  environment: str = None,\n  msi_endpoint: str = None,\n  oidc_request_token: str = None,\n  oidc_request_url: str = None,\n  resource_group_name: str = None,\n  sas_token: str = None,\n  snapshot: bool = None,\n  subscription_id: str = None,\n  tenant_id: str = None,\n  use_azuread_auth: bool = None,\n  use_microsoft_graph: bool = None,\n  use_msi: bool = None,\n  use_oidc: bool = None\n)"
      },
      {
        "fqn": "cdktf.CloudBackendProps",
        "displayName": "CloudBackendProps",
        "id": "cdktf.CloudBackendProps",
        "properties": [
          {
            "fqn": "cdktf.CloudBackendProps.property.organization",
            "displayName": "organization",
            "id": "cdktf.CloudBackendProps.property.organization",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The name of the organization containing the workspace(s) the current configuration should use."
            },
            "usage": "organization: str"
          },
          {
            "fqn": "cdktf.CloudBackendProps.property.workspaces",
            "displayName": "workspaces",
            "id": "cdktf.CloudBackendProps.property.workspaces",
            "type": {
              "formattingPattern": "typing.Union[%, %]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.NamedCloudWorkspace",
                      "displayName": "NamedCloudWorkspace",
                      "fqn": "cdktf.NamedCloudWorkspace",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TaggedCloudWorkspaces",
                      "displayName": "TaggedCloudWorkspaces",
                      "fqn": "cdktf.TaggedCloudWorkspaces",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "A nested block that specifies which remote Terraform Cloud workspaces to use for the current configuration.",
              "remarks": "The workspaces block must contain exactly one of the following arguments, each denoting a strategy for how workspaces should be mapped:"
            },
            "usage": "workspaces: typing.Union[NamedCloudWorkspace, TaggedCloudWorkspaces]"
          },
          {
            "fqn": "cdktf.CloudBackendProps.property.hostname",
            "displayName": "hostname",
            "id": "cdktf.CloudBackendProps.property.hostname",
            "optional": true,
            "default": "app.terraform.io",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The hostname of a Terraform Enterprise installation, if using Terraform Enterprise."
            },
            "usage": "hostname: str"
          },
          {
            "fqn": "cdktf.CloudBackendProps.property.token",
            "displayName": "token",
            "id": "cdktf.CloudBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The token used to authenticate with Terraform Cloud.",
              "remarks": "We recommend omitting the token from the configuration, and instead using terraform login or manually configuring credentials in the CLI config file."
            },
            "usage": "token: str"
          }
        ],
        "docs": {
          "summary": "The Cloud Backend synthesizes a {@link https://www.terraform.io/cli/cloud/settings#the-cloud-block cloud block}. The cloud block is a nested block within the top-level terraform settings block. It specifies which Terraform Cloud workspaces to use for the current working directory. The cloud block only affects Terraform CLI's behavior. When Terraform Cloud uses a configuration that contains a cloud block - for example, when a workspace is configured to use a VCS provider directly - it ignores the block and behaves according to its own workspace settings.",
          "remarks": "https://www.terraform.io/cli/cloud/settings#arguments"
        },
        "usage": "import cdktf\n\ncdktf.CloudBackendProps(\n  organization: str,\n  workspaces: typing.Union[NamedCloudWorkspace, TaggedCloudWorkspaces],\n  hostname: str = None,\n  token: str = None\n)"
      },
      {
        "fqn": "cdktf.ConsulBackendProps",
        "displayName": "ConsulBackendProps",
        "id": "cdktf.ConsulBackendProps",
        "properties": [
          {
            "fqn": "cdktf.ConsulBackendProps.property.access_token",
            "displayName": "access_token",
            "id": "cdktf.ConsulBackendProps.property.accessToken",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) Access token."
            },
            "usage": "access_token: str"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.path",
            "displayName": "path",
            "id": "cdktf.ConsulBackendProps.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) Path in the Consul KV store."
            },
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.address",
            "displayName": "address",
            "id": "cdktf.ConsulBackendProps.property.address",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port.",
              "remarks": "Defaults to the local agent HTTP listener."
            },
            "usage": "address: str"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.ca_file",
            "displayName": "ca_file",
            "id": "cdktf.ConsulBackendProps.property.caFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
            },
            "usage": "ca_file: str"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.cert_file",
            "displayName": "cert_file",
            "id": "cdktf.ConsulBackendProps.property.certFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;",
              "remarks": "requires use of key_file."
            },
            "usage": "cert_file: str"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.datacenter",
            "displayName": "datacenter",
            "id": "cdktf.ConsulBackendProps.property.datacenter",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The datacenter to use.",
              "remarks": "Defaults to that of the agent."
            },
            "usage": "datacenter: str"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.gzip",
            "displayName": "gzip",
            "id": "cdktf.ConsulBackendProps.property.gzip",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
            },
            "usage": "gzip: bool"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.http_auth",
            "displayName": "http_auth",
            "id": "cdktf.ConsulBackendProps.property.httpAuth",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
            },
            "usage": "http_auth: str"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.key_file",
            "displayName": "key_file",
            "id": "cdktf.ConsulBackendProps.property.keyFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
            },
            "usage": "key_file: str"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.lock",
            "displayName": "lock",
            "id": "cdktf.ConsulBackendProps.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) false to disable locking.",
              "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking."
            },
            "usage": "lock: bool"
          },
          {
            "fqn": "cdktf.ConsulBackendProps.property.scheme",
            "displayName": "scheme",
            "id": "cdktf.ConsulBackendProps.property.scheme",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https.",
              "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true."
            },
            "usage": "scheme: str"
          }
        ],
        "docs": {
          "summary": "Stores the state in the Consul KV store at a given path. This backend supports state locking.",
          "remarks": "Read more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/consul"
        },
        "usage": "import cdktf\n\ncdktf.ConsulBackendProps(\n  access_token: str,\n  path: str,\n  address: str = None,\n  ca_file: str = None,\n  cert_file: str = None,\n  datacenter: str = None,\n  gzip: bool = None,\n  http_auth: str = None,\n  key_file: str = None,\n  lock: bool = None,\n  scheme: str = None\n)"
      },
      {
        "fqn": "cdktf.CosBackendProps",
        "displayName": "CosBackendProps",
        "id": "cdktf.CosBackendProps",
        "properties": [
          {
            "fqn": "cdktf.CosBackendProps.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.CosBackendProps.property.bucket",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The name of the COS bucket.",
              "remarks": "You shall manually create it first."
            },
            "usage": "bucket: str"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.acl",
            "displayName": "acl",
            "id": "cdktf.CosBackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read.",
              "remarks": "Defaults to private."
            },
            "usage": "acl: str"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.CosBackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to enable server side encryption of the state file.",
              "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file."
            },
            "usage": "encrypt: bool"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.CosBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path for saving the state file in bucket.",
              "remarks": "Defaults to terraform.tfstate."
            },
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.CosBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The directory for saving the state file in bucket.",
              "remarks": "Default to \"env:\"."
            },
            "usage": "prefix: str"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.region",
            "displayName": "region",
            "id": "cdktf.CosBackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The region of the COS bucket.",
              "remarks": "It supports environment variables TENCENTCLOUD_REGION."
            },
            "usage": "region: str"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.secret_id",
            "displayName": "secret_id",
            "id": "cdktf.CosBackendProps.property.secretId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Secret id of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID."
            },
            "usage": "secret_id: str"
          },
          {
            "fqn": "cdktf.CosBackendProps.property.secret_key",
            "displayName": "secret_key",
            "id": "cdktf.CosBackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Secret key of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY."
            },
            "usage": "secret_key: str"
          }
        ],
        "docs": {
          "summary": "Stores the state as an object in a configurable prefix in a given bucket on Tencent Cloud Object Storage (COS).",
          "remarks": "This backend supports state locking.\n\nWarning! It is highly recommended that you enable Object Versioning on the COS bucket to allow for state recovery in the case of accidental deletions and human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/cos"
        },
        "usage": "import cdktf\n\ncdktf.CosBackendProps(\n  bucket: str,\n  acl: str = None,\n  encrypt: bool = None,\n  key: str = None,\n  prefix: str = None,\n  region: str = None,\n  secret_id: str = None,\n  secret_key: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
        "displayName": "DataTerraformRemoteStateArtifactoryConfig",
        "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.password",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - The password."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.repo",
            "displayName": "repo",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.repo",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - The repository name."
            },
            "usage": "repo: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.subpath",
            "displayName": "subpath",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.subpath",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - Path within the repository."
            },
            "usage": "subpath: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.url",
            "displayName": "url",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.url",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - The URL.",
              "remarks": "Note that this is the base url to artifactory not the full repo and subpath."
            },
            "usage": "url: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.username",
            "displayName": "username",
            "id": "cdktf.DataTerraformRemoteStateArtifactoryConfig.property.username",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) - The username."
            },
            "usage": "username: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateArtifactoryConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  password: str,\n  repo: str,\n  subpath: str,\n  url: str,\n  username: str\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig",
        "displayName": "DataTerraformRemoteStateAzurermConfig",
        "id": "cdktf.DataTerraformRemoteStateAzurermConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.container_name",
            "displayName": "container_name",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.containerName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Container within the Storage Account."
            },
            "usage": "container_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.key",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The name of the Blob used to retrieve/store Terraform's State file inside the Storage Container."
            },
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.storage_account_name",
            "displayName": "storage_account_name",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.storageAccountName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The Name of the Storage Account."
            },
            "usage": "storage_account_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.access_key",
            "displayName": "access_key",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "access_key - (Optional) The Access Key used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_ACCESS_KEY environment variable."
            },
            "usage": "access_key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.client_certificate_password",
            "displayName": "client_certificate_password",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientCertificatePassword",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The password associated with the Client Certificate specified in client_certificate_path.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PASSWORD environment variable."
            },
            "usage": "client_certificate_password: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.client_certificate_path",
            "displayName": "client_certificate_path",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientCertificatePath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to the PFX file used as the Client Certificate when authenticating as a Service Principal.",
              "remarks": "This can also be sourced from the\nARM_CLIENT_CERTIFICATE_PATH environment variable."
            },
            "usage": "client_certificate_path: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.client_id",
            "displayName": "client_id",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Client ID of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_ID environment variable."
            },
            "usage": "client_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.client_secret",
            "displayName": "client_secret",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.clientSecret",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Client Secret of the Service Principal.",
              "remarks": "This can also be sourced from the ARM_CLIENT_SECRET environment variable."
            },
            "usage": "client_secret: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Custom Endpoint for Azure Resource Manager. This can also be sourced from the ARM_ENDPOINT environment variable.",
              "remarks": "NOTE: An endpoint should only be configured when using Azure Stack."
            },
            "usage": "endpoint: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.environment",
            "displayName": "environment",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Azure Environment which should be used.",
              "remarks": "This can also be sourced from the ARM_ENVIRONMENT environment variable.\nPossible values are public, china, german, stack and usgovernment. Defaults to public."
            },
            "usage": "environment: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.msi_endpoint",
            "displayName": "msi_endpoint",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.msiEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to a custom Managed Service Identity endpoint which is automatically determined if not specified.",
              "remarks": "This can also be sourced from the ARM_MSI_ENDPOINT environment variable."
            },
            "usage": "msi_endpoint: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidc_request_token",
            "displayName": "oidc_request_token",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidcRequestToken",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The bearer token for the request to the OIDC provider.",
              "remarks": "This can\nalso be sourced from the ARM_OIDC_REQUEST_TOKEN or\nACTIONS_ID_TOKEN_REQUEST_TOKEN environment variables."
            },
            "usage": "oidc_request_token: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidc_request_url",
            "displayName": "oidc_request_url",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.oidcRequestUrl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The URL for the OIDC provider from which to request an ID token.",
              "remarks": "This can also be sourced from the ARM_OIDC_REQUEST_URL or\nACTIONS_ID_TOKEN_REQUEST_URL environment variables."
            },
            "usage": "oidc_request_url: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.resource_group_name",
            "displayName": "resource_group_name",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.resourceGroupName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The Name of the Resource Group in which the Storage Account exists."
            },
            "usage": "resource_group_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.sas_token",
            "displayName": "sas_token",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.sasToken",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The SAS Token used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_SAS_TOKEN environment variable."
            },
            "usage": "sas_token: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.snapshot",
            "displayName": "snapshot",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.snapshot",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should the Blob used to store the Terraform Statefile be snapshotted before use?",
              "remarks": "Defaults to false. This value can also be sourced\nfrom the ARM_SNAPSHOT environment variable."
            },
            "usage": "snapshot: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.subscription_id",
            "displayName": "subscription_id",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.subscriptionId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Subscription ID in which the Storage Account exists.",
              "remarks": "This can also be sourced from the ARM_SUBSCRIPTION_ID environment variable."
            },
            "usage": "subscription_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.tenant_id",
            "displayName": "tenant_id",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The Tenant ID in which the Subscription exists.",
              "remarks": "This can also be sourced from the ARM_TENANT_ID environment variable."
            },
            "usage": "tenant_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.use_azuread_auth",
            "displayName": "use_azuread_auth",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useAzureadAuth",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should AzureAD Authentication be used to access the Blob Storage Account.",
              "remarks": "This can also be sourced from the ARM_USE_AZUREAD environment\nvariable.\n\nNote: When using AzureAD for Authentication to Storage you also need to\nensure the Storage Blob Data Owner role is assigned."
            },
            "usage": "use_azuread_auth: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.use_microsoft_graph",
            "displayName": "use_microsoft_graph",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useMicrosoftGraph",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should MSAL be used for authentication instead of ADAL, and should Microsoft Graph be used instead of Azure Active Directory Graph?",
              "remarks": "Defaults to true.\n\nNote: In Terraform 1.2 the Azure Backend uses MSAL (and Microsoft Graph)\nrather than ADAL (and Azure Active Directory Graph) for authentication by\ndefault - you can disable this by setting use_microsoft_graph to false.\nThis setting will be removed in Terraform 1.3, due to Microsoft's\ndeprecation of ADAL."
            },
            "usage": "use_microsoft_graph: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.use_msi",
            "displayName": "use_msi",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useMsi",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should Managed Service Identity authentication be used?",
              "remarks": "This can also be sourced from the ARM_USE_MSI environment variable."
            },
            "usage": "use_msi: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurermConfig.property.use_oidc",
            "displayName": "use_oidc",
            "id": "cdktf.DataTerraformRemoteStateAzurermConfig.property.useOidc",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Should OIDC authentication be used? This can also be sourced from the ARM_USE_OIDC environment variable.",
              "remarks": "Note: When using OIDC for authentication, use_microsoft_graph\nmust be set to true (which is the default)."
            },
            "usage": "use_oidc: bool"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateAzurermConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  container_name: str,\n  key: str,\n  storage_account_name: str,\n  access_key: str = None,\n  client_certificate_password: str = None,\n  client_certificate_path: str = None,\n  client_id: str = None,\n  client_secret: str = None,\n  endpoint: str = None,\n  environment: str = None,\n  msi_endpoint: str = None,\n  oidc_request_token: str = None,\n  oidc_request_url: str = None,\n  resource_group_name: str = None,\n  sas_token: str = None,\n  snapshot: bool = None,\n  subscription_id: str = None,\n  tenant_id: str = None,\n  use_azuread_auth: bool = None,\n  use_microsoft_graph: bool = None,\n  use_msi: bool = None,\n  use_oidc: bool = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateConfig",
        "displayName": "DataTerraformRemoteStateConfig",
        "id": "cdktf.DataTerraformRemoteStateConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateConsulConfig",
        "displayName": "DataTerraformRemoteStateConsulConfig",
        "id": "cdktf.DataTerraformRemoteStateConsulConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.access_token",
            "displayName": "access_token",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.accessToken",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) Access token."
            },
            "usage": "access_token: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.path",
            "displayName": "path",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) Path in the Consul KV store."
            },
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.address",
            "displayName": "address",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.address",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) DNS name and port of your Consul endpoint specified in the format dnsname:port.",
              "remarks": "Defaults to the local agent HTTP listener."
            },
            "usage": "address: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.ca_file",
            "displayName": "ca_file",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.caFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate authority used to verify the remote agent's certificate."
            },
            "usage": "ca_file: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.cert_file",
            "displayName": "cert_file",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.certFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded certificate provided to the remote agent;",
              "remarks": "requires use of key_file."
            },
            "usage": "cert_file: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.datacenter",
            "displayName": "datacenter",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.datacenter",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The datacenter to use.",
              "remarks": "Defaults to that of the agent."
            },
            "usage": "datacenter: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.gzip",
            "displayName": "gzip",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.gzip",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) true to compress the state data using gzip, or false (the default) to leave it uncompressed."
            },
            "usage": "gzip: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.http_auth",
            "displayName": "http_auth",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.httpAuth",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) HTTP Basic Authentication credentials to be used when communicating with Consul, in the format of either user or user:pass."
            },
            "usage": "http_auth: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.key_file",
            "displayName": "key_file",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.keyFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A path to a PEM-encoded private key, required if cert_file is specified."
            },
            "usage": "key_file: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.lock",
            "displayName": "lock",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) false to disable locking.",
              "remarks": "This defaults to true, but will require session permissions with Consul and\nat least kv write permissions on $path/.lock to perform locking."
            },
            "usage": "lock: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsulConfig.property.scheme",
            "displayName": "scheme",
            "id": "cdktf.DataTerraformRemoteStateConsulConfig.property.scheme",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Specifies what protocol to use when talking to the given address,either http or https.",
              "remarks": "SSL support can also be triggered by setting then environment variable CONSUL_HTTP_SSL to true."
            },
            "usage": "scheme: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateConsulConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  access_token: str,\n  path: str,\n  address: str = None,\n  ca_file: str = None,\n  cert_file: str = None,\n  datacenter: str = None,\n  gzip: bool = None,\n  http_auth: str = None,\n  key_file: str = None,\n  lock: bool = None,\n  scheme: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateCosConfig",
        "displayName": "DataTerraformRemoteStateCosConfig",
        "id": "cdktf.DataTerraformRemoteStateCosConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.bucket",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The name of the COS bucket.",
              "remarks": "You shall manually create it first."
            },
            "usage": "bucket: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.acl",
            "displayName": "acl",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Object ACL to be applied to the state file, allows private and public-read.",
              "remarks": "Defaults to private."
            },
            "usage": "acl: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to enable server side encryption of the state file.",
              "remarks": "If it is true, COS will use 'AES256' encryption algorithm to encrypt state file."
            },
            "usage": "encrypt: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path for saving the state file in bucket.",
              "remarks": "Defaults to terraform.tfstate."
            },
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The directory for saving the state file in bucket.",
              "remarks": "Default to \"env:\"."
            },
            "usage": "prefix: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.region",
            "displayName": "region",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The region of the COS bucket.",
              "remarks": "It supports environment variables TENCENTCLOUD_REGION."
            },
            "usage": "region: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.secret_id",
            "displayName": "secret_id",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.secretId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Secret id of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_ID."
            },
            "usage": "secret_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCosConfig.property.secret_key",
            "displayName": "secret_key",
            "id": "cdktf.DataTerraformRemoteStateCosConfig.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Secret key of Tencent Cloud.",
              "remarks": "It supports environment variables TENCENTCLOUD_SECRET_KEY."
            },
            "usage": "secret_key: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateCosConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  bucket: str,\n  acl: str = None,\n  encrypt: bool = None,\n  key: str = None,\n  prefix: str = None,\n  region: str = None,\n  secret_id: str = None,\n  secret_key: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig",
        "displayName": "DataTerraformRemoteStateEtcdConfig",
        "id": "cdktf.DataTerraformRemoteStateEtcdConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.endpoints",
            "displayName": "endpoints",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.endpoints",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) A space-separated list of the etcd endpoints."
            },
            "usage": "endpoints: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.path",
            "displayName": "path",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The path where to store the state."
            },
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The password."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdConfig.property.username",
            "displayName": "username",
            "id": "cdktf.DataTerraformRemoteStateEtcdConfig.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The username."
            },
            "usage": "username: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateEtcdConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  endpoints: str,\n  path: str,\n  password: str = None,\n  username: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config",
        "displayName": "DataTerraformRemoteStateEtcdV3Config",
        "id": "cdktf.DataTerraformRemoteStateEtcdV3Config",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.endpoints",
            "displayName": "endpoints",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.endpoints",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Required) The list of 'etcd' endpoints which to connect to."
            },
            "usage": "endpoints: typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.cacert_path",
            "displayName": "cacert_path",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.cacertPath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
            },
            "usage": "cacert_path: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.cert_path",
            "displayName": "cert_path",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.certPath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
            },
            "usage": "cert_path: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.key_path",
            "displayName": "key_path",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.keyPath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
            },
            "usage": "key_path: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.lock",
            "displayName": "lock",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to lock state access.",
              "remarks": "Defaults to true."
            },
            "usage": "lock: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Password used to connect to the etcd cluster."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd.",
              "remarks": "Defaults to \"\"."
            },
            "usage": "prefix: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.username",
            "displayName": "username",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3Config.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Username used to connect to the etcd cluster."
            },
            "usage": "username: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateEtcdV3Config(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  endpoints: typing.List[str],\n  cacert_path: str = None,\n  cert_path: str = None,\n  key_path: str = None,\n  lock: bool = None,\n  password: str = None,\n  prefix: str = None,\n  username: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateGcsConfig",
        "displayName": "DataTerraformRemoteStateGcsConfig",
        "id": "cdktf.DataTerraformRemoteStateGcsConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.bucket",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The name of the GCS bucket.",
              "remarks": "This name must be globally unique."
            },
            "usage": "bucket: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.access_token",
            "displayName": "access_token",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.accessToken",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
            },
            "usage": "access_token: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.credentials",
            "displayName": "credentials",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.credentials",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format.",
              "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable."
            },
            "usage": "credentials: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.encryption_key",
            "displayName": "encryption_key",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.encryptionKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
            },
            "usage": "encryption_key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonate_service_account",
            "displayName": "impersonate_service_account",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonateServiceAccount",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The service account to impersonate for accessing the State Bucket.",
              "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable."
            },
            "usage": "impersonate_service_account: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonate_service_account_delegates",
            "displayName": "impersonate_service_account_delegates",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.impersonateServiceAccountDelegates",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) The delegation chain for an impersonating a service account."
            },
            "usage": "impersonate_service_account_delegates: typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcsConfig.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.DataTerraformRemoteStateGcsConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) GCS prefix inside the bucket.",
              "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate."
            },
            "usage": "prefix: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateGcsConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  bucket: str,\n  access_token: str = None,\n  credentials: str = None,\n  encryption_key: str = None,\n  impersonate_service_account: str = None,\n  impersonate_service_account_delegates: typing.List[str] = None,\n  prefix: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateHttpConfig",
        "displayName": "DataTerraformRemoteStateHttpConfig",
        "id": "cdktf.DataTerraformRemoteStateHttpConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.address",
            "displayName": "address",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.address",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The address of the REST endpoint."
            },
            "usage": "address: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.lock_address",
            "displayName": "lock_address",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.lockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The address of the lock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "lock_address: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.lock_method",
            "displayName": "lock_method",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.lockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when locking.",
              "remarks": "Defaults to LOCK."
            },
            "usage": "lock_method: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The password for HTTP basic authentication."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.retry_max",
            "displayName": "retry_max",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryMax",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "(Optional) The number of HTTP request retries.",
              "remarks": "Defaults to 2."
            },
            "usage": "retry_max: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.retry_wait_max",
            "displayName": "retry_wait_max",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryWaitMax",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 30."
            },
            "usage": "retry_wait_max: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.retry_wait_min",
            "displayName": "retry_wait_min",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.retryWaitMin",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 1."
            },
            "usage": "retry_wait_min: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.skip_cert_verification",
            "displayName": "skip_cert_verification",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.skipCertVerification",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to skip TLS verification.",
              "remarks": "Defaults to false."
            },
            "usage": "skip_cert_verification: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlock_address",
            "displayName": "unlock_address",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The address of the unlock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "unlock_address: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlock_method",
            "displayName": "unlock_method",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.unlockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when unlocking.",
              "remarks": "Defaults to UNLOCK."
            },
            "usage": "unlock_method: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.update_method",
            "displayName": "update_method",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.updateMethod",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) HTTP method to use when updating state.",
              "remarks": "Defaults to POST."
            },
            "usage": "update_method: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttpConfig.property.username",
            "displayName": "username",
            "id": "cdktf.DataTerraformRemoteStateHttpConfig.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The username for HTTP basic authentication."
            },
            "usage": "username: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateHttpConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  address: str,\n  lock_address: str = None,\n  lock_method: str = None,\n  password: str = None,\n  retry_max: typing.Union[int, float] = None,\n  retry_wait_max: typing.Union[int, float] = None,\n  retry_wait_min: typing.Union[int, float] = None,\n  skip_cert_verification: bool = None,\n  unlock_address: str = None,\n  unlock_method: str = None,\n  update_method: str = None,\n  username: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateLocalConfig",
        "displayName": "DataTerraformRemoteStateLocalConfig",
        "id": "cdktf.DataTerraformRemoteStateLocalConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocalConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocalConfig.property.path",
            "displayName": "path",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.path",
            "optional": true,
            "default": "- defaults to terraform.${stackId}.tfstate",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Path where the state file is stored."
            },
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspace_dir",
            "displayName": "workspace_dir",
            "id": "cdktf.DataTerraformRemoteStateLocalConfig.property.workspaceDir",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to non-default workspaces."
            },
            "usage": "workspace_dir: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateLocalConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  path: str = None,\n  workspace_dir: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateMantaConfig",
        "displayName": "DataTerraformRemoteStateMantaConfig",
        "id": "cdktf.DataTerraformRemoteStateMantaConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.account",
            "displayName": "account",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.account",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "account: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.key_id",
            "displayName": "key_id",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.keyId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "key_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.path",
            "displayName": "path",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.insecure_skip_tls_verify",
            "displayName": "insecure_skip_tls_verify",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.insecureSkipTlsVerify",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "insecure_skip_tls_verify: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.key_material",
            "displayName": "key_material",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.keyMaterial",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "key_material: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.object_name",
            "displayName": "object_name",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.objectName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "object_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.url",
            "displayName": "url",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.url",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "url: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateMantaConfig.property.user",
            "displayName": "user",
            "id": "cdktf.DataTerraformRemoteStateMantaConfig.property.user",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateMantaConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  account: str,\n  key_id: str,\n  path: str,\n  insecure_skip_tls_verify: bool = None,\n  key_material: str = None,\n  object_name: str = None,\n  url: str = None,\n  user: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateOssConfig",
        "displayName": "DataTerraformRemoteStateOssConfig",
        "id": "cdktf.DataTerraformRemoteStateOssConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.bucket",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "bucket: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.access_key",
            "displayName": "access_key",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "access_key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.acl",
            "displayName": "acl",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "acl: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.assume_role",
            "displayName": "assume_role",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.assumeRole",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.OssAssumeRole",
                  "displayName": "OssAssumeRole",
                  "fqn": "cdktf.OssAssumeRole",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "assume_role: OssAssumeRole"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.ecs_role_name",
            "displayName": "ecs_role_name",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.ecsRoleName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "ecs_role_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "encrypt: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "endpoint: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "prefix: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.profile",
            "displayName": "profile",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "profile: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.region",
            "displayName": "region",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "region: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.secret_key",
            "displayName": "secret_key",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "secret_key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.security_token",
            "displayName": "security_token",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.securityToken",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "security_token: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.shared_credentials_file",
            "displayName": "shared_credentials_file",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "shared_credentials_file: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestore_endpoint",
            "displayName": "tablestore_endpoint",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestoreEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tablestore_endpoint: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestore_table",
            "displayName": "tablestore_table",
            "id": "cdktf.DataTerraformRemoteStateOssConfig.property.tablestoreTable",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tablestore_table: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateOssConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  bucket: str,\n  access_key: str = None,\n  acl: str = None,\n  assume_role: OssAssumeRole = None,\n  ecs_role_name: str = None,\n  encrypt: bool = None,\n  endpoint: str = None,\n  key: str = None,\n  prefix: str = None,\n  profile: str = None,\n  region: str = None,\n  secret_key: str = None,\n  security_token: str = None,\n  shared_credentials_file: str = None,\n  tablestore_endpoint: str = None,\n  tablestore_table: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStatePgConfig",
        "displayName": "DataTerraformRemoteStatePgConfig",
        "id": "cdktf.DataTerraformRemoteStatePgConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.conn_str",
            "displayName": "conn_str",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.connStr",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "conn_str: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.schema_name",
            "displayName": "schema_name",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.schemaName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "schema_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePgConfig.property.skip_schema_creation",
            "displayName": "skip_schema_creation",
            "id": "cdktf.DataTerraformRemoteStatePgConfig.property.skipSchemaCreation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "skip_schema_creation: bool"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStatePgConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  conn_str: str,\n  schema_name: str = None,\n  skip_schema_creation: bool = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig",
        "displayName": "DataTerraformRemoteStateRemoteConfig",
        "id": "cdktf.DataTerraformRemoteStateRemoteConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.organization",
            "displayName": "organization",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.organization",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "organization: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspaces",
            "displayName": "workspaces",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.workspaces",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IRemoteWorkspace",
                  "displayName": "IRemoteWorkspace",
                  "fqn": "cdktf.IRemoteWorkspace",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "workspaces: IRemoteWorkspace"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.hostname",
            "displayName": "hostname",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.hostname",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "hostname: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateRemoteConfig.property.token",
            "displayName": "token",
            "id": "cdktf.DataTerraformRemoteStateRemoteConfig.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "token: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateRemoteConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  organization: str,\n  workspaces: IRemoteWorkspace,\n  hostname: str = None,\n  token: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateS3Config",
        "displayName": "DataTerraformRemoteStateS3Config",
        "id": "cdktf.DataTerraformRemoteStateS3Config",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.bucket",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Name of the S3 Bucket."
            },
            "usage": "bucket: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.key",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Path to the state file inside the S3 Bucket.",
              "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key"
            },
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.access_key",
            "displayName": "access_key",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) AWS access key.",
              "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)."
            },
            "usage": "access_key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.acl",
            "displayName": "acl",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Canned ACL to be applied to the state file."
            },
            "usage": "acl: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.assume_role_policy",
            "displayName": "assume_role_policy",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRolePolicy",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "assume_role_policy: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.assume_role_policy_arns",
            "displayName": "assume_role_policy_arns",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRolePolicyArns",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "assume_role_policy_arns: typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.assume_role_tags",
            "displayName": "assume_role_tags",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRoleTags",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Map of assume role session tags."
            },
            "usage": "assume_role_tags: typing.Mapping[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.assume_role_transitive_tag_keys",
            "displayName": "assume_role_transitive_tag_keys",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.assumeRoleTransitiveTagKeys",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
            },
            "usage": "assume_role_transitive_tag_keys: typing.List[str]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodb_endpoint",
            "displayName": "dynamodb_endpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodbEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS DynamoDB API.",
              "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable."
            },
            "usage": "dynamodb_endpoint: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodb_table",
            "displayName": "dynamodb_table",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.dynamodbTable",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency.",
              "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled."
            },
            "usage": "dynamodb_table: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Enable server side encryption of the state file."
            },
            "usage": "encrypt: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS S3 API.",
              "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable."
            },
            "usage": "endpoint: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.external_id",
            "displayName": "external_id",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.externalId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) External identifier to use when assuming the role."
            },
            "usage": "external_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.force_path_style",
            "displayName": "force_path_style",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.forcePathStyle",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
            },
            "usage": "force_path_style: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.iam_endpoint",
            "displayName": "iam_endpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.iamEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API.",
              "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable."
            },
            "usage": "iam_endpoint: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.kms_key_id",
            "displayName": "kms_key_id",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.kmsKeyId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state.",
              "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key."
            },
            "usage": "kms_key_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.max_retries",
            "displayName": "max_retries",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.maxRetries",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure.",
              "remarks": "Defaults to 5."
            },
            "usage": "max_retries: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.profile",
            "displayName": "profile",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
            },
            "usage": "profile: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.region",
            "displayName": "region",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used).",
              "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables."
            },
            "usage": "region: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.role_arn",
            "displayName": "role_arn",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.roleArn",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
            },
            "usage": "role_arn: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.secret_key",
            "displayName": "secret_key",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) AWS secret access key.",
              "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)"
            },
            "usage": "secret_key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.session_name",
            "displayName": "session_name",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Session name to use when assuming the role."
            },
            "usage": "session_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.shared_credentials_file",
            "displayName": "shared_credentials_file",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Path to the AWS shared credentials file.",
              "remarks": "Defaults to ~/.aws/credentials."
            },
            "usage": "shared_credentials_file: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.skip_credentials_validation",
            "displayName": "skip_credentials_validation",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipCredentialsValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip credentials validation via the STS API."
            },
            "usage": "skip_credentials_validation: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.skip_metadata_api_check",
            "displayName": "skip_metadata_api_check",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipMetadataApiCheck",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip usage of EC2 Metadata API."
            },
            "usage": "skip_metadata_api_check: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.skip_region_validation",
            "displayName": "skip_region_validation",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.skipRegionValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip validation of provided region name."
            },
            "usage": "skip_region_validation: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.sse_customer_key",
            "displayName": "sse_customer_key",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.sseCustomerKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C).",
              "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate."
            },
            "usage": "sse_customer_key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.sts_endpoint",
            "displayName": "sts_endpoint",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.stsEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API.",
              "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable."
            },
            "usage": "sts_endpoint: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.token",
            "displayName": "token",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Multi-Factor Authentication (MFA) token.",
              "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable."
            },
            "usage": "token: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3Config.property.workspace_key_prefix",
            "displayName": "workspace_key_prefix",
            "id": "cdktf.DataTerraformRemoteStateS3Config.property.workspaceKeyPrefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Prefix applied to the state path inside the bucket.",
              "remarks": "This is only relevant when using a non-default workspace. Defaults to env:"
            },
            "usage": "workspace_key_prefix: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateS3Config(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  bucket: str,\n  key: str,\n  access_key: str = None,\n  acl: str = None,\n  assume_role_policy: str = None,\n  assume_role_policy_arns: typing.List[str] = None,\n  assume_role_tags: typing.Mapping[str] = None,\n  assume_role_transitive_tag_keys: typing.List[str] = None,\n  dynamodb_endpoint: str = None,\n  dynamodb_table: str = None,\n  encrypt: bool = None,\n  endpoint: str = None,\n  external_id: str = None,\n  force_path_style: bool = None,\n  iam_endpoint: str = None,\n  kms_key_id: str = None,\n  max_retries: typing.Union[int, float] = None,\n  profile: str = None,\n  region: str = None,\n  role_arn: str = None,\n  secret_key: str = None,\n  session_name: str = None,\n  shared_credentials_file: str = None,\n  skip_credentials_validation: bool = None,\n  skip_metadata_api_check: bool = None,\n  skip_region_validation: bool = None,\n  sse_customer_key: str = None,\n  sts_endpoint: str = None,\n  token: str = None,\n  workspace_key_prefix: str = None\n)"
      },
      {
        "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig",
        "displayName": "DataTerraformRemoteStateSwiftConfig",
        "id": "cdktf.DataTerraformRemoteStateSwiftConfig",
        "properties": [
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaults",
            "displayName": "defaults",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaults",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "defaults: typing.Mapping[typing.Any]"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.workspace",
            "displayName": "workspace",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.workspace",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "workspace: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.container",
            "displayName": "container",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.container",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "container: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.application_credential_id",
            "displayName": "application_credential_id",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "application_credential_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.application_credential_name",
            "displayName": "application_credential_name",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "application_credential_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.application_credential_secret",
            "displayName": "application_credential_secret",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.applicationCredentialSecret",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "application_credential_secret: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.archive_container",
            "displayName": "archive_container",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.archiveContainer",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "archive_container: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.auth_url",
            "displayName": "auth_url",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.authUrl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "auth_url: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cacert_file",
            "displayName": "cacert_file",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cacertFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "cacert_file: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cert",
            "displayName": "cert",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cert",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "cert: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cloud",
            "displayName": "cloud",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.cloud",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "cloud: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.default_domain",
            "displayName": "default_domain",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.defaultDomain",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "default_domain: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domain_id",
            "displayName": "domain_id",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domainId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "domain_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domain_name",
            "displayName": "domain_name",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.domainName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "domain_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.expire_after",
            "displayName": "expire_after",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.expireAfter",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "expire_after: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.insecure",
            "displayName": "insecure",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "insecure: bool"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.key",
            "displayName": "key",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.password",
            "displayName": "password",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.project_domain_id",
            "displayName": "project_domain_id",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.projectDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "project_domain_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.project_domain_name",
            "displayName": "project_domain_name",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.projectDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "project_domain_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.region_name",
            "displayName": "region_name",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.regionName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "region_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.state_name",
            "displayName": "state_name",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.stateName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "state_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenant_id",
            "displayName": "tenant_id",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tenant_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenant_name",
            "displayName": "tenant_name",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.tenantName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tenant_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.token",
            "displayName": "token",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "token: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.user_domain_id",
            "displayName": "user_domain_id",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user_domain_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.user_domain_name",
            "displayName": "user_domain_name",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user_domain_name: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.user_id",
            "displayName": "user_id",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user_id: str"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwiftConfig.property.user_name",
            "displayName": "user_name",
            "id": "cdktf.DataTerraformRemoteStateSwiftConfig.property.userName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user_name: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.DataTerraformRemoteStateSwiftConfig(\n  defaults: typing.Mapping[typing.Any] = None,\n  workspace: str = None,\n  container: str,\n  application_credential_id: str = None,\n  application_credential_name: str = None,\n  application_credential_secret: str = None,\n  archive_container: str = None,\n  auth_url: str = None,\n  cacert_file: str = None,\n  cert: str = None,\n  cloud: str = None,\n  default_domain: str = None,\n  domain_id: str = None,\n  domain_name: str = None,\n  expire_after: str = None,\n  insecure: bool = None,\n  key: str = None,\n  password: str = None,\n  project_domain_id: str = None,\n  project_domain_name: str = None,\n  region_name: str = None,\n  state_name: str = None,\n  tenant_id: str = None,\n  tenant_name: str = None,\n  token: str = None,\n  user_domain_id: str = None,\n  user_domain_name: str = None,\n  user_id: str = None,\n  user_name: str = None\n)"
      },
      {
        "fqn": "cdktf.EncodingOptions",
        "displayName": "EncodingOptions",
        "id": "cdktf.EncodingOptions",
        "properties": [
          {
            "fqn": "cdktf.EncodingOptions.property.display_hint",
            "displayName": "display_hint",
            "id": "cdktf.EncodingOptions.property.displayHint",
            "optional": true,
            "default": "- no display hint",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "A hint for the Token's purpose when stringifying it."
            },
            "usage": "display_hint: str"
          }
        ],
        "docs": {
          "summary": "Properties to string encodings."
        },
        "usage": "import cdktf\n\ncdktf.EncodingOptions(\n  display_hint: str = None\n)"
      },
      {
        "fqn": "cdktf.EtcdBackendProps",
        "displayName": "EtcdBackendProps",
        "id": "cdktf.EtcdBackendProps",
        "properties": [
          {
            "fqn": "cdktf.EtcdBackendProps.property.endpoints",
            "displayName": "endpoints",
            "id": "cdktf.EtcdBackendProps.property.endpoints",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) A space-separated list of the etcd endpoints."
            },
            "usage": "endpoints: str"
          },
          {
            "fqn": "cdktf.EtcdBackendProps.property.path",
            "displayName": "path",
            "id": "cdktf.EtcdBackendProps.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The path where to store the state."
            },
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.EtcdBackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.EtcdBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The password."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.EtcdBackendProps.property.username",
            "displayName": "username",
            "id": "cdktf.EtcdBackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The username."
            },
            "usage": "username: str"
          }
        ],
        "docs": {
          "summary": "Stores the state in etcd 2.x at a given path.",
          "remarks": "This backend does not support state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/etcd"
        },
        "usage": "import cdktf\n\ncdktf.EtcdBackendProps(\n  endpoints: str,\n  path: str,\n  password: str = None,\n  username: str = None\n)"
      },
      {
        "fqn": "cdktf.EtcdV3BackendProps",
        "displayName": "EtcdV3BackendProps",
        "id": "cdktf.EtcdV3BackendProps",
        "properties": [
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.endpoints",
            "displayName": "endpoints",
            "id": "cdktf.EtcdV3BackendProps.property.endpoints",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Required) The list of 'etcd' endpoints which to connect to."
            },
            "usage": "endpoints: typing.List[str]"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.cacert_path",
            "displayName": "cacert_path",
            "id": "cdktf.EtcdV3BackendProps.property.cacertPath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded CA bundle with which to verify certificates of TLS-enabled etcd servers."
            },
            "usage": "cacert_path: str"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.cert_path",
            "displayName": "cert_path",
            "id": "cdktf.EtcdV3BackendProps.property.certPath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded certificate to provide to etcd for secure client identification."
            },
            "usage": "cert_path: str"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.key_path",
            "displayName": "key_path",
            "id": "cdktf.EtcdV3BackendProps.property.keyPath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to a PEM-encoded key to provide to etcd for secure client identification."
            },
            "usage": "key_path: str"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.lock",
            "displayName": "lock",
            "id": "cdktf.EtcdV3BackendProps.property.lock",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to lock state access.",
              "remarks": "Defaults to true."
            },
            "usage": "lock: bool"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.EtcdV3BackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Password used to connect to the etcd cluster."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.EtcdV3BackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) An optional prefix to be added to keys when to storing state in etcd.",
              "remarks": "Defaults to \"\"."
            },
            "usage": "prefix: str"
          },
          {
            "fqn": "cdktf.EtcdV3BackendProps.property.username",
            "displayName": "username",
            "id": "cdktf.EtcdV3BackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Username used to connect to the etcd cluster."
            },
            "usage": "username: str"
          }
        ],
        "docs": {
          "summary": "Stores the state in the etcd KV store with a given prefix.",
          "remarks": "This backend supports state locking.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/etcdv3"
        },
        "usage": "import cdktf\n\ncdktf.EtcdV3BackendProps(\n  endpoints: typing.List[str],\n  cacert_path: str = None,\n  cert_path: str = None,\n  key_path: str = None,\n  lock: bool = None,\n  password: str = None,\n  prefix: str = None,\n  username: str = None\n)"
      },
      {
        "fqn": "cdktf.FileProvisioner",
        "displayName": "FileProvisioner",
        "id": "cdktf.FileProvisioner",
        "properties": [
          {
            "fqn": "cdktf.FileProvisioner.property.destination",
            "displayName": "destination",
            "id": "cdktf.FileProvisioner.property.destination",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The source file or directory.",
              "remarks": "Specify it either relative to the current working directory or as an absolute path.\nThis argument cannot be combined with content."
            },
            "usage": "destination: str"
          },
          {
            "fqn": "cdktf.FileProvisioner.property.type",
            "displayName": "type",
            "id": "cdktf.FileProvisioner.property.type",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "type: str"
          },
          {
            "fqn": "cdktf.FileProvisioner.property.connection",
            "displayName": "connection",
            "id": "cdktf.FileProvisioner.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[%, %]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect."
            },
            "usage": "connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection]"
          },
          {
            "fqn": "cdktf.FileProvisioner.property.content",
            "displayName": "content",
            "id": "cdktf.FileProvisioner.property.content",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The destination path to write to on the remote system.",
              "remarks": "See Destination Paths below for more information."
            },
            "usage": "content: str"
          },
          {
            "fqn": "cdktf.FileProvisioner.property.source",
            "displayName": "source",
            "id": "cdktf.FileProvisioner.property.source",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The direct content to copy on the destination.",
              "remarks": "If destination is a file, the content will be written on that file.\nIn case of a directory, a file named tf-file-content is created inside that directory.\nWe recommend using a file as the destination when using content.\nThis argument cannot be combined with source."
            },
            "usage": "source: str"
          }
        ],
        "docs": {
          "summary": "The file provisioner copies files or directories from the machine running Terraform to the newly created resource.",
          "remarks": "The file provisioner supports both ssh and winrm type connections.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/file file}"
        },
        "usage": "import cdktf\n\ncdktf.FileProvisioner(\n  destination: str,\n  type: str,\n  connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection] = None,\n  content: str = None,\n  source: str = None\n)"
      },
      {
        "fqn": "cdktf.GcsBackendProps",
        "displayName": "GcsBackendProps",
        "id": "cdktf.GcsBackendProps",
        "properties": [
          {
            "fqn": "cdktf.GcsBackendProps.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.GcsBackendProps.property.bucket",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The name of the GCS bucket.",
              "remarks": "This name must be globally unique."
            },
            "usage": "bucket: str"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.access_token",
            "displayName": "access_token",
            "id": "cdktf.GcsBackendProps.property.accessToken",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the Authorization: Bearer token used to authenticate HTTP requests to GCP APIs. This is an alternative to credentials. If both are specified, access_token will be used over the credentials field."
            },
            "usage": "access_token: str"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.credentials",
            "displayName": "credentials",
            "id": "cdktf.GcsBackendProps.property.credentials",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Local path to Google Cloud Platform account credentials in JSON format.",
              "remarks": "If unset, Google Application Default Credentials are used.\nThe provided credentials must have Storage Object Admin role on the bucket.\n\nWarning: if using the Google Cloud Platform provider as well,\nit will also pick up the GOOGLE_CREDENTIALS environment variable."
            },
            "usage": "credentials: str"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.encryption_key",
            "displayName": "encryption_key",
            "id": "cdktf.GcsBackendProps.property.encryptionKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) A 32 byte base64 encoded 'customer supplied encryption key' used to encrypt all state."
            },
            "usage": "encryption_key: str"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.impersonate_service_account",
            "displayName": "impersonate_service_account",
            "id": "cdktf.GcsBackendProps.property.impersonateServiceAccount",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The service account to impersonate for accessing the State Bucket.",
              "remarks": "You must have roles/iam.serviceAccountTokenCreator role on that account for the impersonation to succeed.\nIf you are using a delegation chain, you can specify that using the impersonate_service_account_delegates field.\nAlternatively, this can be specified using the GOOGLE_IMPERSONATE_SERVICE_ACCOUNT environment variable."
            },
            "usage": "impersonate_service_account: str"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.impersonate_service_account_delegates",
            "displayName": "impersonate_service_account_delegates",
            "id": "cdktf.GcsBackendProps.property.impersonateServiceAccountDelegates",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) The delegation chain for an impersonating a service account."
            },
            "usage": "impersonate_service_account_delegates: typing.List[str]"
          },
          {
            "fqn": "cdktf.GcsBackendProps.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.GcsBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) GCS prefix inside the bucket.",
              "remarks": "Named states for workspaces are stored in an object called <prefix>/<name>.tfstate."
            },
            "usage": "prefix: str"
          }
        ],
        "docs": {
          "summary": "Stores the state as an object in a configurable prefix in a pre-existing bucket on Google Cloud Storage (GCS).",
          "remarks": "The bucket must exist prior to configuring the backend.\n\nThis backend supports state locking.\n\nWarning! It is highly recommended that you enable Object Versioning on the GCS bucket\nto allow for state recovery in the case of accidental deletions and human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/gcs"
        },
        "usage": "import cdktf\n\ncdktf.GcsBackendProps(\n  bucket: str,\n  access_token: str = None,\n  credentials: str = None,\n  encryption_key: str = None,\n  impersonate_service_account: str = None,\n  impersonate_service_account_delegates: typing.List[str] = None,\n  prefix: str = None\n)"
      },
      {
        "fqn": "cdktf.HttpBackendProps",
        "displayName": "HttpBackendProps",
        "id": "cdktf.HttpBackendProps",
        "properties": [
          {
            "fqn": "cdktf.HttpBackendProps.property.address",
            "displayName": "address",
            "id": "cdktf.HttpBackendProps.property.address",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Required) The address of the REST endpoint."
            },
            "usage": "address: str"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.lock_address",
            "displayName": "lock_address",
            "id": "cdktf.HttpBackendProps.property.lockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The address of the lock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "lock_address: str"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.lock_method",
            "displayName": "lock_method",
            "id": "cdktf.HttpBackendProps.property.lockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when locking.",
              "remarks": "Defaults to LOCK."
            },
            "usage": "lock_method: str"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.HttpBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The password for HTTP basic authentication."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.retry_max",
            "displayName": "retry_max",
            "id": "cdktf.HttpBackendProps.property.retryMax",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "(Optional) The number of HTTP request retries.",
              "remarks": "Defaults to 2."
            },
            "usage": "retry_max: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.retry_wait_max",
            "displayName": "retry_wait_max",
            "id": "cdktf.HttpBackendProps.property.retryWaitMax",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "(Optional) The maximum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 30."
            },
            "usage": "retry_wait_max: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.retry_wait_min",
            "displayName": "retry_wait_min",
            "id": "cdktf.HttpBackendProps.property.retryWaitMin",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "(Optional) The minimum time in seconds to wait between HTTP request attempts.",
              "remarks": "Defaults to 1."
            },
            "usage": "retry_wait_min: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.skip_cert_verification",
            "displayName": "skip_cert_verification",
            "id": "cdktf.HttpBackendProps.property.skipCertVerification",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Whether to skip TLS verification.",
              "remarks": "Defaults to false."
            },
            "usage": "skip_cert_verification: bool"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.unlock_address",
            "displayName": "unlock_address",
            "id": "cdktf.HttpBackendProps.property.unlockAddress",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The address of the unlock REST endpoint.",
              "remarks": "Defaults to disabled."
            },
            "usage": "unlock_address: str"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.unlock_method",
            "displayName": "unlock_method",
            "id": "cdktf.HttpBackendProps.property.unlockMethod",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The HTTP method to use when unlocking.",
              "remarks": "Defaults to UNLOCK."
            },
            "usage": "unlock_method: str"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.update_method",
            "displayName": "update_method",
            "id": "cdktf.HttpBackendProps.property.updateMethod",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) HTTP method to use when updating state.",
              "remarks": "Defaults to POST."
            },
            "usage": "update_method: str"
          },
          {
            "fqn": "cdktf.HttpBackendProps.property.username",
            "displayName": "username",
            "id": "cdktf.HttpBackendProps.property.username",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The username for HTTP basic authentication."
            },
            "usage": "username: str"
          }
        ],
        "docs": {
          "summary": "Stores the state using a simple REST client.",
          "remarks": "State will be fetched via GET, updated via POST, and purged with DELETE.\nThe method used for updating is configurable.\n\nThis backend optionally supports state locking.\nWhen locking support is enabled it will use LOCK and UNLOCK requests providing the lock info in the body.\nThe endpoint should return a 423: Locked or 409: Conflict with the holding lock info when\nit's already taken, 200: OK for success. Any other status will be considered an error.\nThe ID of the holding lock info will be added as a query parameter to state updates requests.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/http"
        },
        "usage": "import cdktf\n\ncdktf.HttpBackendProps(\n  address: str,\n  lock_address: str = None,\n  lock_method: str = None,\n  password: str = None,\n  retry_max: typing.Union[int, float] = None,\n  retry_wait_max: typing.Union[int, float] = None,\n  retry_wait_min: typing.Union[int, float] = None,\n  skip_cert_verification: bool = None,\n  unlock_address: str = None,\n  unlock_method: str = None,\n  update_method: str = None,\n  username: str = None\n)"
      },
      {
        "fqn": "cdktf.LazyAnyValueOptions",
        "displayName": "LazyAnyValueOptions",
        "id": "cdktf.LazyAnyValueOptions",
        "properties": [
          {
            "fqn": "cdktf.LazyAnyValueOptions.property.display_hint",
            "displayName": "display_hint",
            "id": "cdktf.LazyAnyValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "display_hint: str"
          },
          {
            "fqn": "cdktf.LazyAnyValueOptions.property.omit_empty_array",
            "displayName": "omit_empty_array",
            "id": "cdktf.LazyAnyValueOptions.property.omitEmptyArray",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "If the produced value is an array and it is empty, return 'undefined' instead."
            },
            "usage": "omit_empty_array: bool"
          }
        ],
        "docs": {
          "summary": "Options for creating lazy untyped tokens."
        },
        "usage": "import cdktf\n\ncdktf.LazyAnyValueOptions(\n  display_hint: str = None,\n  omit_empty_array: bool = None\n)"
      },
      {
        "fqn": "cdktf.LazyListValueOptions",
        "displayName": "LazyListValueOptions",
        "id": "cdktf.LazyListValueOptions",
        "properties": [
          {
            "fqn": "cdktf.LazyListValueOptions.property.display_hint",
            "displayName": "display_hint",
            "id": "cdktf.LazyListValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "display_hint: str"
          },
          {
            "fqn": "cdktf.LazyListValueOptions.property.omit_empty",
            "displayName": "omit_empty",
            "id": "cdktf.LazyListValueOptions.property.omitEmpty",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "If the produced list is empty, return 'undefined' instead."
            },
            "usage": "omit_empty: bool"
          }
        ],
        "docs": {
          "summary": "Options for creating a lazy list token."
        },
        "usage": "import cdktf\n\ncdktf.LazyListValueOptions(\n  display_hint: str = None,\n  omit_empty: bool = None\n)"
      },
      {
        "fqn": "cdktf.LazyStringValueOptions",
        "displayName": "LazyStringValueOptions",
        "id": "cdktf.LazyStringValueOptions",
        "properties": [
          {
            "fqn": "cdktf.LazyStringValueOptions.property.display_hint",
            "displayName": "display_hint",
            "id": "cdktf.LazyStringValueOptions.property.displayHint",
            "optional": true,
            "default": "- No hint",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Use the given name as a display hint."
            },
            "usage": "display_hint: str"
          }
        ],
        "docs": {
          "summary": "Options for creating a lazy string token."
        },
        "usage": "import cdktf\n\ncdktf.LazyStringValueOptions(\n  display_hint: str = None\n)"
      },
      {
        "fqn": "cdktf.LocalBackendProps",
        "displayName": "LocalBackendProps",
        "id": "cdktf.LocalBackendProps",
        "properties": [
          {
            "fqn": "cdktf.LocalBackendProps.property.path",
            "displayName": "path",
            "id": "cdktf.LocalBackendProps.property.path",
            "optional": true,
            "default": "- defaults to terraform.${stackId}.tfstate",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Path where the state file is stored."
            },
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.LocalBackendProps.property.workspace_dir",
            "displayName": "workspace_dir",
            "id": "cdktf.LocalBackendProps.property.workspaceDir",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The path to non-default workspaces."
            },
            "usage": "workspace_dir: str"
          }
        ],
        "docs": {
          "summary": "The local backend stores state on the local filesystem, locks that state using system APIs, and performs operations locally.",
          "remarks": "Read more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/local"
        },
        "usage": "import cdktf\n\ncdktf.LocalBackendProps(\n  path: str = None,\n  workspace_dir: str = None\n)"
      },
      {
        "fqn": "cdktf.LocalExecProvisioner",
        "displayName": "LocalExecProvisioner",
        "id": "cdktf.LocalExecProvisioner",
        "properties": [
          {
            "fqn": "cdktf.LocalExecProvisioner.property.command",
            "displayName": "command",
            "id": "cdktf.LocalExecProvisioner.property.command",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "This is the command to execute.",
              "remarks": "It can be provided as a relative path to the current working directory or as an absolute path.\nIt is evaluated in a shell, and can use environment variables or Terraform variables."
            },
            "usage": "command: str"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.type",
            "displayName": "type",
            "id": "cdktf.LocalExecProvisioner.property.type",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "type: str"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.environment",
            "displayName": "environment",
            "id": "cdktf.LocalExecProvisioner.property.environment",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "A record of key value pairs representing the environment of the executed command.",
              "remarks": "It inherits the current process environment."
            },
            "usage": "environment: typing.Mapping[str]"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.interpreter",
            "displayName": "interpreter",
            "id": "cdktf.LocalExecProvisioner.property.interpreter",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "If provided, this is a list of interpreter arguments used to execute the command.",
              "remarks": "The first argument is the interpreter itself.\nIt can be provided as a relative path to the current working directory or as an absolute path\nThe remaining arguments are appended prior to the command.\nThis allows building command lines of the form \"/bin/bash\", \"-c\", \"echo foo\".\nIf interpreter is unspecified, sensible defaults will be chosen based on the system OS."
            },
            "usage": "interpreter: typing.List[str]"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.when",
            "displayName": "when",
            "id": "cdktf.LocalExecProvisioner.property.when",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "If provided, specifies when Terraform will execute the command.",
              "remarks": "For example, when = destroy specifies that the provisioner will run when the associated resource is destroyed"
            },
            "usage": "when: str"
          },
          {
            "fqn": "cdktf.LocalExecProvisioner.property.working_dir",
            "displayName": "working_dir",
            "id": "cdktf.LocalExecProvisioner.property.workingDir",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "If provided, specifies the working directory where command will be executed.",
              "remarks": "It can be provided as a relative path to the current working directory or as an absolute path.\nThe directory must exist."
            },
            "usage": "working_dir: str"
          }
        ],
        "docs": {
          "summary": "The local-exec provisioner invokes a local executable after a resource is created.",
          "remarks": "This invokes a process on the machine running Terraform, not on the resource.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/local-exec local-exec}"
        },
        "usage": "import cdktf\n\ncdktf.LocalExecProvisioner(\n  command: str,\n  type: str,\n  environment: typing.Mapping[str] = None,\n  interpreter: typing.List[str] = None,\n  when: str = None,\n  working_dir: str = None\n)"
      },
      {
        "fqn": "cdktf.MantaBackendProps",
        "displayName": "MantaBackendProps",
        "id": "cdktf.MantaBackendProps",
        "properties": [
          {
            "fqn": "cdktf.MantaBackendProps.property.account",
            "displayName": "account",
            "id": "cdktf.MantaBackendProps.property.account",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "account: str"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.key_id",
            "displayName": "key_id",
            "id": "cdktf.MantaBackendProps.property.keyId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "key_id: str"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.path",
            "displayName": "path",
            "id": "cdktf.MantaBackendProps.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.insecure_skip_tls_verify",
            "displayName": "insecure_skip_tls_verify",
            "id": "cdktf.MantaBackendProps.property.insecureSkipTlsVerify",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "insecure_skip_tls_verify: bool"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.key_material",
            "displayName": "key_material",
            "id": "cdktf.MantaBackendProps.property.keyMaterial",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "key_material: str"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.object_name",
            "displayName": "object_name",
            "id": "cdktf.MantaBackendProps.property.objectName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "object_name: str"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.url",
            "displayName": "url",
            "id": "cdktf.MantaBackendProps.property.url",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "url: str"
          },
          {
            "fqn": "cdktf.MantaBackendProps.property.user",
            "displayName": "user",
            "id": "cdktf.MantaBackendProps.property.user",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.MantaBackendProps(\n  account: str,\n  key_id: str,\n  path: str,\n  insecure_skip_tls_verify: bool = None,\n  key_material: str = None,\n  object_name: str = None,\n  url: str = None,\n  user: str = None\n)"
      },
      {
        "fqn": "cdktf.OssAssumeRole",
        "displayName": "OssAssumeRole",
        "id": "cdktf.OssAssumeRole",
        "properties": [
          {
            "fqn": "cdktf.OssAssumeRole.property.role_arn",
            "displayName": "role_arn",
            "id": "cdktf.OssAssumeRole.property.roleArn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "role_arn: str"
          },
          {
            "fqn": "cdktf.OssAssumeRole.property.policy",
            "displayName": "policy",
            "id": "cdktf.OssAssumeRole.property.policy",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "policy: str"
          },
          {
            "fqn": "cdktf.OssAssumeRole.property.session_expiration",
            "displayName": "session_expiration",
            "id": "cdktf.OssAssumeRole.property.sessionExpiration",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {},
            "usage": "session_expiration: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.OssAssumeRole.property.session_name",
            "displayName": "session_name",
            "id": "cdktf.OssAssumeRole.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "session_name: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.OssAssumeRole(\n  role_arn: str,\n  policy: str = None,\n  session_expiration: typing.Union[int, float] = None,\n  session_name: str = None\n)"
      },
      {
        "fqn": "cdktf.OssBackendProps",
        "displayName": "OssBackendProps",
        "id": "cdktf.OssBackendProps",
        "properties": [
          {
            "fqn": "cdktf.OssBackendProps.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.OssBackendProps.property.bucket",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "bucket: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.access_key",
            "displayName": "access_key",
            "id": "cdktf.OssBackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "access_key: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.acl",
            "displayName": "acl",
            "id": "cdktf.OssBackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "acl: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.assume_role",
            "displayName": "assume_role",
            "id": "cdktf.OssBackendProps.property.assumeRole",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.OssAssumeRole",
                  "displayName": "OssAssumeRole",
                  "fqn": "cdktf.OssAssumeRole",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "assume_role: OssAssumeRole"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.ecs_role_name",
            "displayName": "ecs_role_name",
            "id": "cdktf.OssBackendProps.property.ecsRoleName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "ecs_role_name: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.OssBackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "encrypt: bool"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.OssBackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "endpoint: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.OssBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.prefix",
            "displayName": "prefix",
            "id": "cdktf.OssBackendProps.property.prefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "prefix: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.profile",
            "displayName": "profile",
            "id": "cdktf.OssBackendProps.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "profile: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.region",
            "displayName": "region",
            "id": "cdktf.OssBackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "region: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.secret_key",
            "displayName": "secret_key",
            "id": "cdktf.OssBackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "secret_key: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.security_token",
            "displayName": "security_token",
            "id": "cdktf.OssBackendProps.property.securityToken",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "security_token: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.shared_credentials_file",
            "displayName": "shared_credentials_file",
            "id": "cdktf.OssBackendProps.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "shared_credentials_file: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.tablestore_endpoint",
            "displayName": "tablestore_endpoint",
            "id": "cdktf.OssBackendProps.property.tablestoreEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tablestore_endpoint: str"
          },
          {
            "fqn": "cdktf.OssBackendProps.property.tablestore_table",
            "displayName": "tablestore_table",
            "id": "cdktf.OssBackendProps.property.tablestoreTable",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tablestore_table: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.OssBackendProps(\n  bucket: str,\n  access_key: str = None,\n  acl: str = None,\n  assume_role: OssAssumeRole = None,\n  ecs_role_name: str = None,\n  encrypt: bool = None,\n  endpoint: str = None,\n  key: str = None,\n  prefix: str = None,\n  profile: str = None,\n  region: str = None,\n  secret_key: str = None,\n  security_token: str = None,\n  shared_credentials_file: str = None,\n  tablestore_endpoint: str = None,\n  tablestore_table: str = None\n)"
      },
      {
        "fqn": "cdktf.PgBackendProps",
        "displayName": "PgBackendProps",
        "id": "cdktf.PgBackendProps",
        "properties": [
          {
            "fqn": "cdktf.PgBackendProps.property.conn_str",
            "displayName": "conn_str",
            "id": "cdktf.PgBackendProps.property.connStr",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "conn_str: str"
          },
          {
            "fqn": "cdktf.PgBackendProps.property.schema_name",
            "displayName": "schema_name",
            "id": "cdktf.PgBackendProps.property.schemaName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "schema_name: str"
          },
          {
            "fqn": "cdktf.PgBackendProps.property.skip_schema_creation",
            "displayName": "skip_schema_creation",
            "id": "cdktf.PgBackendProps.property.skipSchemaCreation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "skip_schema_creation: bool"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.PgBackendProps(\n  conn_str: str,\n  schema_name: str = None,\n  skip_schema_creation: bool = None\n)"
      },
      {
        "fqn": "cdktf.RemoteBackendProps",
        "displayName": "RemoteBackendProps",
        "id": "cdktf.RemoteBackendProps",
        "properties": [
          {
            "fqn": "cdktf.RemoteBackendProps.property.organization",
            "displayName": "organization",
            "id": "cdktf.RemoteBackendProps.property.organization",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "organization: str"
          },
          {
            "fqn": "cdktf.RemoteBackendProps.property.workspaces",
            "displayName": "workspaces",
            "id": "cdktf.RemoteBackendProps.property.workspaces",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.IRemoteWorkspace",
                  "displayName": "IRemoteWorkspace",
                  "fqn": "cdktf.IRemoteWorkspace",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "workspaces: IRemoteWorkspace"
          },
          {
            "fqn": "cdktf.RemoteBackendProps.property.hostname",
            "displayName": "hostname",
            "id": "cdktf.RemoteBackendProps.property.hostname",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "hostname: str"
          },
          {
            "fqn": "cdktf.RemoteBackendProps.property.token",
            "displayName": "token",
            "id": "cdktf.RemoteBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "token: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.RemoteBackendProps(\n  organization: str,\n  workspaces: IRemoteWorkspace,\n  hostname: str = None,\n  token: str = None\n)"
      },
      {
        "fqn": "cdktf.RemoteExecProvisioner",
        "displayName": "RemoteExecProvisioner",
        "id": "cdktf.RemoteExecProvisioner",
        "properties": [
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.type",
            "displayName": "type",
            "id": "cdktf.RemoteExecProvisioner.property.type",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "type: str"
          },
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.connection",
            "displayName": "connection",
            "id": "cdktf.RemoteExecProvisioner.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[%, %]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
              "remarks": "A connection must be provided here or in the parent resource."
            },
            "usage": "connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection]"
          },
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.inline",
            "displayName": "inline",
            "id": "cdktf.RemoteExecProvisioner.property.inline",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "This is a list of command strings.",
              "remarks": "They are executed in the order they are provided.\nThis cannot be provided with script or scripts."
            },
            "usage": "inline: typing.List[str]"
          },
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.script",
            "displayName": "script",
            "id": "cdktf.RemoteExecProvisioner.property.script",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "This is a path (relative or absolute) to a local script that will be copied to the remote resource and then executed.",
              "remarks": "This cannot be provided with inline or scripts."
            },
            "usage": "script: str"
          },
          {
            "fqn": "cdktf.RemoteExecProvisioner.property.scripts",
            "displayName": "scripts",
            "id": "cdktf.RemoteExecProvisioner.property.scripts",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "This is a list of paths (relative or absolute) to local scripts that will be copied to the remote resource and then executed.",
              "remarks": "They are executed in the order they are provided.\nThis cannot be provided with inline or script."
            },
            "usage": "scripts: typing.List[str]"
          }
        ],
        "docs": {
          "summary": "The remote-exec provisioner invokes a script on a remote resource after it is created.",
          "remarks": "This can be used to run a configuration management tool, bootstrap into a cluster, etc\nThe remote-exec provisioner requires a connection and supports both ssh and winrm.\n\nSee {@link https://www.terraform.io/language/resources/provisioners/remote-exec remote-exec}"
        },
        "usage": "import cdktf\n\ncdktf.RemoteExecProvisioner(\n  type: str,\n  connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection] = None,\n  inline: typing.List[str] = None,\n  script: str = None,\n  scripts: typing.List[str] = None\n)"
      },
      {
        "fqn": "cdktf.ResolveOptions",
        "displayName": "ResolveOptions",
        "id": "cdktf.ResolveOptions",
        "properties": [
          {
            "fqn": "cdktf.ResolveOptions.property.resolver",
            "displayName": "resolver",
            "id": "cdktf.ResolveOptions.property.resolver",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITokenResolver",
                  "displayName": "ITokenResolver",
                  "fqn": "cdktf.ITokenResolver",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The resolver to apply to any resolvable tokens found."
            },
            "usage": "resolver: ITokenResolver"
          },
          {
            "fqn": "cdktf.ResolveOptions.property.scope",
            "displayName": "scope",
            "id": "cdktf.ResolveOptions.property.scope",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.IConstruct",
                  "displayName": "IConstruct",
                  "fqn": "constructs.IConstruct",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The scope from which resolution is performed."
            },
            "usage": "scope: IConstruct"
          },
          {
            "fqn": "cdktf.ResolveOptions.property.preparing",
            "displayName": "preparing",
            "id": "cdktf.ResolveOptions.property.preparing",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Whether the resolution is being executed during the prepare phase or not."
            },
            "usage": "preparing: bool"
          }
        ],
        "docs": {
          "summary": "Options to the resolve() operation.",
          "remarks": "NOT the same as the ResolveContext; ResolveContext is exposed to Token\nimplementors and resolution hooks, whereas this struct is just to bundle\na number of things that would otherwise be arguments to resolve() in a\nreadable way."
        },
        "usage": "import cdktf\n\ncdktf.ResolveOptions(\n  resolver: ITokenResolver,\n  scope: IConstruct,\n  preparing: bool = None\n)"
      },
      {
        "fqn": "cdktf.S3BackendProps",
        "displayName": "S3BackendProps",
        "id": "cdktf.S3BackendProps",
        "properties": [
          {
            "fqn": "cdktf.S3BackendProps.property.bucket",
            "displayName": "bucket",
            "id": "cdktf.S3BackendProps.property.bucket",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Name of the S3 Bucket."
            },
            "usage": "bucket: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.S3BackendProps.property.key",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Path to the state file inside the S3 Bucket.",
              "remarks": "When using a non-default workspace, the state path will be /workspace_key_prefix/workspace_name/key"
            },
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.access_key",
            "displayName": "access_key",
            "id": "cdktf.S3BackendProps.property.accessKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) AWS access key.",
              "remarks": "If configured, must also configure secret_key.\nThis can also be sourced from\nthe AWS_ACCESS_KEY_ID environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)."
            },
            "usage": "access_key: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.acl",
            "displayName": "acl",
            "id": "cdktf.S3BackendProps.property.acl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Canned ACL to be applied to the state file."
            },
            "usage": "acl: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.assume_role_policy",
            "displayName": "assume_role_policy",
            "id": "cdktf.S3BackendProps.property.assumeRolePolicy",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) IAM Policy JSON describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "assume_role_policy: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.assume_role_policy_arns",
            "displayName": "assume_role_policy_arns",
            "id": "cdktf.S3BackendProps.property.assumeRolePolicyArns",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of Amazon Resource Names (ARNs) of IAM Policies describing further restricting permissions for the IAM Role being assumed."
            },
            "usage": "assume_role_policy_arns: typing.List[str]"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.assume_role_tags",
            "displayName": "assume_role_tags",
            "id": "cdktf.S3BackendProps.property.assumeRoleTags",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Map of assume role session tags."
            },
            "usage": "assume_role_tags: typing.Mapping[str]"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.assume_role_transitive_tag_keys",
            "displayName": "assume_role_transitive_tag_keys",
            "id": "cdktf.S3BackendProps.property.assumeRoleTransitiveTagKeys",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "(Optional) Set of assume role session tag keys to pass to any subsequent sessions."
            },
            "usage": "assume_role_transitive_tag_keys: typing.List[str]"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.dynamodb_endpoint",
            "displayName": "dynamodb_endpoint",
            "id": "cdktf.S3BackendProps.property.dynamodbEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS DynamoDB API.",
              "remarks": "This can also be sourced from the AWS_DYNAMODB_ENDPOINT environment variable."
            },
            "usage": "dynamodb_endpoint: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.dynamodb_table",
            "displayName": "dynamodb_table",
            "id": "cdktf.S3BackendProps.property.dynamodbTable",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Name of DynamoDB Table to use for state locking and consistency.",
              "remarks": "The table must have a partition key named LockID with type of String.\nIf not configured, state locking will be disabled."
            },
            "usage": "dynamodb_table: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.encrypt",
            "displayName": "encrypt",
            "id": "cdktf.S3BackendProps.property.encrypt",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Enable server side encryption of the state file."
            },
            "usage": "encrypt: bool"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.endpoint",
            "displayName": "endpoint",
            "id": "cdktf.S3BackendProps.property.endpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS S3 API.",
              "remarks": "This can also be sourced from the AWS_S3_ENDPOINT environment variable."
            },
            "usage": "endpoint: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.external_id",
            "displayName": "external_id",
            "id": "cdktf.S3BackendProps.property.externalId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) External identifier to use when assuming the role."
            },
            "usage": "external_id: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.force_path_style",
            "displayName": "force_path_style",
            "id": "cdktf.S3BackendProps.property.forcePathStyle",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Enable path-style S3 URLs (https://<HOST>/<BUCKET> instead of https://<BUCKET>.<HOST>)."
            },
            "usage": "force_path_style: bool"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.iam_endpoint",
            "displayName": "iam_endpoint",
            "id": "cdktf.S3BackendProps.property.iamEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Identity and Access Management (IAM) API.",
              "remarks": "This can also be sourced from the AWS_IAM_ENDPOINT environment variable."
            },
            "usage": "iam_endpoint: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.kms_key_id",
            "displayName": "kms_key_id",
            "id": "cdktf.S3BackendProps.property.kmsKeyId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of a Key Management Service (KMS) Key to use for encrypting the state.",
              "remarks": "Note that if this value is specified,\nTerraform will need kms:Encrypt, kms:Decrypt and kms:GenerateDataKey permissions on this KMS key."
            },
            "usage": "kms_key_id: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.max_retries",
            "displayName": "max_retries",
            "id": "cdktf.S3BackendProps.property.maxRetries",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "(Optional) The maximum number of times an AWS API request is retried on retryable failure.",
              "remarks": "Defaults to 5."
            },
            "usage": "max_retries: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.profile",
            "displayName": "profile",
            "id": "cdktf.S3BackendProps.property.profile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Name of AWS profile in AWS shared credentials file (e.g. ~/.aws/credentials) or AWS shared configuration file (e.g. ~/.aws/config) to use for credentials and/or configuration. This can also be sourced from the AWS_PROFILE environment variable."
            },
            "usage": "profile: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.region",
            "displayName": "region",
            "id": "cdktf.S3BackendProps.property.region",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "AWS Region of the S3 Bucket and DynamoDB Table (if used).",
              "remarks": "This can also\nbe sourced from the AWS_DEFAULT_REGION and AWS_REGION environment\nvariables."
            },
            "usage": "region: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.role_arn",
            "displayName": "role_arn",
            "id": "cdktf.S3BackendProps.property.roleArn",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Amazon Resource Name (ARN) of the IAM Role to assume."
            },
            "usage": "role_arn: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.secret_key",
            "displayName": "secret_key",
            "id": "cdktf.S3BackendProps.property.secretKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) AWS secret access key.",
              "remarks": "If configured, must also configure access_key.\nThis can also be sourced from\nthe AWS_SECRET_ACCESS_KEY environment variable,\nAWS shared credentials file (e.g. ~/.aws/credentials),\nor AWS shared configuration file (e.g. ~/.aws/config)"
            },
            "usage": "secret_key: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.session_name",
            "displayName": "session_name",
            "id": "cdktf.S3BackendProps.property.sessionName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Session name to use when assuming the role."
            },
            "usage": "session_name: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.shared_credentials_file",
            "displayName": "shared_credentials_file",
            "id": "cdktf.S3BackendProps.property.sharedCredentialsFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Path to the AWS shared credentials file.",
              "remarks": "Defaults to ~/.aws/credentials."
            },
            "usage": "shared_credentials_file: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.skip_credentials_validation",
            "displayName": "skip_credentials_validation",
            "id": "cdktf.S3BackendProps.property.skipCredentialsValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip credentials validation via the STS API."
            },
            "usage": "skip_credentials_validation: bool"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.skip_metadata_api_check",
            "displayName": "skip_metadata_api_check",
            "id": "cdktf.S3BackendProps.property.skipMetadataApiCheck",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip usage of EC2 Metadata API."
            },
            "usage": "skip_metadata_api_check: bool"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.skip_region_validation",
            "displayName": "skip_region_validation",
            "id": "cdktf.S3BackendProps.property.skipRegionValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "(Optional) Skip validation of provided region name."
            },
            "usage": "skip_region_validation: bool"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.sse_customer_key",
            "displayName": "sse_customer_key",
            "id": "cdktf.S3BackendProps.property.sseCustomerKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) The key to use for encrypting state with Server-Side Encryption with Customer-Provided Keys (SSE-C).",
              "remarks": "This is the base64-encoded value of the key, which must decode to 256 bits.\nThis can also be sourced from the AWS_SSE_CUSTOMER_KEY environment variable,\nwhich is recommended due to the sensitivity of the value.\nSetting it inside a terraform file will cause it to be persisted to disk in terraform.tfstate."
            },
            "usage": "sse_customer_key: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.sts_endpoint",
            "displayName": "sts_endpoint",
            "id": "cdktf.S3BackendProps.property.stsEndpoint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Custom endpoint for the AWS Security Token Service (STS) API.",
              "remarks": "This can also be sourced from the AWS_STS_ENDPOINT environment variable."
            },
            "usage": "sts_endpoint: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.token",
            "displayName": "token",
            "id": "cdktf.S3BackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Multi-Factor Authentication (MFA) token.",
              "remarks": "This can also be sourced from the AWS_SESSION_TOKEN environment variable."
            },
            "usage": "token: str"
          },
          {
            "fqn": "cdktf.S3BackendProps.property.workspace_key_prefix",
            "displayName": "workspace_key_prefix",
            "id": "cdktf.S3BackendProps.property.workspaceKeyPrefix",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "(Optional) Prefix applied to the state path inside the bucket.",
              "remarks": "This is only relevant when using a non-default workspace. Defaults to env:"
            },
            "usage": "workspace_key_prefix: str"
          }
        ],
        "docs": {
          "summary": "Stores the state as a given key in a given bucket on Amazon S3.",
          "remarks": "This backend\nalso supports state locking and consistency checking via Dynamo DB, which\ncan be enabled by setting the dynamodb_table field to an existing DynamoDB\ntable name. A single DynamoDB table can be used to lock multiple remote\nstate files. Terraform generates key names that include the values of the\nbucket and key variables.\n\nWarning! It is highly recommended that you enable Bucket Versioning on the\nS3 bucket to allow for state recovery in the case of accidental deletions\nand human error.\n\nRead more about this backend in the Terraform docs:\nhttps://www.terraform.io/language/settings/backends/s3"
        },
        "usage": "import cdktf\n\ncdktf.S3BackendProps(\n  bucket: str,\n  key: str,\n  access_key: str = None,\n  acl: str = None,\n  assume_role_policy: str = None,\n  assume_role_policy_arns: typing.List[str] = None,\n  assume_role_tags: typing.Mapping[str] = None,\n  assume_role_transitive_tag_keys: typing.List[str] = None,\n  dynamodb_endpoint: str = None,\n  dynamodb_table: str = None,\n  encrypt: bool = None,\n  endpoint: str = None,\n  external_id: str = None,\n  force_path_style: bool = None,\n  iam_endpoint: str = None,\n  kms_key_id: str = None,\n  max_retries: typing.Union[int, float] = None,\n  profile: str = None,\n  region: str = None,\n  role_arn: str = None,\n  secret_key: str = None,\n  session_name: str = None,\n  shared_credentials_file: str = None,\n  skip_credentials_validation: bool = None,\n  skip_metadata_api_check: bool = None,\n  skip_region_validation: bool = None,\n  sse_customer_key: str = None,\n  sts_endpoint: str = None,\n  token: str = None,\n  workspace_key_prefix: str = None\n)"
      },
      {
        "fqn": "cdktf.SSHProvisionerConnection",
        "displayName": "SSHProvisionerConnection",
        "id": "cdktf.SSHProvisionerConnection",
        "properties": [
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.host",
            "displayName": "host",
            "id": "cdktf.SSHProvisionerConnection.property.host",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The address of the resource to connect to."
            },
            "usage": "host: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.type",
            "displayName": "type",
            "id": "cdktf.SSHProvisionerConnection.property.type",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The connection type.",
              "remarks": "Valid values are \"ssh\" and \"winrm\".\nProvisioners typically assume that the remote system runs Microsoft Windows when using WinRM.\nBehaviors based on the SSH target_platform will force Windows-specific behavior for WinRM, unless otherwise specified."
            },
            "usage": "type: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.agent",
            "displayName": "agent",
            "id": "cdktf.SSHProvisionerConnection.property.agent",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Set to false to disable using ssh-agent to authenticate.",
              "remarks": "On Windows the only supported SSH authentication agent is Pageant."
            },
            "usage": "agent: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.agent_identity",
            "displayName": "agent_identity",
            "id": "cdktf.SSHProvisionerConnection.property.agentIdentity",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The preferred identity from the ssh agent for authentication."
            },
            "usage": "agent_identity: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastion_certificate",
            "displayName": "bastion_certificate",
            "id": "cdktf.SSHProvisionerConnection.property.bastionCertificate",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The contents of a signed CA Certificate.",
              "remarks": "The certificate argument must be used in conjunction with a bastion_private_key.\nThese can be loaded from a file on disk using the the file function."
            },
            "usage": "bastion_certificate: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastion_host",
            "displayName": "bastion_host",
            "id": "cdktf.SSHProvisionerConnection.property.bastionHost",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Setting this enables the bastion Host connection.",
              "remarks": "The provisioner will connect to bastion_host first, and then connect from there to host."
            },
            "usage": "bastion_host: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastion_host_key",
            "displayName": "bastion_host_key",
            "id": "cdktf.SSHProvisionerConnection.property.bastionHostKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The public key from the remote host or the signing CA, used to verify the host connection."
            },
            "usage": "bastion_host_key: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastion_password",
            "displayName": "bastion_password",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPassword",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The password to use for the bastion host."
            },
            "usage": "bastion_password: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastion_port",
            "displayName": "bastion_port",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPort",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "The port to use connect to the bastion host."
            },
            "usage": "bastion_port: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastion_private_key",
            "displayName": "bastion_private_key",
            "id": "cdktf.SSHProvisionerConnection.property.bastionPrivateKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The contents of an SSH key file to use for the bastion host.",
              "remarks": "These can be loaded from a file on disk using the file function."
            },
            "usage": "bastion_private_key: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.bastion_user",
            "displayName": "bastion_user",
            "id": "cdktf.SSHProvisionerConnection.property.bastionUser",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The user for the connection to the bastion host."
            },
            "usage": "bastion_user: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.certificate",
            "displayName": "certificate",
            "id": "cdktf.SSHProvisionerConnection.property.certificate",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The contents of a signed CA Certificate.",
              "remarks": "The certificate argument must be used in conjunction with a private_key.\nThese can be loaded from a file on disk using the the file function."
            },
            "usage": "certificate: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.host_key",
            "displayName": "host_key",
            "id": "cdktf.SSHProvisionerConnection.property.hostKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The public key from the remote host or the signing CA, used to verify the connection."
            },
            "usage": "host_key: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.password",
            "displayName": "password",
            "id": "cdktf.SSHProvisionerConnection.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The password to use for the connection."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.port",
            "displayName": "port",
            "id": "cdktf.SSHProvisionerConnection.property.port",
            "optional": true,
            "default": "22",
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "The port to connect to."
            },
            "usage": "port: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.private_key",
            "displayName": "private_key",
            "id": "cdktf.SSHProvisionerConnection.property.privateKey",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The contents of an SSH key to use for the connection.",
              "remarks": "These can be loaded from a file on disk using the file function.\nThis takes preference over password if provided."
            },
            "usage": "private_key: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxy_host",
            "displayName": "proxy_host",
            "id": "cdktf.SSHProvisionerConnection.property.proxyHost",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "Setting this enables the SSH over HTTP connection.",
              "remarks": "This host will be connected to first, and then the host or bastion_host connection will be made from there."
            },
            "usage": "proxy_host: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxy_port",
            "displayName": "proxy_port",
            "id": "cdktf.SSHProvisionerConnection.property.proxyPort",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "The port to use connect to the proxy host."
            },
            "usage": "proxy_port: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxy_scheme",
            "displayName": "proxy_scheme",
            "id": "cdktf.SSHProvisionerConnection.property.proxyScheme",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The ssh connection also supports the following fields to facilitate connections by SSH over HTTP proxy."
            },
            "usage": "proxy_scheme: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxy_user_name",
            "displayName": "proxy_user_name",
            "id": "cdktf.SSHProvisionerConnection.property.proxyUserName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The username to use connect to the private proxy host.",
              "remarks": "This argument should be specified only if authentication is required for the HTTP Proxy server."
            },
            "usage": "proxy_user_name: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.proxy_user_password",
            "displayName": "proxy_user_password",
            "id": "cdktf.SSHProvisionerConnection.property.proxyUserPassword",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The password to use connect to the private proxy host.",
              "remarks": "This argument should be specified only if authentication is required for the HTTP Proxy server."
            },
            "usage": "proxy_user_password: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.script_path",
            "displayName": "script_path",
            "id": "cdktf.SSHProvisionerConnection.property.scriptPath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The path used to copy scripts meant for remote execution.",
              "remarks": "Refer to {@link https://www.terraform.io/language/resources/provisioners/connection#how-provisioners-execute-remote-scripts How Provisioners Execute Remote Scripts below for more details}"
            },
            "usage": "script_path: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.target_platform",
            "displayName": "target_platform",
            "id": "cdktf.SSHProvisionerConnection.property.targetPlatform",
            "optional": true,
            "default": "unix",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The target platform to connect to.",
              "remarks": "Valid values are \"windows\" and \"unix\".\nIf the platform is set to windows, the default script_path is c:\\windows\\temp\\terraform_%RAND%.cmd, assuming the SSH default shell is cmd.exe.\nIf the SSH default shell is PowerShell, set script_path to \"c:/windows/temp/terraform_%RAND%.ps1\""
            },
            "usage": "target_platform: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.timeout",
            "displayName": "timeout",
            "id": "cdktf.SSHProvisionerConnection.property.timeout",
            "optional": true,
            "default": "5m",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The timeout to wait for the connection to become available.",
              "remarks": "Should be provided as a string (e.g., \"30s\" or \"5m\".)"
            },
            "usage": "timeout: str"
          },
          {
            "fqn": "cdktf.SSHProvisionerConnection.property.user",
            "displayName": "user",
            "id": "cdktf.SSHProvisionerConnection.property.user",
            "optional": true,
            "default": "root",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The user to use for the connection."
            },
            "usage": "user: str"
          }
        ],
        "docs": {
          "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
          "remarks": "See {@link https://www.terraform.io/language/resources/provisioners/connection connection}"
        },
        "usage": "import cdktf\n\ncdktf.SSHProvisionerConnection(\n  host: str,\n  type: str,\n  agent: str = None,\n  agent_identity: str = None,\n  bastion_certificate: str = None,\n  bastion_host: str = None,\n  bastion_host_key: str = None,\n  bastion_password: str = None,\n  bastion_port: typing.Union[int, float] = None,\n  bastion_private_key: str = None,\n  bastion_user: str = None,\n  certificate: str = None,\n  host_key: str = None,\n  password: str = None,\n  port: typing.Union[int, float] = None,\n  private_key: str = None,\n  proxy_host: str = None,\n  proxy_port: typing.Union[int, float] = None,\n  proxy_scheme: str = None,\n  proxy_user_name: str = None,\n  proxy_user_password: str = None,\n  script_path: str = None,\n  target_platform: str = None,\n  timeout: str = None,\n  user: str = None\n)"
      },
      {
        "fqn": "cdktf.StackAnnotation",
        "displayName": "StackAnnotation",
        "id": "cdktf.StackAnnotation",
        "properties": [
          {
            "fqn": "cdktf.StackAnnotation.property.construct_path",
            "displayName": "construct_path",
            "id": "cdktf.StackAnnotation.property.constructPath",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "construct_path: str"
          },
          {
            "fqn": "cdktf.StackAnnotation.property.level",
            "displayName": "level",
            "id": "cdktf.StackAnnotation.property.level",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AnnotationMetadataEntryType",
                  "displayName": "AnnotationMetadataEntryType",
                  "fqn": "cdktf.AnnotationMetadataEntryType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "level: AnnotationMetadataEntryType"
          },
          {
            "fqn": "cdktf.StackAnnotation.property.message",
            "displayName": "message",
            "id": "cdktf.StackAnnotation.property.message",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "message: str"
          },
          {
            "fqn": "cdktf.StackAnnotation.property.stacktrace",
            "displayName": "stacktrace",
            "id": "cdktf.StackAnnotation.property.stacktrace",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "stacktrace: typing.List[str]"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.StackAnnotation(\n  construct_path: str,\n  level: AnnotationMetadataEntryType,\n  message: str,\n  stacktrace: typing.List[str] = None\n)"
      },
      {
        "fqn": "cdktf.StackManifest",
        "displayName": "StackManifest",
        "id": "cdktf.StackManifest",
        "properties": [
          {
            "fqn": "cdktf.StackManifest.property.annotations",
            "displayName": "annotations",
            "id": "cdktf.StackManifest.property.annotations",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackAnnotation",
                      "displayName": "StackAnnotation",
                      "fqn": "cdktf.StackAnnotation",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "annotations: typing.List[StackAnnotation]"
          },
          {
            "fqn": "cdktf.StackManifest.property.construct_path",
            "displayName": "construct_path",
            "id": "cdktf.StackManifest.property.constructPath",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "construct_path: str"
          },
          {
            "fqn": "cdktf.StackManifest.property.dependencies",
            "displayName": "dependencies",
            "id": "cdktf.StackManifest.property.dependencies",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "dependencies: typing.List[str]"
          },
          {
            "fqn": "cdktf.StackManifest.property.name",
            "displayName": "name",
            "id": "cdktf.StackManifest.property.name",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "name: str"
          },
          {
            "fqn": "cdktf.StackManifest.property.synthesized_stack_path",
            "displayName": "synthesized_stack_path",
            "id": "cdktf.StackManifest.property.synthesizedStackPath",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "synthesized_stack_path: str"
          },
          {
            "fqn": "cdktf.StackManifest.property.working_directory",
            "displayName": "working_directory",
            "id": "cdktf.StackManifest.property.workingDirectory",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "working_directory: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.StackManifest(\n  annotations: typing.List[StackAnnotation],\n  construct_path: str,\n  dependencies: typing.List[str],\n  name: str,\n  synthesized_stack_path: str,\n  working_directory: str\n)"
      },
      {
        "fqn": "cdktf.SwiftBackendProps",
        "displayName": "SwiftBackendProps",
        "id": "cdktf.SwiftBackendProps",
        "properties": [
          {
            "fqn": "cdktf.SwiftBackendProps.property.container",
            "displayName": "container",
            "id": "cdktf.SwiftBackendProps.property.container",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "container: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.application_credential_id",
            "displayName": "application_credential_id",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "application_credential_id: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.application_credential_name",
            "displayName": "application_credential_name",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "application_credential_name: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.application_credential_secret",
            "displayName": "application_credential_secret",
            "id": "cdktf.SwiftBackendProps.property.applicationCredentialSecret",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "application_credential_secret: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.archive_container",
            "displayName": "archive_container",
            "id": "cdktf.SwiftBackendProps.property.archiveContainer",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "archive_container: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.auth_url",
            "displayName": "auth_url",
            "id": "cdktf.SwiftBackendProps.property.authUrl",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "auth_url: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.cacert_file",
            "displayName": "cacert_file",
            "id": "cdktf.SwiftBackendProps.property.cacertFile",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "cacert_file: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.cert",
            "displayName": "cert",
            "id": "cdktf.SwiftBackendProps.property.cert",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "cert: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.cloud",
            "displayName": "cloud",
            "id": "cdktf.SwiftBackendProps.property.cloud",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "cloud: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.default_domain",
            "displayName": "default_domain",
            "id": "cdktf.SwiftBackendProps.property.defaultDomain",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "default_domain: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.domain_id",
            "displayName": "domain_id",
            "id": "cdktf.SwiftBackendProps.property.domainId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "domain_id: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.domain_name",
            "displayName": "domain_name",
            "id": "cdktf.SwiftBackendProps.property.domainName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "domain_name: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.expire_after",
            "displayName": "expire_after",
            "id": "cdktf.SwiftBackendProps.property.expireAfter",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "expire_after: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.insecure",
            "displayName": "insecure",
            "id": "cdktf.SwiftBackendProps.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "insecure: bool"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.key",
            "displayName": "key",
            "id": "cdktf.SwiftBackendProps.property.key",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "key: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.password",
            "displayName": "password",
            "id": "cdktf.SwiftBackendProps.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.project_domain_id",
            "displayName": "project_domain_id",
            "id": "cdktf.SwiftBackendProps.property.projectDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "project_domain_id: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.project_domain_name",
            "displayName": "project_domain_name",
            "id": "cdktf.SwiftBackendProps.property.projectDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "project_domain_name: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.region_name",
            "displayName": "region_name",
            "id": "cdktf.SwiftBackendProps.property.regionName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "region_name: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.state_name",
            "displayName": "state_name",
            "id": "cdktf.SwiftBackendProps.property.stateName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "state_name: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.tenant_id",
            "displayName": "tenant_id",
            "id": "cdktf.SwiftBackendProps.property.tenantId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tenant_id: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.tenant_name",
            "displayName": "tenant_name",
            "id": "cdktf.SwiftBackendProps.property.tenantName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tenant_name: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.token",
            "displayName": "token",
            "id": "cdktf.SwiftBackendProps.property.token",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "token: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.user_domain_id",
            "displayName": "user_domain_id",
            "id": "cdktf.SwiftBackendProps.property.userDomainId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user_domain_id: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.user_domain_name",
            "displayName": "user_domain_name",
            "id": "cdktf.SwiftBackendProps.property.userDomainName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user_domain_name: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.user_id",
            "displayName": "user_id",
            "id": "cdktf.SwiftBackendProps.property.userId",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user_id: str"
          },
          {
            "fqn": "cdktf.SwiftBackendProps.property.user_name",
            "displayName": "user_name",
            "id": "cdktf.SwiftBackendProps.property.userName",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "user_name: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.SwiftBackendProps(\n  container: str,\n  application_credential_id: str = None,\n  application_credential_name: str = None,\n  application_credential_secret: str = None,\n  archive_container: str = None,\n  auth_url: str = None,\n  cacert_file: str = None,\n  cert: str = None,\n  cloud: str = None,\n  default_domain: str = None,\n  domain_id: str = None,\n  domain_name: str = None,\n  expire_after: str = None,\n  insecure: bool = None,\n  key: str = None,\n  password: str = None,\n  project_domain_id: str = None,\n  project_domain_name: str = None,\n  region_name: str = None,\n  state_name: str = None,\n  tenant_id: str = None,\n  tenant_name: str = None,\n  token: str = None,\n  user_domain_id: str = None,\n  user_domain_name: str = None,\n  user_id: str = None,\n  user_name: str = None\n)"
      },
      {
        "fqn": "cdktf.TerraformAssetConfig",
        "displayName": "TerraformAssetConfig",
        "id": "cdktf.TerraformAssetConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformAssetConfig.property.path",
            "displayName": "path",
            "id": "cdktf.TerraformAssetConfig.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.TerraformAssetConfig.property.asset_hash",
            "displayName": "asset_hash",
            "id": "cdktf.TerraformAssetConfig.property.assetHash",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "asset_hash: str"
          },
          {
            "fqn": "cdktf.TerraformAssetConfig.property.type",
            "displayName": "type",
            "id": "cdktf.TerraformAssetConfig.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.AssetType",
                  "displayName": "AssetType",
                  "fqn": "cdktf.AssetType",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "type: AssetType"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformAssetConfig(\n  path: str,\n  asset_hash: str = None,\n  type: AssetType = None\n)"
      },
      {
        "fqn": "cdktf.testingMatchers.TerraformConstructor",
        "displayName": "TerraformConstructor",
        "id": "cdktf.testingMatchers.TerraformConstructor",
        "properties": [
          {
            "fqn": "cdktf.testingMatchers.TerraformConstructor.property.tf_resource_type",
            "displayName": "tf_resource_type",
            "id": "cdktf.testingMatchers.TerraformConstructor.property.tfResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "tf_resource_type: str"
          }
        ],
        "docs": {},
        "usage": "from cdktf import testing_matchers\n\ntestingMatchers.TerraformConstructor(\n  tf_resource_type: str\n)"
      },
      {
        "fqn": "cdktf.TerraformElementMetadata",
        "displayName": "TerraformElementMetadata",
        "id": "cdktf.TerraformElementMetadata",
        "properties": [
          {
            "fqn": "cdktf.TerraformElementMetadata.property.path",
            "displayName": "path",
            "id": "cdktf.TerraformElementMetadata.property.path",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "path: str"
          },
          {
            "fqn": "cdktf.TerraformElementMetadata.property.stack_trace",
            "displayName": "stack_trace",
            "id": "cdktf.TerraformElementMetadata.property.stackTrace",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "stack_trace: typing.List[str]"
          },
          {
            "fqn": "cdktf.TerraformElementMetadata.property.unique_id",
            "displayName": "unique_id",
            "id": "cdktf.TerraformElementMetadata.property.uniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "unique_id: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformElementMetadata(\n  path: str,\n  stack_trace: typing.List[str],\n  unique_id: str\n)"
      },
      {
        "fqn": "cdktf.TerraformHclModuleOptions",
        "displayName": "TerraformHclModuleOptions",
        "id": "cdktf.TerraformHclModuleOptions",
        "properties": [
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformHclModuleOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[ITerraformDependable]"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformHclModuleOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformHclModuleOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]]"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.skip_asset_creation_from_local_modules",
            "displayName": "skip_asset_creation_from_local_modules",
            "id": "cdktf.TerraformHclModuleOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "skip_asset_creation_from_local_modules: bool"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.source",
            "displayName": "source",
            "id": "cdktf.TerraformHclModuleOptions.property.source",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "source: str"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformHclModuleOptions.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "version: str"
          },
          {
            "fqn": "cdktf.TerraformHclModuleOptions.property.variables",
            "displayName": "variables",
            "id": "cdktf.TerraformHclModuleOptions.property.variables",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "typing.Any"
                }
              ]
            },
            "docs": {},
            "usage": "variables: typing.Mapping[typing.Any]"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformHclModuleOptions(\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]] = None,\n  skip_asset_creation_from_local_modules: bool = None,\n  source: str,\n  version: str = None,\n  variables: typing.Mapping[typing.Any] = None\n)"
      },
      {
        "fqn": "cdktf.TerraformMetaArguments",
        "displayName": "TerraformMetaArguments",
        "id": "cdktf.TerraformMetaArguments",
        "properties": [
          {
            "fqn": "cdktf.TerraformMetaArguments.property.connection",
            "displayName": "connection",
            "id": "cdktf.TerraformMetaArguments.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[%, %]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection]"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.count",
            "displayName": "count",
            "id": "cdktf.TerraformMetaArguments.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {},
            "usage": "count: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformMetaArguments.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[ITerraformDependable]"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformMetaArguments.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.TerraformMetaArguments.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "lifecycle: TerraformResourceLifecycle"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformMetaArguments.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "provider: TerraformProvider"
          },
          {
            "fqn": "cdktf.TerraformMetaArguments.property.provisioners",
            "displayName": "provisioners",
            "id": "cdktf.TerraformMetaArguments.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "provisioners: typing.List[typing.Union[FileProvisioner, LocalExecProvisioner, RemoteExecProvisioner]]"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformMetaArguments(\n  connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection] = None,\n  count: typing.Union[int, float] = None,\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  lifecycle: TerraformResourceLifecycle = None,\n  provider: TerraformProvider = None,\n  provisioners: typing.List[typing.Union[FileProvisioner, LocalExecProvisioner, RemoteExecProvisioner]] = None\n)"
      },
      {
        "fqn": "cdktf.TerraformModuleOptions",
        "displayName": "TerraformModuleOptions",
        "id": "cdktf.TerraformModuleOptions",
        "properties": [
          {
            "fqn": "cdktf.TerraformModuleOptions.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformModuleOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[ITerraformDependable]"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformModuleOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformModuleOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]]"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.skip_asset_creation_from_local_modules",
            "displayName": "skip_asset_creation_from_local_modules",
            "id": "cdktf.TerraformModuleOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "skip_asset_creation_from_local_modules: bool"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.source",
            "displayName": "source",
            "id": "cdktf.TerraformModuleOptions.property.source",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "source: str"
          },
          {
            "fqn": "cdktf.TerraformModuleOptions.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformModuleOptions.property.version",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "version: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformModuleOptions(\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]] = None,\n  skip_asset_creation_from_local_modules: bool = None,\n  source: str,\n  version: str = None\n)"
      },
      {
        "fqn": "cdktf.TerraformModuleProvider",
        "displayName": "TerraformModuleProvider",
        "id": "cdktf.TerraformModuleProvider",
        "properties": [
          {
            "fqn": "cdktf.TerraformModuleProvider.property.module_alias",
            "displayName": "module_alias",
            "id": "cdktf.TerraformModuleProvider.property.moduleAlias",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "module_alias: str"
          },
          {
            "fqn": "cdktf.TerraformModuleProvider.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformModuleProvider.property.provider",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "provider: TerraformProvider"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformModuleProvider(\n  module_alias: str,\n  provider: TerraformProvider\n)"
      },
      {
        "fqn": "cdktf.TerraformModuleUserOptions",
        "displayName": "TerraformModuleUserOptions",
        "id": "cdktf.TerraformModuleUserOptions",
        "properties": [
          {
            "fqn": "cdktf.TerraformModuleUserOptions.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformModuleUserOptions.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[ITerraformDependable]"
          },
          {
            "fqn": "cdktf.TerraformModuleUserOptions.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformModuleUserOptions.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.TerraformModuleUserOptions.property.providers",
            "displayName": "providers",
            "id": "cdktf.TerraformModuleUserOptions.property.providers",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "typing.Union[%, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformProvider",
                          "displayName": "TerraformProvider",
                          "fqn": "cdktf.TerraformProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.TerraformModuleProvider",
                          "displayName": "TerraformModuleProvider",
                          "fqn": "cdktf.TerraformModuleProvider",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]]"
          },
          {
            "fqn": "cdktf.TerraformModuleUserOptions.property.skip_asset_creation_from_local_modules",
            "displayName": "skip_asset_creation_from_local_modules",
            "id": "cdktf.TerraformModuleUserOptions.property.skipAssetCreationFromLocalModules",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "skip_asset_creation_from_local_modules: bool"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformModuleUserOptions(\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  providers: typing.List[typing.Union[TerraformProvider, TerraformModuleProvider]] = None,\n  skip_asset_creation_from_local_modules: bool = None\n)"
      },
      {
        "fqn": "cdktf.TerraformOutputConfig",
        "displayName": "TerraformOutputConfig",
        "id": "cdktf.TerraformOutputConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformOutputConfig.property.value",
            "displayName": "value",
            "id": "cdktf.TerraformOutputConfig.property.value",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {},
            "usage": "value: typing.Any"
          },
          {
            "fqn": "cdktf.TerraformOutputConfig.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformOutputConfig.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[ITerraformDependable]"
          },
          {
            "fqn": "cdktf.TerraformOutputConfig.property.description",
            "displayName": "description",
            "id": "cdktf.TerraformOutputConfig.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "description: str"
          },
          {
            "fqn": "cdktf.TerraformOutputConfig.property.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.TerraformOutputConfig.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "sensitive: bool"
          },
          {
            "fqn": "cdktf.TerraformOutputConfig.property.static_id",
            "displayName": "static_id",
            "id": "cdktf.TerraformOutputConfig.property.staticId",
            "optional": true,
            "default": "false",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "If set to true the synthesized Terraform Output will be named after the `id` passed to the constructor instead of the default (TerraformOutput.friendlyUniqueId)."
            },
            "usage": "static_id: bool"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformOutputConfig(\n  value: typing.Any,\n  depends_on: typing.List[ITerraformDependable] = None,\n  description: str = None,\n  sensitive: bool = None,\n  static_id: bool = None\n)"
      },
      {
        "fqn": "cdktf.TerraformProviderConfig",
        "displayName": "TerraformProviderConfig",
        "id": "cdktf.TerraformProviderConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformProviderConfig.property.terraform_resource_type",
            "displayName": "terraform_resource_type",
            "id": "cdktf.TerraformProviderConfig.property.terraformResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "terraform_resource_type: str"
          },
          {
            "fqn": "cdktf.TerraformProviderConfig.property.terraform_generator_metadata",
            "displayName": "terraform_generator_metadata",
            "id": "cdktf.TerraformProviderConfig.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "terraform_generator_metadata: TerraformProviderGeneratorMetadata"
          },
          {
            "fqn": "cdktf.TerraformProviderConfig.property.terraform_provider_source",
            "displayName": "terraform_provider_source",
            "id": "cdktf.TerraformProviderConfig.property.terraformProviderSource",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "terraform_provider_source: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformProviderConfig(\n  terraform_resource_type: str,\n  terraform_generator_metadata: TerraformProviderGeneratorMetadata = None,\n  terraform_provider_source: str = None\n)"
      },
      {
        "fqn": "cdktf.TerraformProviderGeneratorMetadata",
        "displayName": "TerraformProviderGeneratorMetadata",
        "id": "cdktf.TerraformProviderGeneratorMetadata",
        "properties": [
          {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata.property.provider_name",
            "displayName": "provider_name",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "provider_name: str"
          },
          {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata.property.provider_version",
            "displayName": "provider_version",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerVersion",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "provider_version: str"
          },
          {
            "fqn": "cdktf.TerraformProviderGeneratorMetadata.property.provider_version_constraint",
            "displayName": "provider_version_constraint",
            "id": "cdktf.TerraformProviderGeneratorMetadata.property.providerVersionConstraint",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "provider_version_constraint: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformProviderGeneratorMetadata(\n  provider_name: str,\n  provider_version: str = None,\n  provider_version_constraint: str = None\n)"
      },
      {
        "fqn": "cdktf.TerraformResourceConfig",
        "displayName": "TerraformResourceConfig",
        "id": "cdktf.TerraformResourceConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformResourceConfig.property.connection",
            "displayName": "connection",
            "id": "cdktf.TerraformResourceConfig.property.connection",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[%, %]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.SSHProvisionerConnection",
                      "displayName": "SSHProvisionerConnection",
                      "fqn": "cdktf.SSHProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.WinrmProvisionerConnection",
                      "displayName": "WinrmProvisionerConnection",
                      "fqn": "cdktf.WinrmProvisionerConnection",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection]"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.count",
            "displayName": "count",
            "id": "cdktf.TerraformResourceConfig.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {},
            "usage": "count: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.TerraformResourceConfig.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ITerraformDependable",
                      "displayName": "ITerraformDependable",
                      "fqn": "cdktf.ITerraformDependable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[ITerraformDependable]"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.TerraformResourceConfig.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.TerraformResourceConfig.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "lifecycle: TerraformResourceLifecycle"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.provider",
            "displayName": "provider",
            "id": "cdktf.TerraformResourceConfig.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "provider: TerraformProvider"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.provisioners",
            "displayName": "provisioners",
            "id": "cdktf.TerraformResourceConfig.property.provisioners",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "typing.Union[%, %, %]",
                  "types": [
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.FileProvisioner",
                          "displayName": "FileProvisioner",
                          "fqn": "cdktf.FileProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.LocalExecProvisioner",
                          "displayName": "LocalExecProvisioner",
                          "fqn": "cdktf.LocalExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    },
                    {
                      "formattingPattern": "%",
                      "types": [
                        {
                          "id": "cdktf.RemoteExecProvisioner",
                          "displayName": "RemoteExecProvisioner",
                          "fqn": "cdktf.RemoteExecProvisioner",
                          "packageName": "cdktf",
                          "packageVersion": "0.0.0"
                        }
                      ]
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "provisioners: typing.List[typing.Union[FileProvisioner, LocalExecProvisioner, RemoteExecProvisioner]]"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.terraform_resource_type",
            "displayName": "terraform_resource_type",
            "id": "cdktf.TerraformResourceConfig.property.terraformResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "terraform_resource_type: str"
          },
          {
            "fqn": "cdktf.TerraformResourceConfig.property.terraform_generator_metadata",
            "displayName": "terraform_generator_metadata",
            "id": "cdktf.TerraformResourceConfig.property.terraformGeneratorMetadata",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProviderGeneratorMetadata",
                  "displayName": "TerraformProviderGeneratorMetadata",
                  "fqn": "cdktf.TerraformProviderGeneratorMetadata",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "terraform_generator_metadata: TerraformProviderGeneratorMetadata"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformResourceConfig(\n  connection: typing.Union[SSHProvisionerConnection, WinrmProvisionerConnection] = None,\n  count: typing.Union[int, float] = None,\n  depends_on: typing.List[ITerraformDependable] = None,\n  for_each: ITerraformIterator = None,\n  lifecycle: TerraformResourceLifecycle = None,\n  provider: TerraformProvider = None,\n  provisioners: typing.List[typing.Union[FileProvisioner, LocalExecProvisioner, RemoteExecProvisioner]] = None,\n  terraform_resource_type: str,\n  terraform_generator_metadata: TerraformProviderGeneratorMetadata = None\n)"
      },
      {
        "fqn": "cdktf.TerraformResourceLifecycle",
        "displayName": "TerraformResourceLifecycle",
        "id": "cdktf.TerraformResourceLifecycle",
        "properties": [
          {
            "fqn": "cdktf.TerraformResourceLifecycle.property.create_before_destroy",
            "displayName": "create_before_destroy",
            "id": "cdktf.TerraformResourceLifecycle.property.createBeforeDestroy",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "create_before_destroy: bool"
          },
          {
            "fqn": "cdktf.TerraformResourceLifecycle.property.ignore_changes",
            "displayName": "ignore_changes",
            "id": "cdktf.TerraformResourceLifecycle.property.ignoreChanges",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[%, %]",
              "types": [
                {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    }
                  ]
                },
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "ignore_changes: typing.Union[typing.List[str], str]"
          },
          {
            "fqn": "cdktf.TerraformResourceLifecycle.property.prevent_destroy",
            "displayName": "prevent_destroy",
            "id": "cdktf.TerraformResourceLifecycle.property.preventDestroy",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "prevent_destroy: bool"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformResourceLifecycle(\n  create_before_destroy: bool = None,\n  ignore_changes: typing.Union[typing.List[str], str] = None,\n  prevent_destroy: bool = None\n)"
      },
      {
        "fqn": "cdktf.TerraformStackMetadata",
        "displayName": "TerraformStackMetadata",
        "id": "cdktf.TerraformStackMetadata",
        "properties": [
          {
            "fqn": "cdktf.TerraformStackMetadata.property.backend",
            "displayName": "backend",
            "id": "cdktf.TerraformStackMetadata.property.backend",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "backend: str"
          },
          {
            "fqn": "cdktf.TerraformStackMetadata.property.stack_name",
            "displayName": "stack_name",
            "id": "cdktf.TerraformStackMetadata.property.stackName",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "stack_name: str"
          },
          {
            "fqn": "cdktf.TerraformStackMetadata.property.version",
            "displayName": "version",
            "id": "cdktf.TerraformStackMetadata.property.version",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "version: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformStackMetadata(\n  backend: str,\n  stack_name: str,\n  version: str\n)"
      },
      {
        "fqn": "cdktf.TerraformVariableConfig",
        "displayName": "TerraformVariableConfig",
        "id": "cdktf.TerraformVariableConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformVariableConfig.property.default",
            "displayName": "default",
            "id": "cdktf.TerraformVariableConfig.property.default",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {},
            "usage": "default: typing.Any"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.description",
            "displayName": "description",
            "id": "cdktf.TerraformVariableConfig.property.description",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "description: str"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.nullable",
            "displayName": "nullable",
            "id": "cdktf.TerraformVariableConfig.property.nullable",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "nullable: bool"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.sensitive",
            "displayName": "sensitive",
            "id": "cdktf.TerraformVariableConfig.property.sensitive",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "sensitive: bool"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.type",
            "displayName": "type",
            "id": "cdktf.TerraformVariableConfig.property.type",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The type argument in a variable block allows you to restrict the type of value that will be accepted as the value for a variable.",
              "remarks": "If no type constraint is set then a value of any type is accepted.\n\nWhile type constraints are optional, we recommend specifying them; they serve as easy reminders for users of the module, and allow Terraform to return a helpful error message if the wrong type is used.\n\nType constraints are created from a mixture of type keywords and type constructors. The supported type keywords are:\n\n* string\n* number\n* bool\n\nThe type constructors allow you to specify complex types such as collections:\n\n* list(<TYPE>)\n* set(<TYPE>)\n* map(<TYPE>)\n* object({<ATTR NAME> = <TYPE>, ... })\n* tuple([<TYPE>, ...])\n\nThe keyword any may be used to indicate that any type is acceptable. For more information on the meaning and behavior of these different types, as well as detailed information about automatic conversion of complex types, see {@link https://www.terraform.io/docs/configuration/types.html|Type Constraints}.\n\nIf both the type and default arguments are specified, the given default value must be convertible to the specified type."
            },
            "usage": "type: str"
          },
          {
            "fqn": "cdktf.TerraformVariableConfig.property.validation",
            "displayName": "validation",
            "id": "cdktf.TerraformVariableConfig.property.validation",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TerraformVariableValidationConfig",
                      "displayName": "TerraformVariableValidationConfig",
                      "fqn": "cdktf.TerraformVariableValidationConfig",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {
              "summary": "Specify arbitrary custom validation rules for a particular variable using a validation block nested within the corresponding variable block."
            },
            "usage": "validation: typing.List[TerraformVariableValidationConfig]"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformVariableConfig(\n  default: typing.Any = None,\n  description: str = None,\n  nullable: bool = None,\n  sensitive: bool = None,\n  type: str = None,\n  validation: typing.List[TerraformVariableValidationConfig] = None\n)"
      },
      {
        "fqn": "cdktf.TerraformVariableValidationConfig",
        "displayName": "TerraformVariableValidationConfig",
        "id": "cdktf.TerraformVariableValidationConfig",
        "properties": [
          {
            "fqn": "cdktf.TerraformVariableValidationConfig.property.condition",
            "displayName": "condition",
            "id": "cdktf.TerraformVariableValidationConfig.property.condition",
            "type": {
              "formattingPattern": "typing.Any"
            },
            "docs": {},
            "usage": "condition: typing.Any"
          },
          {
            "fqn": "cdktf.TerraformVariableValidationConfig.property.error_message",
            "displayName": "error_message",
            "id": "cdktf.TerraformVariableValidationConfig.property.errorMessage",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "error_message: str"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TerraformVariableValidationConfig(\n  condition: typing.Any,\n  error_message: str\n)"
      },
      {
        "fqn": "cdktf.TestingAppOptions",
        "displayName": "TestingAppOptions",
        "id": "cdktf.TestingAppOptions",
        "properties": [
          {
            "fqn": "cdktf.TestingAppOptions.property.enable_future_flags",
            "displayName": "enable_future_flags",
            "id": "cdktf.TestingAppOptions.property.enableFutureFlags",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "enable_future_flags: bool"
          },
          {
            "fqn": "cdktf.TestingAppOptions.property.fake_cdktf_json_path",
            "displayName": "fake_cdktf_json_path",
            "id": "cdktf.TestingAppOptions.property.fakeCdktfJsonPath",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "fake_cdktf_json_path: bool"
          },
          {
            "fqn": "cdktf.TestingAppOptions.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.TestingAppOptions.property.outdir",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "outdir: str"
          },
          {
            "fqn": "cdktf.TestingAppOptions.property.stack_traces",
            "displayName": "stack_traces",
            "id": "cdktf.TestingAppOptions.property.stackTraces",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "stack_traces: bool"
          },
          {
            "fqn": "cdktf.TestingAppOptions.property.stub_version",
            "displayName": "stub_version",
            "id": "cdktf.TestingAppOptions.property.stubVersion",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "stub_version: bool"
          }
        ],
        "docs": {},
        "usage": "import cdktf\n\ncdktf.TestingAppOptions(\n  enable_future_flags: bool = None,\n  fake_cdktf_json_path: bool = None,\n  outdir: str = None,\n  stack_traces: bool = None,\n  stub_version: bool = None\n)"
      },
      {
        "fqn": "cdktf.WinrmProvisionerConnection",
        "displayName": "WinrmProvisionerConnection",
        "id": "cdktf.WinrmProvisionerConnection",
        "properties": [
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.host",
            "displayName": "host",
            "id": "cdktf.WinrmProvisionerConnection.property.host",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The address of the resource to connect to."
            },
            "usage": "host: str"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.type",
            "displayName": "type",
            "id": "cdktf.WinrmProvisionerConnection.property.type",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The connection type.",
              "remarks": "Valid values are \"ssh\" and \"winrm\".\nProvisioners typically assume that the remote system runs Microsoft Windows when using WinRM.\nBehaviors based on the SSH target_platform will force Windows-specific behavior for WinRM, unless otherwise specified."
            },
            "usage": "type: str"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.cacert",
            "displayName": "cacert",
            "id": "cdktf.WinrmProvisionerConnection.property.cacert",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The CA certificate to validate against."
            },
            "usage": "cacert: str"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.https",
            "displayName": "https",
            "id": "cdktf.WinrmProvisionerConnection.property.https",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Set to true to connect using HTTPS instead of HTTP."
            },
            "usage": "https: bool"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.insecure",
            "displayName": "insecure",
            "id": "cdktf.WinrmProvisionerConnection.property.insecure",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Set to true to skip validating the HTTPS certificate chain."
            },
            "usage": "insecure: bool"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.password",
            "displayName": "password",
            "id": "cdktf.WinrmProvisionerConnection.property.password",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The password to use for the connection."
            },
            "usage": "password: str"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.port",
            "displayName": "port",
            "id": "cdktf.WinrmProvisionerConnection.property.port",
            "optional": true,
            "default": "22",
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {
              "summary": "The port to connect to."
            },
            "usage": "port: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.script_path",
            "displayName": "script_path",
            "id": "cdktf.WinrmProvisionerConnection.property.scriptPath",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The path used to copy scripts meant for remote execution.",
              "remarks": "Refer to {@link https://www.terraform.io/language/resources/provisioners/connection#how-provisioners-execute-remote-scripts How Provisioners Execute Remote Scripts below for more details}"
            },
            "usage": "script_path: str"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.timeout",
            "displayName": "timeout",
            "id": "cdktf.WinrmProvisionerConnection.property.timeout",
            "optional": true,
            "default": "5m",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The timeout to wait for the connection to become available.",
              "remarks": "Should be provided as a string (e.g., \"30s\" or \"5m\".)"
            },
            "usage": "timeout: str"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.use_ntlm",
            "displayName": "use_ntlm",
            "id": "cdktf.WinrmProvisionerConnection.property.useNtlm",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "Set to true to use NTLM authentication rather than default (basic authentication), removing the requirement for basic authentication to be enabled within the target guest.",
              "remarks": "Refer to Authentication for Remote Connections in the Windows App Development documentation for more details."
            },
            "usage": "use_ntlm: bool"
          },
          {
            "fqn": "cdktf.WinrmProvisionerConnection.property.user",
            "displayName": "user",
            "id": "cdktf.WinrmProvisionerConnection.property.user",
            "optional": true,
            "default": "root",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The user to use for the connection."
            },
            "usage": "user: str"
          }
        ],
        "docs": {
          "summary": "Most provisioners require access to the remote resource via SSH or WinRM and expect a nested connection block with details about how to connect.",
          "remarks": "See {@link https://www.terraform.io/language/resources/provisioners/connection connection}"
        },
        "usage": "import cdktf\n\ncdktf.WinrmProvisionerConnection(\n  host: str,\n  type: str,\n  cacert: str = None,\n  https: bool = None,\n  insecure: bool = None,\n  password: str = None,\n  port: typing.Union[int, float] = None,\n  script_path: str = None,\n  timeout: str = None,\n  use_ntlm: bool = None,\n  user: str = None\n)"
      }
    ],
    "interfaces": [
      {
        "fqn": "cdktf.IAnyProducer",
        "displayName": "IAnyProducer",
        "id": "cdktf.IAnyProducer",
        "implementations": [
          {
            "fqn": "cdktf.IAnyProducer",
            "displayName": "IAnyProducer",
            "id": "cdktf.IAnyProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IAnyProducer.produce",
            "displayName": "produce",
            "id": "cdktf.IAnyProducer.produce",
            "parameters": [
              {
                "fqn": "cdktf.IAnyProducer.produce.parameter.context",
                "displayName": "context",
                "id": "cdktf.IAnyProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the value."
            },
            "usage": "def produce(\n  context: IResolveContext\n) -> typing.Any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy untyped value producers."
        }
      },
      {
        "fqn": "cdktf.IAspect",
        "displayName": "IAspect",
        "id": "cdktf.IAspect",
        "implementations": [
          {
            "fqn": "cdktf.IAspect",
            "displayName": "IAspect",
            "id": "cdktf.IAspect",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IAspect.visit",
            "displayName": "visit",
            "id": "cdktf.IAspect.visit",
            "parameters": [
              {
                "fqn": "cdktf.IAspect.visit.parameter.node",
                "displayName": "node",
                "id": "cdktf.IAspect.visit.parameter.node",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "constructs.IConstruct",
                      "displayName": "IConstruct",
                      "fqn": "constructs.IConstruct",
                      "packageName": "constructs",
                      "packageVersion": "10.1.45"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "All aspects can visit an IConstruct."
            },
            "usage": "def visit(\n  node: IConstruct\n) -> None"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Represents an Aspect."
        }
      },
      {
        "fqn": "cdktf.IFragmentConcatenator",
        "displayName": "IFragmentConcatenator",
        "id": "cdktf.IFragmentConcatenator",
        "implementations": [
          {
            "fqn": "cdktf.StringConcat",
            "displayName": "StringConcat",
            "id": "cdktf.StringConcat",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IFragmentConcatenator",
            "displayName": "IFragmentConcatenator",
            "id": "cdktf.IFragmentConcatenator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IFragmentConcatenator.join",
            "displayName": "join",
            "id": "cdktf.IFragmentConcatenator.join",
            "parameters": [
              {
                "fqn": "cdktf.IFragmentConcatenator.join.parameter.left",
                "displayName": "left",
                "id": "cdktf.IFragmentConcatenator.join.parameter.left",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.IFragmentConcatenator.join.parameter.right",
                "displayName": "right",
                "id": "cdktf.IFragmentConcatenator.join.parameter.right",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Join the fragment on the left and on the right."
            },
            "usage": "def join(\n  left: typing.Any,\n  right: typing.Any\n) -> typing.Any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Function used to concatenate symbols in the target document language.",
          "remarks": "Interface so it could potentially be exposed over jsii."
        }
      },
      {
        "fqn": "cdktf.IInterpolatingParent",
        "displayName": "IInterpolatingParent",
        "id": "cdktf.IInterpolatingParent",
        "implementations": [
          {
            "fqn": "cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IInterpolatingParent",
            "displayName": "IInterpolatingParent",
            "id": "cdktf.IInterpolatingParent",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IInterpolatingParent.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.IInterpolatingParent.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.IInterpolatingParent.interpolation_for_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.IInterpolatingParent.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  terraform_attribute: str\n) -> IResolvable"
          }
        ],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.IListProducer",
        "displayName": "IListProducer",
        "id": "cdktf.IListProducer",
        "implementations": [
          {
            "fqn": "cdktf.IListProducer",
            "displayName": "IListProducer",
            "id": "cdktf.IListProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IListProducer.produce",
            "displayName": "produce",
            "id": "cdktf.IListProducer.produce",
            "parameters": [
              {
                "fqn": "cdktf.IListProducer.produce.parameter.context",
                "displayName": "context",
                "id": "cdktf.IListProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the list value."
            },
            "usage": "def produce(\n  context: IResolveContext\n) -> typing.List[str]"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy list producers."
        }
      },
      {
        "fqn": "cdktf.IManifest",
        "displayName": "IManifest",
        "id": "cdktf.IManifest",
        "implementations": [
          {
            "fqn": "cdktf.Manifest",
            "displayName": "Manifest",
            "id": "cdktf.Manifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IManifest",
            "displayName": "IManifest",
            "id": "cdktf.IManifest",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.IManifest.property.stacks",
            "displayName": "stacks",
            "id": "cdktf.IManifest.property.stacks",
            "type": {
              "formattingPattern": "typing.Mapping[%]",
              "types": [
                {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.StackManifest",
                      "displayName": "StackManifest",
                      "fqn": "cdktf.StackManifest",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                }
              ]
            },
            "docs": {},
            "usage": "stacks: typing.Mapping[StackManifest]"
          },
          {
            "fqn": "cdktf.IManifest.property.version",
            "displayName": "version",
            "id": "cdktf.IManifest.property.version",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "version: str"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.INumberProducer",
        "displayName": "INumberProducer",
        "id": "cdktf.INumberProducer",
        "implementations": [
          {
            "fqn": "cdktf.INumberProducer",
            "displayName": "INumberProducer",
            "id": "cdktf.INumberProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.INumberProducer.produce",
            "displayName": "produce",
            "id": "cdktf.INumberProducer.produce",
            "parameters": [
              {
                "fqn": "cdktf.INumberProducer.produce.parameter.context",
                "displayName": "context",
                "id": "cdktf.INumberProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the number value."
            },
            "usage": "def produce(\n  context: IResolveContext\n) -> typing.Union[int, float]"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy number producers."
        }
      },
      {
        "fqn": "cdktf.IPostProcessor",
        "displayName": "IPostProcessor",
        "id": "cdktf.IPostProcessor",
        "implementations": [
          {
            "fqn": "cdktf.IPostProcessor",
            "displayName": "IPostProcessor",
            "id": "cdktf.IPostProcessor",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IPostProcessor.post_process",
            "displayName": "post_process",
            "id": "cdktf.IPostProcessor.postProcess",
            "parameters": [
              {
                "fqn": "cdktf.IPostProcessor.post_process.parameter.input",
                "displayName": "input",
                "id": "cdktf.IPostProcessor.postProcess.parameter.input",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.IPostProcessor.post_process.parameter.context",
                "displayName": "context",
                "id": "cdktf.IPostProcessor.postProcess.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Process the completely resolved value, after full recursion/resolution has happened."
            },
            "usage": "def post_process(\n  input: typing.Any,\n  context: IResolveContext\n) -> typing.Any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "A Token that can post-process the complete resolved value, after resolve() has recursed over it."
        }
      },
      {
        "fqn": "cdktf.IRemoteWorkspace",
        "displayName": "IRemoteWorkspace",
        "id": "cdktf.IRemoteWorkspace",
        "implementations": [
          {
            "fqn": "cdktf.NamedRemoteWorkspace",
            "displayName": "NamedRemoteWorkspace",
            "id": "cdktf.NamedRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.PrefixedRemoteWorkspaces",
            "displayName": "PrefixedRemoteWorkspaces",
            "id": "cdktf.PrefixedRemoteWorkspaces",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IRemoteWorkspace",
            "displayName": "IRemoteWorkspace",
            "id": "cdktf.IRemoteWorkspace",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.IResolvable",
        "displayName": "IResolvable",
        "id": "cdktf.IResolvable",
        "implementations": [
          {
            "fqn": "cdktf.AnyMap",
            "displayName": "AnyMap",
            "id": "cdktf.AnyMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMap",
            "displayName": "BooleanMap",
            "id": "cdktf.BooleanMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexList",
            "displayName": "ComplexList",
            "id": "cdktf.ComplexList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexMap",
            "displayName": "ComplexMap",
            "id": "cdktf.ComplexMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.LazyBase",
            "displayName": "LazyBase",
            "id": "cdktf.LazyBase",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMap",
            "displayName": "NumberMap",
            "id": "cdktf.NumberMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMap",
            "displayName": "StringMap",
            "id": "cdktf.StringMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResolvable",
            "displayName": "IResolvable",
            "id": "cdktf.IResolvable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IResolvable.resolve",
            "displayName": "resolve",
            "id": "cdktf.IResolvable.resolve",
            "parameters": [
              {
                "fqn": "cdktf.IResolvable.resolve.parameter.context",
                "displayName": "context",
                "id": "cdktf.IResolvable.resolve.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the Token's value at resolution time."
            },
            "usage": "def resolve(\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.IResolvable.to_string",
            "displayName": "to_string",
            "id": "cdktf.IResolvable.toString",
            "parameters": [],
            "docs": {
              "summary": "Return a string representation of this resolvable object.",
              "remarks": "Returns a reversible string representation."
            },
            "usage": "def to_string() -> str"
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.IResolvable.property.creation_stack",
            "displayName": "creation_stack",
            "id": "cdktf.IResolvable.property.creationStack",
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {
              "summary": "The creation stack of this resolvable which will be appended to errors thrown during resolution.",
              "remarks": "If this returns an empty array the stack will not be attached."
            },
            "usage": "creation_stack: typing.List[str]"
          }
        ],
        "docs": {
          "summary": "Interface for values that can be resolvable later.",
          "remarks": "Tokens are special objects that participate in synthesis."
        }
      },
      {
        "fqn": "cdktf.IResolveContext",
        "displayName": "IResolveContext",
        "id": "cdktf.IResolveContext",
        "implementations": [
          {
            "fqn": "cdktf.IResolveContext",
            "displayName": "IResolveContext",
            "id": "cdktf.IResolveContext",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IResolveContext.register_post_processor",
            "displayName": "register_post_processor",
            "id": "cdktf.IResolveContext.registerPostProcessor",
            "parameters": [
              {
                "fqn": "cdktf.IResolveContext.register_post_processor.parameter.post_processor",
                "displayName": "post_processor",
                "id": "cdktf.IResolveContext.registerPostProcessor.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Use this postprocessor after the entire token structure has been resolved."
            },
            "usage": "def register_post_processor(\n  post_processor: IPostProcessor\n) -> None"
          },
          {
            "fqn": "cdktf.IResolveContext.resolve",
            "displayName": "resolve",
            "id": "cdktf.IResolveContext.resolve",
            "parameters": [
              {
                "fqn": "cdktf.IResolveContext.resolve.parameter.x",
                "displayName": "x",
                "id": "cdktf.IResolveContext.resolve.parameter.x",
                "type": {
                  "formattingPattern": "typing.Any"
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve an inner object."
            },
            "usage": "def resolve(\n  x: typing.Any\n) -> typing.Any"
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.IResolveContext.property.preparing",
            "displayName": "preparing",
            "id": "cdktf.IResolveContext.property.preparing",
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "True when we are still preparing, false if we're rendering the final output."
            },
            "usage": "preparing: bool"
          },
          {
            "fqn": "cdktf.IResolveContext.property.scope",
            "displayName": "scope",
            "id": "cdktf.IResolveContext.property.scope",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.IConstruct",
                  "displayName": "IConstruct",
                  "fqn": "constructs.IConstruct",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The scope from which resolution has been initiated."
            },
            "usage": "scope: IConstruct"
          },
          {
            "fqn": "cdktf.IResolveContext.property.iterator_context",
            "displayName": "iterator_context",
            "id": "cdktf.IResolveContext.property.iteratorContext",
            "optional": true,
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "TerraformIterators can be passed for block attributes and normal list attributes both require different handling when the iterable variable is accessed e.g. a dynamic block needs each.key while a for expression just needs key."
            },
            "usage": "iterator_context: str"
          },
          {
            "fqn": "cdktf.IResolveContext.property.suppress_braces",
            "displayName": "suppress_braces",
            "id": "cdktf.IResolveContext.property.suppressBraces",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {
              "summary": "True when ${} should be ommitted (because already inside them), false otherwise."
            },
            "usage": "suppress_braces: bool"
          }
        ],
        "docs": {
          "summary": "Current resolution context for tokens."
        }
      },
      {
        "fqn": "cdktf.IResource",
        "displayName": "IResource",
        "id": "cdktf.IResource",
        "implementations": [
          {
            "fqn": "cdktf.Resource",
            "displayName": "Resource",
            "id": "cdktf.Resource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.IResource",
            "displayName": "IResource",
            "id": "cdktf.IResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [
          {
            "fqn": "constructs.IConstruct",
            "displayName": "IConstruct",
            "id": "constructs.IConstruct",
            "packageName": "constructs",
            "packageVersion": "10.1.45"
          }
        ],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.IResource.property.node",
            "displayName": "node",
            "id": "cdktf.IResource.property.node",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "constructs.Node",
                  "displayName": "Node",
                  "fqn": "constructs.Node",
                  "packageName": "constructs",
                  "packageVersion": "10.1.45"
                }
              ]
            },
            "docs": {
              "summary": "The tree node."
            },
            "usage": "node: Node"
          },
          {
            "fqn": "cdktf.IResource.property.stack",
            "displayName": "stack",
            "id": "cdktf.IResource.property.stack",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformStack",
                  "displayName": "TerraformStack",
                  "fqn": "cdktf.TerraformStack",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {
              "summary": "The stack in which this resource is defined."
            },
            "usage": "stack: TerraformStack"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.IResourceConstructor",
        "displayName": "IResourceConstructor",
        "id": "cdktf.IResourceConstructor",
        "implementations": [
          {
            "fqn": "cdktf.IResourceConstructor",
            "displayName": "IResourceConstructor",
            "id": "cdktf.IResourceConstructor",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.IScopeCallback",
        "displayName": "IScopeCallback",
        "id": "cdktf.IScopeCallback",
        "implementations": [
          {
            "fqn": "cdktf.IScopeCallback",
            "displayName": "IScopeCallback",
            "id": "cdktf.IScopeCallback",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.IStackSynthesizer",
        "displayName": "IStackSynthesizer",
        "id": "cdktf.IStackSynthesizer",
        "implementations": [
          {
            "fqn": "cdktf.IStackSynthesizer",
            "displayName": "IStackSynthesizer",
            "id": "cdktf.IStackSynthesizer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IStackSynthesizer.synthesize",
            "displayName": "synthesize",
            "id": "cdktf.IStackSynthesizer.synthesize",
            "parameters": [
              {
                "fqn": "cdktf.IStackSynthesizer.synthesize.parameter.session",
                "displayName": "session",
                "id": "cdktf.IStackSynthesizer.synthesize.parameter.session",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.ISynthesisSession",
                      "displayName": "ISynthesisSession",
                      "fqn": "cdktf.ISynthesisSession",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Synthesize the associated stack to the session."
            },
            "usage": "def synthesize(\n  session: ISynthesisSession\n) -> None"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Encodes information how a certain Stack should be deployed inspired by AWS CDK v2 implementation (synth functionality was removed in constructs v10)."
        }
      },
      {
        "fqn": "cdktf.IStringProducer",
        "displayName": "IStringProducer",
        "id": "cdktf.IStringProducer",
        "implementations": [
          {
            "fqn": "cdktf.IStringProducer",
            "displayName": "IStringProducer",
            "id": "cdktf.IStringProducer",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.IStringProducer.produce",
            "displayName": "produce",
            "id": "cdktf.IStringProducer.produce",
            "parameters": [
              {
                "fqn": "cdktf.IStringProducer.produce.parameter.context",
                "displayName": "context",
                "id": "cdktf.IStringProducer.produce.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Produce the string value."
            },
            "usage": "def produce(\n  context: IResolveContext\n) -> str"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface for lazy string producers."
        }
      },
      {
        "fqn": "cdktf.ISynthesisSession",
        "displayName": "ISynthesisSession",
        "id": "cdktf.ISynthesisSession",
        "implementations": [
          {
            "fqn": "cdktf.ISynthesisSession",
            "displayName": "ISynthesisSession",
            "id": "cdktf.ISynthesisSession",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.ISynthesisSession.property.manifest",
            "displayName": "manifest",
            "id": "cdktf.ISynthesisSession.property.manifest",
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.Manifest",
                  "displayName": "Manifest",
                  "fqn": "cdktf.Manifest",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "manifest: Manifest"
          },
          {
            "fqn": "cdktf.ISynthesisSession.property.outdir",
            "displayName": "outdir",
            "id": "cdktf.ISynthesisSession.property.outdir",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {
              "summary": "The output directory for this synthesis session."
            },
            "usage": "outdir: str"
          },
          {
            "fqn": "cdktf.ISynthesisSession.property.skip_validation",
            "displayName": "skip_validation",
            "id": "cdktf.ISynthesisSession.property.skipValidation",
            "optional": true,
            "type": {
              "formattingPattern": "bool"
            },
            "docs": {},
            "usage": "skip_validation: bool"
          }
        ],
        "docs": {
          "summary": "Represents a single session of synthesis.",
          "remarks": "Passed into `TerraformStack.onSynthesize()` methods.\noriginally from aws/constructs lib v3.3.126 (synth functionality was removed in constructs v10)"
        }
      },
      {
        "fqn": "cdktf.ITerraformAddressable",
        "displayName": "ITerraformAddressable",
        "id": "cdktf.ITerraformAddressable",
        "implementations": [
          {
            "fqn": "cdktf.AnyMap",
            "displayName": "AnyMap",
            "id": "cdktf.AnyMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.AnyMapList",
            "displayName": "AnyMapList",
            "id": "cdktf.AnyMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMap",
            "displayName": "BooleanMap",
            "id": "cdktf.BooleanMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.BooleanMapList",
            "displayName": "BooleanMapList",
            "id": "cdktf.BooleanMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexComputedList",
            "displayName": "ComplexComputedList",
            "id": "cdktf.ComplexComputedList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexList",
            "displayName": "ComplexList",
            "id": "cdktf.ComplexList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexMap",
            "displayName": "ComplexMap",
            "id": "cdktf.ComplexMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ComplexObject",
            "displayName": "ComplexObject",
            "id": "cdktf.ComplexObject",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteState",
            "displayName": "DataTerraformRemoteState",
            "id": "cdktf.DataTerraformRemoteState",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateArtifactory",
            "displayName": "DataTerraformRemoteStateArtifactory",
            "id": "cdktf.DataTerraformRemoteStateArtifactory",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateAzurerm",
            "displayName": "DataTerraformRemoteStateAzurerm",
            "id": "cdktf.DataTerraformRemoteStateAzurerm",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateConsul",
            "displayName": "DataTerraformRemoteStateConsul",
            "id": "cdktf.DataTerraformRemoteStateConsul",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateCos",
            "displayName": "DataTerraformRemoteStateCos",
            "id": "cdktf.DataTerraformRemoteStateCos",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcd",
            "displayName": "DataTerraformRemoteStateEtcd",
            "id": "cdktf.DataTerraformRemoteStateEtcd",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateEtcdV3",
            "displayName": "DataTerraformRemoteStateEtcdV3",
            "id": "cdktf.DataTerraformRemoteStateEtcdV3",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateGcs",
            "displayName": "DataTerraformRemoteStateGcs",
            "id": "cdktf.DataTerraformRemoteStateGcs",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateHttp",
            "displayName": "DataTerraformRemoteStateHttp",
            "id": "cdktf.DataTerraformRemoteStateHttp",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateLocal",
            "displayName": "DataTerraformRemoteStateLocal",
            "id": "cdktf.DataTerraformRemoteStateLocal",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateManta",
            "displayName": "DataTerraformRemoteStateManta",
            "id": "cdktf.DataTerraformRemoteStateManta",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateOss",
            "displayName": "DataTerraformRemoteStateOss",
            "id": "cdktf.DataTerraformRemoteStateOss",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStatePg",
            "displayName": "DataTerraformRemoteStatePg",
            "id": "cdktf.DataTerraformRemoteStatePg",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateS3",
            "displayName": "DataTerraformRemoteStateS3",
            "id": "cdktf.DataTerraformRemoteStateS3",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.DataTerraformRemoteStateSwift",
            "displayName": "DataTerraformRemoteStateSwift",
            "id": "cdktf.DataTerraformRemoteStateSwift",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMap",
            "displayName": "NumberMap",
            "id": "cdktf.NumberMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.NumberMapList",
            "displayName": "NumberMapList",
            "id": "cdktf.NumberMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMap",
            "displayName": "StringMap",
            "id": "cdktf.StringMap",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.StringMapList",
            "displayName": "StringMapList",
            "id": "cdktf.StringMapList",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformHclModule",
            "displayName": "TerraformHclModule",
            "id": "cdktf.TerraformHclModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformLocal",
            "displayName": "TerraformLocal",
            "id": "cdktf.TerraformLocal",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformModule",
            "displayName": "TerraformModule",
            "id": "cdktf.TerraformModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformRemoteState",
            "displayName": "TerraformRemoteState",
            "id": "cdktf.TerraformRemoteState",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformVariable",
            "displayName": "TerraformVariable",
            "id": "cdktf.TerraformVariable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.ITerraformAddressable.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ITerraformAddressable.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.ITerraformDependable",
        "displayName": "ITerraformDependable",
        "id": "cdktf.ITerraformDependable",
        "implementations": [
          {
            "fqn": "cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformHclModule",
            "displayName": "TerraformHclModule",
            "id": "cdktf.TerraformHclModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformModule",
            "displayName": "TerraformModule",
            "id": "cdktf.TerraformModule",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformDependable",
            "displayName": "ITerraformDependable",
            "id": "cdktf.ITerraformDependable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [
          {
            "fqn": "cdktf.ITerraformAddressable",
            "displayName": "ITerraformAddressable",
            "id": "cdktf.ITerraformAddressable",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "instanceMethods": [],
        "properties": [
          {
            "fqn": "cdktf.ITerraformDependable.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ITerraformDependable.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.ITerraformIterator",
        "displayName": "ITerraformIterator",
        "id": "cdktf.ITerraformIterator",
        "implementations": [
          {
            "fqn": "cdktf.ListTerraformIterator",
            "displayName": "ListTerraformIterator",
            "id": "cdktf.ListTerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.MapTerraformIterator",
            "displayName": "MapTerraformIterator",
            "id": "cdktf.MapTerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformIterator",
            "displayName": "TerraformIterator",
            "id": "cdktf.TerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformIterator",
            "displayName": "ITerraformIterator",
            "id": "cdktf.ITerraformIterator",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [],
        "properties": [],
        "docs": {}
      },
      {
        "fqn": "cdktf.ITerraformResource",
        "displayName": "ITerraformResource",
        "id": "cdktf.ITerraformResource",
        "implementations": [
          {
            "fqn": "cdktf.TerraformDataSource",
            "displayName": "TerraformDataSource",
            "id": "cdktf.TerraformDataSource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.TerraformResource",
            "displayName": "TerraformResource",
            "id": "cdktf.TerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITerraformResource",
            "displayName": "ITerraformResource",
            "id": "cdktf.ITerraformResource",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ITerraformResource.interpolation_for_attribute",
            "displayName": "interpolation_for_attribute",
            "id": "cdktf.ITerraformResource.interpolationForAttribute",
            "parameters": [
              {
                "fqn": "cdktf.ITerraformResource.interpolation_for_attribute.parameter.terraform_attribute",
                "displayName": "terraform_attribute",
                "id": "cdktf.ITerraformResource.interpolationForAttribute.parameter.terraformAttribute",
                "type": {
                  "formattingPattern": "str"
                },
                "docs": {}
              }
            ],
            "docs": {},
            "usage": "def interpolation_for_attribute(\n  terraform_attribute: str\n) -> IResolvable"
          }
        ],
        "properties": [
          {
            "fqn": "cdktf.ITerraformResource.property.fqn",
            "displayName": "fqn",
            "id": "cdktf.ITerraformResource.property.fqn",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "fqn: str"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.friendly_unique_id",
            "displayName": "friendly_unique_id",
            "id": "cdktf.ITerraformResource.property.friendlyUniqueId",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "friendly_unique_id: str"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.terraform_resource_type",
            "displayName": "terraform_resource_type",
            "id": "cdktf.ITerraformResource.property.terraformResourceType",
            "type": {
              "formattingPattern": "str"
            },
            "docs": {},
            "usage": "terraform_resource_type: str"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.count",
            "displayName": "count",
            "id": "cdktf.ITerraformResource.property.count",
            "optional": true,
            "type": {
              "formattingPattern": "typing.Union[int, float]"
            },
            "docs": {},
            "usage": "count: typing.Union[int, float]"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.depends_on",
            "displayName": "depends_on",
            "id": "cdktf.ITerraformResource.property.dependsOn",
            "optional": true,
            "type": {
              "formattingPattern": "typing.List[%]",
              "types": [
                {
                  "formattingPattern": "str"
                }
              ]
            },
            "docs": {},
            "usage": "depends_on: typing.List[str]"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.for_each",
            "displayName": "for_each",
            "id": "cdktf.ITerraformResource.property.forEach",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.ITerraformIterator",
                  "displayName": "ITerraformIterator",
                  "fqn": "cdktf.ITerraformIterator",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "for_each: ITerraformIterator"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.lifecycle",
            "displayName": "lifecycle",
            "id": "cdktf.ITerraformResource.property.lifecycle",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformResourceLifecycle",
                  "displayName": "TerraformResourceLifecycle",
                  "fqn": "cdktf.TerraformResourceLifecycle",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "lifecycle: TerraformResourceLifecycle"
          },
          {
            "fqn": "cdktf.ITerraformResource.property.provider",
            "displayName": "provider",
            "id": "cdktf.ITerraformResource.property.provider",
            "optional": true,
            "type": {
              "formattingPattern": "%",
              "types": [
                {
                  "id": "cdktf.TerraformProvider",
                  "displayName": "TerraformProvider",
                  "fqn": "cdktf.TerraformProvider",
                  "packageName": "cdktf",
                  "packageVersion": "0.0.0"
                }
              ]
            },
            "docs": {},
            "usage": "provider: TerraformProvider"
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.ITokenMapper",
        "displayName": "ITokenMapper",
        "id": "cdktf.ITokenMapper",
        "implementations": [
          {
            "fqn": "cdktf.ITokenMapper",
            "displayName": "ITokenMapper",
            "id": "cdktf.ITokenMapper",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ITokenMapper.map_token",
            "displayName": "map_token",
            "id": "cdktf.ITokenMapper.mapToken",
            "parameters": [
              {
                "fqn": "cdktf.ITokenMapper.map_token.parameter.t",
                "displayName": "t",
                "id": "cdktf.ITokenMapper.mapToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Replace a single token."
            },
            "usage": "def map_token(\n  t: IResolvable\n) -> typing.Any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "Interface to apply operation to tokens in a string.",
          "remarks": "Interface so it can be exported via jsii."
        }
      },
      {
        "fqn": "cdktf.ITokenResolver",
        "displayName": "ITokenResolver",
        "id": "cdktf.ITokenResolver",
        "implementations": [
          {
            "fqn": "cdktf.DefaultTokenResolver",
            "displayName": "DefaultTokenResolver",
            "id": "cdktf.DefaultTokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          },
          {
            "fqn": "cdktf.ITokenResolver",
            "displayName": "ITokenResolver",
            "id": "cdktf.ITokenResolver",
            "packageName": "cdktf",
            "packageVersion": "0.0.0"
          }
        ],
        "interfaces": [],
        "instanceMethods": [
          {
            "fqn": "cdktf.ITokenResolver.resolve_list",
            "displayName": "resolve_list",
            "id": "cdktf.ITokenResolver.resolveList",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolve_list.parameter.l",
                "displayName": "l",
                "id": "cdktf.ITokenResolver.resolveList.parameter.l",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "str"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolve_list.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized list."
            },
            "usage": "def resolve_list(\n  l: typing.List[str],\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.ITokenResolver.resolve_map",
            "displayName": "resolve_map",
            "id": "cdktf.ITokenResolver.resolveMap",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolve_map.parameter.m",
                "displayName": "m",
                "id": "cdktf.ITokenResolver.resolveMap.parameter.m",
                "type": {
                  "formattingPattern": "typing.Mapping[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Any"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolve_map.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveMap.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized map."
            },
            "usage": "def resolve_map(\n  m: typing.Mapping[typing.Any],\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.ITokenResolver.resolve_number_list",
            "displayName": "resolve_number_list",
            "id": "cdktf.ITokenResolver.resolveNumberList",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolve_number_list.parameter.l",
                "displayName": "l",
                "id": "cdktf.ITokenResolver.resolveNumberList.parameter.l",
                "type": {
                  "formattingPattern": "typing.List[%]",
                  "types": [
                    {
                      "formattingPattern": "typing.Union[int, float]"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolve_number_list.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveNumberList.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a tokenized number list."
            },
            "usage": "def resolve_number_list(\n  l: typing.List[typing.Union[int, float]],\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.ITokenResolver.resolve_string",
            "displayName": "resolve_string",
            "id": "cdktf.ITokenResolver.resolveString",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolve_string.parameter.s",
                "displayName": "s",
                "id": "cdktf.ITokenResolver.resolveString.parameter.s",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.TokenizedStringFragments",
                      "displayName": "TokenizedStringFragments",
                      "fqn": "cdktf.TokenizedStringFragments",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolve_string.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveString.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a string with at least one stringified token in it.",
              "remarks": "(May use concatenation)"
            },
            "usage": "def resolve_string(\n  s: TokenizedStringFragments,\n  context: IResolveContext\n) -> typing.Any"
          },
          {
            "fqn": "cdktf.ITokenResolver.resolve_token",
            "displayName": "resolve_token",
            "id": "cdktf.ITokenResolver.resolveToken",
            "parameters": [
              {
                "fqn": "cdktf.ITokenResolver.resolve_token.parameter.t",
                "displayName": "t",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.t",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolvable",
                      "displayName": "IResolvable",
                      "fqn": "cdktf.IResolvable",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolve_token.parameter.context",
                "displayName": "context",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.context",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IResolveContext",
                      "displayName": "IResolveContext",
                      "fqn": "cdktf.IResolveContext",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              },
              {
                "fqn": "cdktf.ITokenResolver.resolve_token.parameter.post_processor",
                "displayName": "post_processor",
                "id": "cdktf.ITokenResolver.resolveToken.parameter.postProcessor",
                "type": {
                  "formattingPattern": "%",
                  "types": [
                    {
                      "id": "cdktf.IPostProcessor",
                      "displayName": "IPostProcessor",
                      "fqn": "cdktf.IPostProcessor",
                      "packageName": "cdktf",
                      "packageVersion": "0.0.0"
                    }
                  ]
                },
                "docs": {}
              }
            ],
            "docs": {
              "summary": "Resolve a single token."
            },
            "usage": "def resolve_token(\n  t: IResolvable,\n  context: IResolveContext,\n  post_processor: IPostProcessor\n) -> typing.Any"
          }
        ],
        "properties": [],
        "docs": {
          "summary": "How to resolve tokens."
        }
      }
    ],
    "enums": [
      {
        "fqn": "cdktf.AnnotationMetadataEntryType",
        "displayName": "AnnotationMetadataEntryType",
        "id": "cdktf.AnnotationMetadataEntryType",
        "members": [
          {
            "id": "cdktf.AnnotationMetadataEntryType.INFO",
            "displayName": "INFO",
            "fqn": "cdktf.AnnotationMetadataEntryType.INFO",
            "docs": {}
          },
          {
            "id": "cdktf.AnnotationMetadataEntryType.WARN",
            "displayName": "WARN",
            "fqn": "cdktf.AnnotationMetadataEntryType.WARN",
            "docs": {}
          },
          {
            "id": "cdktf.AnnotationMetadataEntryType.ERROR",
            "displayName": "ERROR",
            "fqn": "cdktf.AnnotationMetadataEntryType.ERROR",
            "docs": {}
          }
        ],
        "docs": {}
      },
      {
        "fqn": "cdktf.AssetType",
        "displayName": "AssetType",
        "id": "cdktf.AssetType",
        "members": [
          {
            "id": "cdktf.AssetType.FILE",
            "displayName": "FILE",
            "fqn": "cdktf.AssetType.FILE",
            "docs": {}
          },
          {
            "id": "cdktf.AssetType.DIRECTORY",
            "displayName": "DIRECTORY",
            "fqn": "cdktf.AssetType.DIRECTORY",
            "docs": {}
          },
          {
            "id": "cdktf.AssetType.ARCHIVE",
            "displayName": "ARCHIVE",
            "fqn": "cdktf.AssetType.ARCHIVE",
            "docs": {}
          }
        ],
        "docs": {}
      }
    ]
  }
}