name: Unit Test Run
on:
  workflow_call:
    inputs:
      concurrency_group_prefix:
        default: pr
        required: false
        type: string
      package:
        required: true
        type: string
      terraform_version:
        required: true
        type: string

concurrency:
  group: ${{ inputs.concurrency_group_prefix }}-unit-${{ inputs.package }}-${{ inputs.terraform_version }}-${{ github.head_ref }}
  cancel-in-progress: true

jobs:
  unit-test:
    runs-on:
      - custom
      - linux
      - custom-linux-xl
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    env:
      CHECKPOINT_DISABLE: "1"
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: global-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT
      - name: ensure all plugin directories exist
        run: |
          mkdir -p ${{ steps.global-cache-dir-path.outputs.dir }}/terraform-plugins-linux
          mkdir -p ${{ steps.global-cache-dir-path.outputs.dir }}/go-cache
      - uses: actions/cache@v3
        id: global-cache # use this to check for `cache-hit` (`steps.global-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.global-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}-${{ inputs.terraform_version }}-${{ inputs.package }}
      - name: installing dependencies
        run: |
          yarn install --frozen-lockfile --prefer-offline
      - name: compile
        run: |
          tools/align-version.sh
          yarn build
          yarn package
        env:
          TERRAFORM_BINARY_NAME: "terraform${{ inputs.terraform_version }}"
          TF_PLUGIN_CACHE_DIR: ${{ steps.global-cache-dir-path.outputs.dir }}/terraform-plugins-linux
          GOCACHE: ${{ steps.global-cache-dir-path.outputs.dir }}/go-cache
      - name: test
        run: |
          npx lerna run --scope '${{ inputs.package }}' test:ci
        env:
          TERRAFORM_BINARY_NAME: "terraform${{ inputs.terraform_version }}"
          TF_PLUGIN_CACHE_DIR: ${{ steps.global-cache-dir-path.outputs.dir }}/terraform-plugins-linux
          GOCACHE: ${{ steps.global-cache-dir-path.outputs.dir }}/go-cache
      - name: Find mutations
        id: self_mutation
        run: |-
          git add ./**/*.snap
          git diff --staged --patch --exit-code > .repo.patch || echo "self_mutation_happened=true" >> $GITHUB_OUTPUT
      - name: Upload patch
        if: steps.self_mutation.outputs.self_mutation_happened
        uses: actions/upload-artifact@v3
        with:
          name: .repo.patch
          path: .repo.patch
      - name: Fail build on mutation
        if: steps.self_mutation.outputs.self_mutation_happened
        run: |-
          echo "::error::Files were changed during build (see build log). If this was triggered from a fork, you will need to update your branch."
          cat .repo.patch
          exit 1

  self-mutation:
    needs: unit-test
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    if: ${{ always() && needs.build.outputs.self_mutation_happened }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.PROJEN_GITHUB_TOKEN }}
          ref: ${{ github.event.pull_request.head.ref }}
          repository: ${{ github.event.pull_request.head.repo.full_name }}
      - name: Download patch
        uses: actions/download-artifact@v3
        with:
          name: .repo.patch
          path: ${{ runner.temp }}
      - name: Apply patch
        run: '[ -s ${{ runner.temp }}/.repo.patch ] && git apply ${{ runner.temp }}/.repo.patch || echo "Empty patch. Skipping."'
      - name: Set git identity
        run: |-
          git config user.name "team-tf-cdk"
          git config user.email "github-team-tf-cdk@hashicorp.com"
      - name: Push changes
        run: |2-
            git add .
            git commit -s -m "chore: update snapshots for unit test ${{ inputs.package }}"
            git push origin HEAD:${{ github.event.pull_request.head.ref }}-${{ inputs.package }}
            gh pr create -f --head ${{ github.event.pull_request.head.ref }}-${{ inputs.package }} --base ${{ github.event.pull_request.head.ref }} -l ci/skip
