name: Benchmark

on:
  push:
    branches:
      - main
  workflow_dispatch: {}

jobs:
  build-benchmark-matrix:
    runs-on: ubuntu-latest
    outputs:
      tests: ${{ steps.build-test-matrix.outputs.tests }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v2
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      - name: install dependencies
        run: yarn install
      - name: set version
        if: ${{ !inputs.skip_setup }}
        run: tools/align-version.sh "-dev.$GITHUB_RUN_ID"
      - name: build and package
        if: ${{ !inputs.skip_setup }}
        run: |
          yarn build
          yarn package
        env:
          SENTRY_DSN: ${{ secrets.SENTRY_DSN }}
      - name: Upload dist
        uses: actions/upload-artifact@v2
        if: ${{ !inputs.skip_setup }}
        with:
          name: dist
          path: dist
      - id: build-bench-matrix
        run: |
          ./tools/build-bench-matrix.sh
  linux_bench:
    needs: build-benchmark-matrix
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{fromJSON(needs.prepare-build-benchmark-matrix-tests.outputs.tests)}}
    container:
      image: docker.mirror.hashicorp.services/hashicorp/jsii-terraform
    env:
      CHECKPOINT_DISABLE: "1"
      TERRAFORM_VERSION: ${{ matrix.terraform }}
    timeout-minutes: 60

    steps:
      - uses: actions/checkout@v2
      - name: Download dist
        uses: actions/download-artifact@v2
        with:
          name: dist
          path: dist
      - name: Run bench
      # Run e.g. on examples/typescript/aws both get and then synth and measure both times, best through a script
# Collect all results
# Upload a report
# - name: Download previous benchmark data
#   uses: actions/cache@v1
#   with:
#     path: ./cache
#     key: ${{ runner.os }}-benchmark
# # Run `github-action-benchmark` action
# - name: Store benchmark result
#   uses: benchmark-action/github-action-benchmark@v1
#   with:
#     # What benchmark tool the output.txt came from
#     tool: 'go'
#     # Where the output from the benchmark tool is stored
#     output-file-path: output.txt
#     # Where the previous data file is stored
#     external-data-json-path: ./cache/benchmark-data.json
#     # Workflow will fail when an alert happens
#     fail-on-alert: true
